{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Internet Technologies (for Business Students)","text":"<p>This repository contains instructional materials, exercises, and projects to support a course in Internet Technologies. Includes web development, client-side, and server-side technologies.</p> <p>Students should consult their course's syllabus to know which materials they are responsible for covering.</p>"},{"location":"#instructional-modules","title":"Instructional Modules","text":""},{"location":"#module-i-web-development-html-css-twitter-bootstrap","title":"Module I: Web Development (HTML, CSS, Twitter Bootstrap)","text":"<ol> <li>\"Website Hosting\" Exercise</li> <li>\"Website Structure\" Exercise</li> <li>\"Website Style\" Exercise</li> <li>Website Challenge</li> <li>Website Project</li> </ol>"},{"location":"#module-ii-client-side-technologies-javascript","title":"Module II: Client-side Technologies (JavaScript)","text":"<ol> <li>\"Website Analytics\" Exercise</li> <li>JavaScript Language Overview and Datatypes</li> <li>The Document Object Model (DOM)</li> <li>\"Website Interactivity\" Exercise</li> <li>\"Crunch the Data\" Exercise</li> <li>\"Data Visualization\" Exercise</li> <li>Application Programming Interfaces (APIs)</li> <li>\"Fetch the Data\" Exercise</li> <li>Stocks Dashboard Challenge</li> </ol>"},{"location":"#module-iii-server-side-technologies-nodejs","title":"Module III: Server-side Technologies (Node.js)","text":"<ol> <li>Node.js Development Environment Setup</li> <li>\"Command-line Computing\" Exercise</li> <li>Node.js Overview and NPM Overview</li> <li>\"Server-side JavaScript\" Exercise</li> <li>\"Express App\" Exercise</li> <li>Web Application Project</li> </ol>"},{"location":"#external-resources","title":"External Resources","text":"<p>Mozilla Guides:</p> <ul> <li>Learn Web Development</li> <li>Getting Started with the Web</li> <li>Website Planning and Design</li> <li>CSS First Steps</li> <li>Manipulating Documents</li> <li>JavaScript First Steps</li> <li>Server Side First Steps</li> </ul> <p>W3Schools Guides:</p> <ul> <li>HTML Tutorial</li> <li>CSS Tutorial</li> <li>JavaScript Tutorial</li> </ul>"},{"location":"#license","title":"License","text":""},{"location":"exercises/api-client/exercise/","title":"\"API Client\" (HTML Forms) Exercise","text":""},{"location":"exercises/api-client/exercise/#prerequisites","title":"Prerequisites","text":"<ul> <li>Website Interactivity Exercise</li> <li>APIs</li> </ul>"},{"location":"exercises/api-client/exercise/#objectives","title":"Objectives","text":"<p>Use an HTML <code>form</code> element to send a \"POST\" HTTP request to a pre-configured API in order to create a new record in the API's database.</p>"},{"location":"exercises/api-client/exercise/#instructions","title":"Instructions","text":"<p>In your \"website-interactivity\" project, or in a new project called \"api-client\", create a new HTML file called \"create_product.html\" and paste the following contents inside:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n    &lt;title&gt;Products Form&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    &lt;h2&gt;New Product Form&lt;/h2&gt;\n    &lt;p&gt;Please fill-in the form below...&lt;/p&gt;\n\n    &lt;form action=\"https://web-app-starter-flask-sheets.herokuapp.com/products/create\" method=\"POST\"&gt;\n      &lt;label&gt;Name:&lt;/label&gt;\n      &lt;input type=\"text\" name=\"product_name\" placeholder=\"Product XYZ\" value=\"Product XYZ\"&gt;\n      &lt;br&gt;\n\n      &lt;label&gt;Department:&lt;/label&gt;\n      &lt;select name=\"department\"&gt;\n        &lt;option value=\"snacks\"&gt;Snacks&lt;/option&gt;\n        &lt;option value=\"beverages\"&gt;Beverages&lt;/option&gt;\n        &lt;option value=\"pantry\"&gt;Pantry&lt;/option&gt;\n        &lt;option value=\"frozen\"&gt;Frozen&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;br&gt;\n\n      &lt;label&gt;Price:&lt;/label&gt;\n      &lt;input type=\"number\" step=\"0.01\" min=\"0\" name=\"price\" value=\"4.99\" &gt;\n      &lt;br&gt;\n\n      &lt;label&gt;Available as of:&lt;/label&gt;\n      &lt;input type=\"date\" name=\"availability_date\" value=\"2019-01-01\"&gt;\n      &lt;br&gt;\n\n      &lt;button&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n\n    &lt;footer&gt;\n      &lt;hr&gt;\n      &lt;p&gt;\n        See: &lt;a href=\"https://docs.google.com/spreadsheets/d/1_hisQ9kNjmc-cafIasMue6IQG-ql_6TcqFGpVNOkUSE/edit#gid=0\"&gt;Google Sheet Database&lt;/a&gt;\n        and &lt;a href=\"https://github.com/prof-rossetti/web-app-starter-flask-sheets/blob/6f16635b4ed627f318c18dc8eecf5b6ae15a6451/web_app/routes/products.py#L20-L37\"&gt;API Source Code&lt;/a&gt;\n        and &lt;a href=\"https://web-app-starter-flask-sheets.herokuapp.com/products\"&gt;API&lt;/a&gt;\n      &lt;/p&gt;\n    &lt;/footer&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Preview your website by either opening the HTML file with the browser, or navigating to your project directory from the command-line and starting up a local web server:</p> <pre><code>cd ~/Desktop/website-interactivity/\npython -m http.server 8888\n</code></pre>"},{"location":"exercises/api-client/exercise/#further-exploration","title":"Further Exploration","text":"<p>Create another HTML file called \"list_products.html\", and paste the following contents inside:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n    &lt;title&gt;Products List&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    &lt;h2&gt;Products List&lt;/h2&gt;\n    &lt;ul id=\"products-list\"&gt;&lt;/ul&gt;\n\n    &lt;footer&gt;\n      &lt;hr&gt;\n      &lt;p&gt;\n        See: &lt;a href=\"https://groceries-api-csv.herokuapp.com/\"&gt;API&lt;/a&gt;\n        and &lt;a href=\"https://github.com/prof-rossetti/products-api-flask\"&gt;API Source Code&lt;/a&gt;\n      &lt;/p&gt;\n    &lt;/footer&gt;\n\n    &lt;script&gt;\n\n      var requestUrl = \"https://groceries-api-csv.herokuapp.com/products\"\n      console.log(\"FETCHING PRODUCTS FROM\", requestUrl)\n\n      // TODO: fetch the products, and for each: append a new list item to the \"products-list\" element\n\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Use the <code>fetch()</code> JavaScript function, as demonstrated in the Dataviz Exercise, to issue a \"GET\" HTTP request to the pre-configured products API, using the specified request URL.</p> <p>Then use JavaScript to dynamically create a list item (<code>li</code>) element to display the name of each product on the page!</p>"},{"location":"exercises/command-line-computing/exercise/","title":"\"Command-line Computing\" Exercise","text":""},{"location":"exercises/command-line-computing/exercise/#objectives","title":"Objectives","text":"<p>Before we're able to run Node.js applications on our local machines, we'll need to achieve a basic level of familiarity with the command-line. We'll need to use the command-line to navigate the computer's filesystem and use various command-line utilities (CLIs).</p>"},{"location":"exercises/command-line-computing/exercise/#references","title":"References","text":"<ul> <li>Intro to the Command-Line - Mozilla</li> </ul>"},{"location":"exercises/command-line-computing/exercise/#prerequisites","title":"Prerequisites","text":"<ul> <li>Local Development Environment Setup</li> </ul>"},{"location":"exercises/command-line-computing/exercise/#instructions","title":"Instructions","text":"<p>Follow along with one of the following guides:</p> <ul> <li>Unix Command-Line / Bash - RECOMMENDED FOR ALL STUDENTS (MAC OR WINDOWS)</li> <li>Windows Command-Prompt - NOT RECOMMENDED</li> </ul> <p>NOTE: Commands can differ, depending on your computer's operating system. By default, most coding documentation references what is called \"unix-style\" commands:  + On Mac OS, the default Terminal application will allow students to use unix-style commands.  + On Windows OS, the default Command Prompt application uses different commands, but installing the Git Bash application will allow students to use unix-style commands.</p>"},{"location":"exercises/command-line-computing/exercise/#tips","title":"Tips","text":"<p>As you complete the exercise, keep in mind the following tips:</p> <ul> <li>Pressing the up arrow will cycle through recent commands.</li> <li>Pressing tab will auto-complete filepaths.</li> <li>Typing \"clear\" and pressing enter (or just pressing \"command + k\" on Mac) will clear the screen.</li> </ul>"},{"location":"exercises/crunch-the-data/","title":"\"Crunch the Data\" Exercise","text":""},{"location":"exercises/crunch-the-data/#setup","title":"Setup","text":"<p>Download or copy these HTML files (\"gradebook.html\", \"rideshare.html\", \"social.html\", \"stocks.html\"), into the same local directory (perhaps the same one you used for the Website Interactivity exercise). Open them in the text editor, and preview each in the browser. View the browser's inspection tools to reveal the JavaScript console, where you should see the data printed.</p> <p>For each of the challenges, write more JavaScript at the bottom of the document to produce the desired results (usually printing or logging some calculated result). To test your code, save the document and refresh the page in the browser, and repeat until you see the desired result in the console.</p>"},{"location":"exercises/crunch-the-data/#challenges","title":"Challenges","text":""},{"location":"exercises/crunch-the-data/#challenge-1-gradebook","title":"Challenge 1: Gradebook","text":"<p>Given the JavaScript variable called <code>gradebook</code> provided below, write JavaScript code which references that variable to perform each of the following tasks...</p> <p>A) Log the date this data was downloaded (i.e. <code>\"2021-06-05\"</code>).</p> <p>B) Log the number of students in the gradebook (i.e. <code>10</code>).</p> <p>C) Loop through each student and log their grade, each on a new line.</p> <p>D) Log the average grade (i.e. <code>83.64</code>).</p> <p>E) Log the median grade (i.e. <code>87.6</code>). HINT: it may be helpful to leverage a third-party library like d3.median()</p> <pre><code>var gradebook = {\n  \"downloadDate\": \"2021-06-05\",\n  \"professorId\": 123,\n  \"students\":[\n    {\"studentId\": 1, \"name\": \"Student 1\", \"finalGrade\": 76.7},\n    {\"studentId\": 2, \"name\": \"Student 2\", \"finalGrade\": 85.1},\n    {\"studentId\": 3, \"name\": \"Student 3\", \"finalGrade\": 50.3},\n    {\"studentId\": 4, \"name\": \"Student 4\", \"finalGrade\": 89.8},\n    {\"studentId\": 5, \"name\": \"Student 5\", \"finalGrade\": 97.4},\n    {\"studentId\": 6, \"name\": \"Student 6\", \"finalGrade\": 75.5},\n    {\"studentId\": 7, \"name\": \"Student 7\", \"finalGrade\": 87.2},\n    {\"studentId\": 8, \"name\": \"Student 8\", \"finalGrade\": 88.0},\n    {\"studentId\": 9, \"name\": \"Student 9\", \"finalGrade\": 93.9},\n    {\"studentId\": 10, \"name\": \"Student 10\", \"finalGrade\": 92.5}\n  ]\n}\n</code></pre> <p>Further Exploration: also write JavaScript to create new HTML elements from this data and display them within the <code>div#gradebook-app</code> element. For example, try displaying a list or table of students.</p>"},{"location":"exercises/crunch-the-data/#challenge-2-rideshare","title":"Challenge 2: Rideshare","text":"<p>Given the JavaScript variable called <code>trip</code> provided below, write JavaScript code which references that variable to perform each of the following tasks...</p> <p>A) Log a human-friendly message to denote the driver\u2019s first name (i.e. <code>\"Your driver is Danny\"</code>).</p> <p>B) Assuming stops can get added or removed at any time, log the number of stops this trip makes (i.e. <code>3</code>).</p> <p>C) Assuming the stops will always be listed in ascending order of their stop sequence, and there will always be at least one stop, but the number of stops may change at any time, log the destination of the FIRST stop (i.e. <code>Madison Square\"</code>).</p> <p>D) Assuming the stops will always be listed in ascending order of their stop sequence, and there will always be at least one stop, but the number of stops may change at any time, print the destination of the LAST stop (i.e. currently <code>\"Washington Square\"</code>).</p> <p>E) Loop through each of the trip\u2019s stops and print that stop\u2019s passenger name, one at a time (i.e. <code>\"Vishal\"</code>, then <code>\"Clara\"</code>, then <code>\"Lee\"</code>, each on a separate line):</p> <pre><code>var trip = {\n    \"driver\": {\n        \"first_name\": \"Danny\",\n        \"last_name\": \"Dreyfus\",\n        \"avg_rating\": 3.6,\n        \"total_rides\": 950\n    },\n    \"vehicle\": {\n        \"make\": \"Tesla\",\n        \"model\": \"Cybertruck\",\n        \"year\": 2021,\n        \"color\": \"silver\"\n    },\n    \"rideshare\": true,\n    \"pickup_location\": \"Grand Central Terminal\",\n    \"stops\": [\n        {\"sequence\": 1, \"passenger\": \"Vishal\", \"destination\": \"Madison Square\", \"fare\": 3.99},\n        {\"sequence\": 2, \"passenger\": \"Clara\", \"destination\": \"Union Square\", \"fare\": 5.99},\n        {\"sequence\": 3, \"passenger\": \"Lee\", \"destination\": \"Washington Square\", \"fare\": 7.99}\n    ]\n}\n</code></pre> <p>Further Exploration: also write JavaScript to create new HTML elements from this data and display them within the <code>div#rideshare-app</code> element. For example, try displaying an ordered list of stops.</p>"},{"location":"exercises/crunch-the-data/#challenge-3-social-media","title":"Challenge 3: Social Media","text":"<p>Given the JavaScript variable called <code>tweets</code> provided below, write JavaScript code which references that variable to perform each of the following tasks...</p> <p>A) Print the screen name of the user who authored the first tweet (i.e. <code>\"sandwhoa\"</code>).</p> <p>B) Of all the tweets which include the phrase <code>\"@sandwhoa\"</code> in their full text, print the screen name of the user who authored that tweet, each on a separate line (i.e. <code>\"person2\"</code>, then <code>\"person3\"</code>).</p> <p>C) Of all the tweets which include the phrase <code>\"@sandwhoa\"</code> in their full text, determine which tweet has the greatest number of likes, and then print the screen name of the user who authored that tweet (i.e. <code>\"person3\"</code>). FYI: Assume the tweet order can change at any time and has no relationship with the number of likes.</p> <pre><code>var tweets = [\n    {\n        \"id\": 100200297,\n        \"full_text\": \"Look at this delicious sandwich!\",\n        \"img_url\": \"https://sandwhoa.com/sandwich.png\",\n        \"user\": {\"screen_name\": \"sandwhoa\", \"followers\": 5000},\n        \"likes_count\": 150\n    },\n    {\n        \"id\": 100200298,\n        \"full_text\": \"I love sandwiches\",\n        \"img_url\": null,\n        \"user\": {\"screen_name\": \"person1\", \"followers\": 100},\n        \"likes_count\": 5\n    },\n    {\n        \"id\": 100200299,\n        \"full_text\": \"@sandwhoa yumm...\",\n        \"img_url\": null,\n        \"user\": {\"screen_name\": \"person2\", \"followers\": 200},\n        \"likes_count\": 10\n    },\n    {\n        \"id\": 100200300,\n        \"full_text\": \"@sandwhoa that sandwich looks amazing!!\",\n        \"img_url\": null,\n        \"user\": {\"screen_name\": \"person3\", \"followers\": 300},\n        \"likes_count\": 35\n    },\n    {\n        \"id\": 100200301,\n        \"full_text\": \"I ate a great sandwich today\",\n        \"img_url\": null,\n        \"user\": {\"screen_name\": \"person4\", \"followers\": 400},\n        \"likes_count\": 50\n    }\n]\n</code></pre> <p>Further Exploration: also write JavaScript to create new HTML elements from this data and display them within the <code>div#social-app</code> element. For example, try displaying the newsfeed in a table or list, or with cards.</p>"},{"location":"exercises/crunch-the-data/#challenge-4-stocks","title":"Challenge 4: Stocks","text":"<p>Given the JavaScript variable called <code>stockData</code> provided below, write JavaScript code which references that variable to perform each of the following tasks...</p> <p>A) Log the stock symbol (i.e. <code>\"MSFT\"</code>).</p> <p>B) Log the number of days included in the time series data (i.e. <code>4</code>). HINT: the time series is an Object, not a List, so we might need to start using some of these Object methods to reference an array of just the keys, an array of just the values, or an array of the key-value pairs.</p> <p>C) Loop through each day, and log the date as well as that day's adjusted closing price, each on a new line.</p> <p>D) Log the latest adjusted closing price (i.e. <code>258.49</code>). NOTE: let's assume the latest day is the first one provided in the time series, but that the date value will change over time. </p> <p>E) Assemble a new list of just the dates, in ascending chronological order, then log that list (i.e. <code>[\"2021-04-08\", \"2021-04-09\", \"2021-04-12\", \"2021-04-13\" ]</code>).</p> <p>F) Assemble a new list of just the daily adjusted closing prices, in ascending chronological order, then log that list (i.e. <code>[253.25, 255.85, 255.91, 258.49]</code>).</p> <pre><code>var stockData = {\n    \"Meta Data\": {\n        \"1. Information\": \"Daily Time Series with Splits and Dividend Events\",\n        \"2. Symbol\": \"MSFT\",\n        \"3. Last Refreshed\": \"2021-04-13\",\n        \"4. Output Size\": \"Compact\",\n        \"5. Time Zone\": \"US/Eastern\"\n    },\n    \"Time Series (Daily)\": {\n        \"2021-04-13\": {\n            \"1. open\": \"257.2573\",\n            \"2. high\": \"259.19\",\n            \"3. low\": \"256.83\",\n            \"4. close\": \"258.49\",\n            \"5. adjusted close\": \"258.49\",\n            \"6. volume\": \"23837469\",\n            \"7. dividend amount\": \"0.0000\",\n            \"8. split coefficient\": \"1.0\"\n        },\n        \"2021-04-12\": {\n            \"1. open\": \"254.71\",\n            \"2. high\": \"257.67\",\n            \"3. low\": \"254.62\",\n            \"4. close\": \"255.91\",\n            \"5. adjusted close\": \"255.91\",\n            \"6. volume\": \"27148668\",\n            \"7. dividend amount\": \"0.0000\",\n            \"8. split coefficient\": \"1.0\"\n        },\n        \"2021-04-09\": {\n            \"1. open\": \"252.87\",\n            \"2. high\": \"255.99\",\n            \"3. low\": \"252.44\",\n            \"4. close\": \"255.85\",\n            \"5. adjusted close\": \"255.85\",\n            \"6. volume\": \"24326833\",\n            \"7. dividend amount\": \"0.0000\",\n            \"8. split coefficient\": \"1.0\"\n        },\n        \"2021-04-08\": {\n            \"1. open\": \"252.77\",\n            \"2. high\": \"254.139\",\n            \"3. low\": \"252.0\",\n            \"4. close\": \"253.25\",\n            \"5. adjusted close\": \"253.25\",\n            \"6. volume\": \"23625197\",\n            \"7. dividend amount\": \"0.0000\",\n            \"8. split coefficient\": \"1.0\"\n        }\n    }\n}\n</code></pre> <p>Further Exploration: also write JavaScript to create new HTML elements from this data and display them within the <code>div#stocks-app</code> element. For example, try displaying the stock symbol and the latest closing price.</p>"},{"location":"exercises/dataviz/exercise/","title":"The Dataviz Exercise","text":""},{"location":"exercises/dataviz/exercise/#prerequisites","title":"Prerequisites","text":"<ul> <li>\"Crunch the Data\" Exercise</li> </ul>"},{"location":"exercises/dataviz/exercise/#references","title":"References","text":"<ul> <li>The Plotly Package</li> </ul>"},{"location":"exercises/dataviz/exercise/#instructions","title":"Instructions","text":"<p>Search the Internet for available JavaScript dataviz libraries, or use the Plotly library as recommended.</p> <p>Familiarize yourself with the package's documentation, and find some example code for bar charts, line charts, pie charts, and any other kind of chart you'd like to make.</p> <p>Create a new repository and download it locally. Place inside copies of following files: \"bar_charts.html\", \"line_charts.html\", and \"pie_charts.html\".</p> <p>Open these pages with your text editor. Notice we are referencing / importing some JavaScript functionality from Plotly (or whichever library you chose), and we have some empty containers to hold our charts.</p> <p>Preview these pages in a browser. View the JavaScript console to see some data logged there.</p> <p>Write additional JavaScript at the bottom of these pages to create data visualizations of the provided data. It might not be possible to do this in a single step, so you're encouraged to work on one chart at a time, using the following process:   1. Replicate the example from the documentation.   2. Change / update the data that gets charted (using the example data).   3. Ideally customize the chart appearance (e.g. adding titles, axis labels, etc.).</p> <p>When you're done with the three types of charts specified, optionally create new HTML files for different types of charts of interest, and explore your ability to make those charts in JavaScript as well.</p> <p>Nice, now you are more familiar with making interactive charts!</p>"},{"location":"exercises/dataviz/exercise/#example-data","title":"Example Data","text":"<p>For your visual reference, here are some copies of the data we are charting:</p> <pre><code>var barData = [\n    {\"genre\": \"Thriller\", \"viewers\": 123456},\n    {\"genre\": \"Mystery\", \"viewers\": 234567},\n    {\"genre\": \"Sci-Fi\", \"viewers\": 987654},\n    {\"genre\": \"Fantasy\", \"viewers\": 876543},\n    {\"genre\": \"Documentary\", \"viewers\": 283105},\n    {\"genre\": \"Action\", \"viewers\": 544099},\n    {\"genre\": \"Romantic Comedy\", \"viewers\": 121212}\n]\n</code></pre> <pre><code>var lineData = [\n    {\"date\": \"2019-01-01\", \"stock_price_usd\": 100.00},\n    {\"date\": \"2019-01-02\", \"stock_price_usd\": 101.01},\n    {\"date\": \"2019-01-03\", \"stock_price_usd\": 120.20},\n    {\"date\": \"2019-01-04\", \"stock_price_usd\": 107.07},\n    {\"date\": \"2019-01-05\", \"stock_price_usd\": 142.42},\n    {\"date\": \"2019-01-06\", \"stock_price_usd\": 135.35},\n    {\"date\": \"2019-01-07\", \"stock_price_usd\": 160.60},\n    {\"date\": \"2019-01-08\", \"stock_price_usd\": 162.62},\n]\n</code></pre> <pre><code>var pieData = [\n    {\"company\": \"Company X\", \"market_share\": 0.55},\n    {\"company\": \"Company Y\", \"market_share\": 0.30},\n    {\"company\": \"Company Z\", \"market_share\": 0.15}\n]\n</code></pre>"},{"location":"exercises/dataviz-challenge/exercise/","title":"Stocks Dashboard Challenge","text":""},{"location":"exercises/dataviz-challenge/exercise/#prerequisites","title":"Prerequisites","text":"<ol> <li>\"Website Interactivity\" Exercise</li> <li>\"Crunch the Data\" Exercise</li> <li>\"Dataviz\" Exercise</li> <li>\"Fetch the Data\" Exercise</li> <li>Obtain an AlphaVantage API Key (or use one of the prof's premium keys) and consult the API Documentation</li> </ol>"},{"location":"exercises/dataviz-challenge/exercise/#prompt","title":"Prompt","text":"<p>You've been hired by an investment firm to make a decision support tool, an interactive financial data dashboard, to help them decide whether to buy, sell, or hold a given stock.</p> <p>The dashboard should allow a user to select from a predefined list of valid stock symbols, and click a button to fetch information about that stock.</p> <p>The dashboard should then display the selected stock's latest closing price, and a line chart depicting its closing prices over time.</p>"},{"location":"exercises/dataviz-challenge/exercise/#requirements","title":"Requirements","text":"<p>After a user inputs their API Key and selects a stock and clicks the \"Go\" button, the dashboard should:   1) Capture these input values   2) Compile the right URL given the provided inputs   3) Fetch data from that URL   4) Crunch the data   5) Overwrite the HTML display values (symbol, latest close)   6) Make a dataviz of closing prices over time</p>"},{"location":"exercises/dataviz-challenge/exercise/#instructions","title":"Instructions","text":""},{"location":"exercises/dataviz-challenge/exercise/#setting-up-the-repository","title":"Setting up the Repository","text":"<p>Create a new repository on GitHub, then download or \"clone\" the repository onto your local computer, then open the repository in a text editor, create a new \"index.html\" file, and paste inside the provided \"index.html\" starter code.</p> <p>Preview this file in the browser to see the form inputs and placeholder outputs.</p>"},{"location":"exercises/dataviz-challenge/exercise/#developing","title":"Developing","text":"<p>Iteratively develop the contents of your \"index.html\" page, using JavaScript to tackle the objectives.</p> <p>You may modify the page's HTML contents if necessary, although it might not be necessary.</p> <p>HINT: when crunching the time series data returned by this API, it might be helpful to use <code>Object</code> methods like <code>Object.keys()</code> and <code>Object.values()</code> to convert the nested time series object into easier-to-work-with arrays.</p>"},{"location":"exercises/dataviz-challenge/exercise/#deploying","title":"Deploying","text":"<p>Finally, configure GitHub Pages to host your website so it is publicly-accessible over the Internet.</p> <p>Note the URL of your hosted site, and use this URL for deliverable submission purposes, and for sharing with friends.</p>"},{"location":"exercises/express-app/exercise/","title":"Express App Exercise","text":""},{"location":"exercises/express-app/exercise/#objectives","title":"Objectives","text":"<ol> <li>Create a server-side web application using the Express.js package.</li> <li>Gain familiarity with web server routing, including handing GET and POST requests, and rendering HTML pages or JSON data responses.</li> <li>Use shared layouts to reduce duplication and improve maintainability of front-end code.</li> </ol>"},{"location":"exercises/express-app/exercise/#prerequisites","title":"Prerequisites","text":"<ul> <li>Server-Side JavaScript Exercise</li> <li>Git CLI: Installation and SSH Configuration</li> </ul>"},{"location":"exercises/express-app/exercise/#references","title":"References","text":"<ul> <li>The Express Package</li> </ul>"},{"location":"exercises/express-app/exercise/#instructions","title":"Instructions","text":"<p>Follow these checkpoints in order:</p> <ol> <li>Application Generation</li> <li>Routing</li> <li>Navigation and Views</li> <li>Shared Layouts</li> <li>Form Data</li> <li>Deploying to Production</li> <li>Flash Messaging</li> </ol> <p>Further Exploration:</p> <ol> <li>Interfacing with a Database</li> </ol>"},{"location":"exercises/express-app/checkpoints/1-generation/","title":"Express App Exercise Part 1: App Generation","text":""},{"location":"exercises/express-app/checkpoints/1-generation/#repository-setup","title":"Repository Setup","text":"<p>First create a new repository on GitHub and call it something like \"my-express-app\". Include a README file and a \".gitignore\" file (choosing \"Node\" from the dropdown).</p> <p>Use GitHub Desktop to \"clone\" or download the repo onto your local computer, for example onto the Desktop. Navigate there from the command-line:</p> <pre><code>cd ~/Desktop/my-express-app\n</code></pre>"},{"location":"exercises/express-app/checkpoints/1-generation/#generating-a-new-app","title":"Generating a New App","text":"<p>After installing the Express Generator globally, use it to generate a new Express application in the current directory:</p> <pre><code>express --view=ejs\n</code></pre> <p>NOTE: by passing the <code>--view=ejs</code> option, we're specify our preference to use EJS as the \"view template engine\". We'll look at the EJS views later.</p> <p>If it prompts you about \"destination is not empty, continue? [y/N]\", type y and press enter to proceed.</p> <p>This should create some new files in the repository:</p> <pre><code>bin/www\npublic/javascripts\npublic/images\npublic/stylesheets\npublic/stylesheets/style.css\nroutes/index.js\nroutes/users.js\nviews/index.ejs\nviews/error.ejs\napp.js\npackage.json\n</code></pre> <p>Don't worry if you're unfamiliar with the location and purpose of each of these files. We will examine each at the appropriate time.</p> <p>Do take a moment to observe presence of the \"package.json\" file, which indicates this project is an NPM project. The project's root directory doesn't contain an \"index.js\" file, but which file do you think is the main entry-point into this NPM project?</p>"},{"location":"exercises/express-app/checkpoints/1-generation/#installing-dependencies","title":"Installing Dependencies","text":"<p>Follow the prompt to install package dependencies:</p> <pre><code>npm install\n</code></pre>"},{"location":"exercises/express-app/checkpoints/1-generation/#running-a-local-web-server","title":"Running a Local Web Server","text":"<p>Run the default development web server:</p> <pre><code>npm start\n\n# or...\n# npm run start\n</code></pre> <p>You should now be able to visit the application's home page in your browser at <code>localhost:3000</code>. Go check it out.</p> <p>After demonstrating your ability to view the application locally in a browser, stop the web server with <code>ctrl + c</code>.</p> <p>Nice job. Take a moment to make a new commit with a message of \"Generate app\".</p> <p>We would otherwise be done with the setup, but before we go any further, let's take a moment to install a different web server.</p>"},{"location":"exercises/express-app/checkpoints/1-generation/#upgrading-the-local-web-server","title":"Upgrading the Local Web Server","text":"<p>One shortcoming of the default web server is that it requires us to restart the server each time we make a change to one of our application's files. During development, this happens a lot, so we'll want to use a different web server called Nodemon, which will automatically detect file changes and obviate our need to take manual action.</p> <p>Install Nodemon globally:</p> <pre><code>npm install nodemon -g\n</code></pre> <p>In the \"scripts\" section of the \"package.json\" file, add a new \"start-dev\" script to invoke <code>nodemon</code> instead of <code>node</code>:</p> <pre><code>// package.json\n// ...\n  \"scripts\": {\n    \"start\": \"node ./bin/www\",\n    \"start-dev\": \"nodemon ./bin/www\"\n  },\n// ...\n</code></pre> <p>Take this opportunity to take a quick look at the <code>bin/www</code> file. Observe the code in this file defines a web server which runs on port 3000 the application logic defined by the \"app.js\" file.</p> <p>Restart the web server:</p> <pre><code>npm run start-dev\n</code></pre> <p>Congratulations. You've just created a new web application and viewed it locally in a browser. The next step will be to setup the application's navigational structure. Before moving on, let's make another commit with a message like \"Upgrade local web server\".</p>"},{"location":"exercises/express-app/checkpoints/2-observation/","title":"Express App Exercise Part 2: Observation","text":""},{"location":"exercises/express-app/checkpoints/2-observation/#initialization","title":"Initialization","text":"<p>Let's view the \"app.js\" file to see how our web app is being initialized:</p> <pre><code>// this is the \"app.js\" file...\n// ...\nvar indexRouter = require('./routes/index');\nvar usersRouter = require('./routes/users');\n// ...\nvar app = express();\n// ...\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\n// ...\n</code></pre> <p>We see the new express app is using route definitions imported from the \"routes/index.js\" and \"routes/users.js\" files. Let's inspect those files to see the routing logic defined there.</p>"},{"location":"exercises/express-app/checkpoints/2-observation/#routing-and-views","title":"Routing and Views","text":""},{"location":"exercises/express-app/checkpoints/2-observation/#rendering-html-templates","title":"Rendering HTML Templates","text":"<p>When we inspect the index routes file, we see there is a function to handle requests to the \"/\" path, and respond by rendering an HTML template called \"index\".</p> <pre><code>// this is the \"routes/index.js\" file...\n\nvar express = require('express');\nvar router = express.Router();\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express' });\n});\n\nmodule.exports = router;\n</code></pre> <p>We also see the route passing some data object with a <code>title</code> attribute to the HTML page. Let's examine the \"views/index.ejs\" file to see how it is using the data:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\n    &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;\n    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Here we see some embedded JavaScript (EJS) syntax, which is not HTML or JavaScript. We see we can use a snippet like <code>&lt;%= title %&gt;</code> to reference the data passed from the router.</p> <p>Let's modify the value of the <code>title</code> variable in the route definition, changing it from <code>'Express'</code> to something else like <code>'My App'</code>. Refresh the browser and see the updated index page contents.</p> <p>Cool, we now know how to render HTML templates and pass data to them.</p>"},{"location":"exercises/express-app/checkpoints/2-observation/#responding-with-json-data","title":"Responding with JSON Data","text":"<p>When we inspect the user routes file, we see there is a function to handle requests to the \"/\" path, but since these routes have been anchored to the \"users\" namespace in the \"app.js\" file, really this route is responding to requests to \"/users\".</p> <pre><code>// this is the \"routes/users.js\" file...\n\nvar express = require('express');\nvar router = express.Router();\n\n/* GET users listing. */\nrouter.get('/', function(req, res, next) {\n  res.send('respond with a resource');\n});\n\nmodule.exports = router;\n</code></pre> <p>Right now instead of rendering an HTML template, this route is returning some simple string data.</p> <p>Let's change it to return some JSON data instead:</p> <pre><code>// this is the \"routes/users.js\" file...\n\n// ...\n\nrouter.get('/', function(req, res, next) {\n\n  var users = [\n    {\"id\": 1, \"name\": \"User 1\", \"email\": \"user1@example.com\"},\n    {\"id\": 2, \"name\": \"User 2\", \"email\": \"user2@yahoo.com\"},\n    {\"id\": 3, \"name\": \"User 3\", \"email\": \"user3@myschool.edu\"},\n  ] // just some dummy data\n\n  res.send(users);\n});\n\n// ...\n</code></pre> <p>Let's now visit http://localhost:3000/users in the browser to see the JSON data returned from the server. Nice! You have just created your own JSON API.</p> <p>Make another commit with a message like \"Respond with JSON data\". With a better understanding of how the app is working, we are now ready to extend it.</p>"},{"location":"exercises/express-app/checkpoints/3-extension/","title":"Express App Exercise Part 3: Extension","text":""},{"location":"exercises/express-app/checkpoints/3-extension/#index-routes","title":"Index Routes","text":"<p>Let's create the routing and views for a few more pages, and include consistent navigation across all pages.</p> <p>Update the \"index.ejs\" file in the \"views\" directory, to include <code>&lt;nav&gt;</code> and <code>&lt;footer&gt;</code> elements:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\n    &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;\n    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;\n\n    &lt;nav&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/about\"&gt;About&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/hello\"&gt;Hello&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/nav&gt;\n\n    &lt;footer&gt;\n        &lt;p&gt;My footer&lt;/p&gt;\n    &lt;/footer&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Create a new file in the \"views\" directory called \"about.ejs\", and place the following contents inside:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;About Page&lt;/title&gt;\n    &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    &lt;h1&gt;About Me&lt;/h1&gt;\n    &lt;p&gt;This is the about page... &lt;/p&gt;\n\n    &lt;nav&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/about\"&gt;About&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/hello\"&gt;Hello&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/nav&gt;\n\n    &lt;footer&gt;\n        &lt;p&gt;My footer&lt;/p&gt;\n    &lt;/footer&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Create a new file in the \"views\" directory called \"hello.ejs\", and place the following contents inside:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Hello Page&lt;/title&gt;\n    &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    &lt;h1&gt;&lt;%= message %&gt;&lt;/h1&gt;\n    &lt;p&gt;This is the hello page... &lt;/p&gt;\n\n    &lt;nav&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/about\"&gt;About&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/hello\"&gt;Hello&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/nav&gt;\n\n    &lt;footer&gt;\n        &lt;p&gt;My footer&lt;/p&gt;\n    &lt;/footer&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Update the \"index.js\" file in the \"routes\" directory to add new routes for those pages:</p> <pre><code>// this is the \"routes/index.js\" file...\n\n//...\n\n/* GET about page. */\nrouter.get('/about', function(req, res, next) {\n  res.render('about');\n});\n\n/* GET hello page. */\nrouter.get('/hello', function(req, res, next) {\n  console.log(\"URL PARAMS:\", req.query)\n\n  var name = req.query.name || \"World\" // double pipes is an OR operator that allows us to use a default value if the url params are null / not specified\n\n  var message = \"Hello, \" + name\n\n  // passing a variable called \"message\" to the page (referencing the object's key name)\n  res.render('hello', {message: message});\n});\n\n//...\n</code></pre> <p>Visit the following routes in the browser to see how everything is working:    + http://localhost:3000/    + http://localhost:3000/about    + http://localhost:3000/hello    + http://localhost:3000/hello?name=Polly    + http://localhost:3000/hello?name=John%20Snow</p> <p>Nice! Let's make a quick commit with a message like \"Navigable pages\".</p>"},{"location":"exercises/express-app/checkpoints/3-extension/#user-routes","title":"User Routes","text":"<p>Before moving on, let's quickly learn an alternative way of handling required URL parameters, but this time in a JSON route.</p> <p>Let's update the \"users.js\" file in the \"routes\" directory to add another user route:</p> <pre><code>// this is the \"routes/users.js\" file...\n\n//...\n\nrouter.get('/:id', function(req, res, next) {\n\n  var userId = req.params.id;\n  console.log(\"USER ID:\", userId)\n\n  // just some dummy data using the id variable\n  var user = {\"id\": userId, \"name\": `User ${userId}`, \"email\": `user${userId}@example.com`}\n\n  res.send(user);\n});\n\n//...\n</code></pre> <p>Visit the following routes in the browser to see the server detect and handle the dynamic <code>:id</code> param:    + http://localhost:3000/users/99    + http://localhost:3000/users/100</p> <p>Nice, we are starting to build our own custom web application, and we have learned how to handle various kinds of request parameters.</p> <p>Before moving on, let's make another commit with a message like \"Another user route\".</p>"},{"location":"exercises/express-app/checkpoints/4-shared-layouts/","title":"Express App Exercise Part 4: Shared Layouts","text":""},{"location":"exercises/express-app/checkpoints/4-shared-layouts/#references","title":"References","text":"<ul> <li>https://ejs.co/</li> <li>https://github.com/soarez/express-ejs-layouts</li> <li>https://www.npmjs.com/package/express-ejs-layouts</li> <li>https://raddy.co.uk/blog/nodejs-express-layouts-and-partials/</li> </ul>"},{"location":"exercises/express-app/checkpoints/4-shared-layouts/#shared-layouts","title":"Shared Layouts","text":"<p>By default, EJS doesn't really do shared layouts well, but we can use another third-party package called <code>express-ejs-layouts</code> to do the job. Let's install that now:</p> <pre><code>npm install express-ejs-layouts --save\n</code></pre> <p>To use this package, we'll need to configure our app to use a shared layout:</p> <pre><code>// this is the \"app.js\" file...\n\n// ...\n\nvar expressLayouts = require('express-ejs-layouts'); // around line 6\n\n// ...\n\napp.use(expressLayouts); // around new line 22\n\n//...\n</code></pre> <p>Let's create that shared layout now in a new file in the \"views\" directory called \"layout.ejs\" (which is a specific file name the packages will be looking for):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;title&gt;My Web App&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;!-- SITE NAVIGATION --&gt;\n  &lt;div class=\"container\"&gt;\n    &lt;nav&gt;\n      &lt;h1&gt;&lt;a href=\"/\"&gt;My Web App&lt;/a&gt;&lt;/h1&gt;\n      &lt;ul&gt;\n          &lt;li&gt;&lt;a href=\"/about\"&gt;About&lt;/a&gt;&lt;/li&gt;\n          &lt;li&gt;&lt;a href=\"/hello\"&gt;Hello&lt;/a&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/nav&gt;\n    &lt;hr&gt;\n\n    &lt;!-- PAGE CONTENTS --&gt;\n    &lt;div id=\"content\"&gt;\n      &lt;%- body %&gt;\n    &lt;/div&gt;\n\n    &lt;!-- FOOTER --&gt;\n    &lt;footer&gt;\n      &lt;hr&gt;\n      &amp;copy; Copyright 2022 [Your Name Here] |\n      &lt;a href=\"https://github.com/prof-rossetti/internet-technologies/\"&gt;source&lt;/a&gt;\n    &lt;/footer&gt;\n  &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Notice the <code>&lt;%- body %&gt;</code> placeholder is where our individual pages will insert their own content. Let's update the individual views now to inherit from our shared layout, and inject only their own page-specific contents.</p> <p>Updated \"index.ejs\" file:</p> <pre><code>&lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;\n\n&lt;p&gt;Welcome Home&lt;/p&gt;\n</code></pre> <p>Updated \"about.ejs\" file:</p> <pre><code>&lt;h1&gt;About Me&lt;/h1&gt;\n\n&lt;p&gt;This is the about page... &lt;/p&gt;\n</code></pre> <p>Updated \"hello.ejs\" file:</p> <pre><code>&lt;h1&gt;&lt;%= message %&gt;&lt;/h1&gt;\n\n&lt;p&gt;This is the hello page... &lt;/p&gt;\n</code></pre> <p>Wow, now these pages are a lot easier to manage and understand.</p> <p>Restart the server if necessary and revisit all the pages in the browser to see they look the same as before. But now our front-end code is much more maintainable.</p> <p>Let's make another commit with a message like \"Shared Layouts\" before moving on.</p>"},{"location":"exercises/express-app/checkpoints/4-shared-layouts/#bootstrap-layout","title":"Bootstrap Layout","text":"<p>To make our pages look a little better, let's upgrade the \"layout.ejs\" file to use Bootstrap styles and navbar:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n\n    &lt;!-- Bootstrap CSS --&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6\" crossorigin=\"anonymous\"&gt;\n\n    &lt;title&gt;Hello, world!&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;!--\n        BOOTSTRAP NAV\n        https://getbootstrap.com/docs/5.0/components/navbar/\n    --&gt;\n    &lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\"&gt;\n        &lt;div class=\"container-fluid\"&gt;\n            &lt;a class=\"navbar-brand\" href=\"/\"&gt;My Web App&lt;/a&gt;\n\n            &lt;button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\n                &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n            &lt;/button&gt;\n\n            &lt;div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"&gt;\n                &lt;ul class=\"navbar-nav ms-auto mb-2 mb-lg-0\"&gt;\n\n\n                    &lt;li class=\"nav-item\"&gt;\n                        &lt;a class=\"nav-link\" href=\"/about\"&gt;About&lt;/a&gt;\n                    &lt;/li&gt;\n\n                    &lt;li class=\"nav-item\"&gt;\n                        &lt;a class=\"nav-link\" href=\"/hello\"&gt;Hello&lt;/a&gt;\n                    &lt;/li&gt;\n\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/nav&gt;\n\n    &lt;div class=\"container\" style=\"margin-top:2em;\"&gt;\n\n        &lt;!--\n            PAGE CONTENTS\n        --&gt;\n        &lt;div id=\"content\"&gt;\n            &lt;%- body %&gt;\n        &lt;/div&gt;\n\n        &lt;footer style=\"margin-top:2em; margin-bottom:2em;\"&gt;\n        &lt;hr&gt;\n            &amp;copy; Copyright 2022 [Your Name Here] |\n            &lt;a href=\"https://github.com/prof-rossetti/internet-technologies\"&gt;source&lt;/a&gt;\n\n        &lt;/footer&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Bootstrap JS Bundle --&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n\n        console.log(\"Thanks for the page visit!\")\n\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>If you do, make another commit with a message like \"Bootstrap layout\".</p>"},{"location":"exercises/express-app/checkpoints/5-form-data/","title":"Express App Exercise Part 5: Processing Data","text":"<p>In previous exercises like the \"Fetch the Data\" exercise, we've seen how to make requests on the client-side, but if our request requires us to pass some secret credential like an API key, it may be more secure to make that request on the server-side.</p> <p>In this checkpoint we will learn how to handle data submitted by HTML forms, send server-side requests, and pass the data back to the page.</p>"},{"location":"exercises/express-app/checkpoints/5-form-data/#environment-variable-configuration","title":"Environment Variable Configuration","text":"<p>We're going to make requests to the AlphaVantage API for stock market data, so first obtain a premium AlphaVantage API Key from the professor (e.g. \"abc123\").</p> <p>Next, create a new file in the root directory called \".env\", and place the following contents inside, using your own API Key value:</p> <pre><code># this is the \".env\" file...\n\nALPHAVANTAGE_API_KEY=\"abc123\"\n</code></pre> <p>Ensure the \".env\" file is ignored via an entry in the \".gitignore\" file (which should have happened during repo creation). This prevents our local \".env\" file and its contents from being tracked in version control, and prevents our secret credentials from being uploaded to GitHub, where they would be exposed.</p> <p>We'll use a NPM package called \"dotenv\" to read this environment variable from the \".env\" file and pass it indirectly to our application.</p> <p>Install the \"dotenv\" package:</p> <pre><code>npm install dotenv --save\n</code></pre> <p>Finally, update the very top of the \"app.js\" file to configure the \"dotenv\" package, as instructed by the package documentation:</p> <pre><code>// this is the \"app.js\" file...\n\nrequire('dotenv').config(); // new line 1\n\n// ...\n</code></pre> <p>Make a commit with a message like \"Setup environment variables\", but before you do, make sure the \".env\" is EXCLUDED from the files you commit. Otherwise, revisit your \".gitignore\" file.</p>"},{"location":"exercises/express-app/checkpoints/5-form-data/#new-routing-and-views","title":"New Routing and Views","text":"<p>Let's make a new stocks form which will allow the user to input a stock symbol. We'll create routes to render this form and capture data sent by the form. We'll then use form data to make a server-side request to another API, and finally return data back to a new stocks dashboard page.</p> <p>Add a new file in the \"routes\" directory called \"stocks.js\" and place the following contents inside:</p> <pre><code>// this is the \"routes/stocks.js\" file...\n\n// see: https://www.npmjs.com/package/node-fetch\n//import fetch from 'node-fetch';\nvar fetch = require('node-fetch');\n\nvar express = require('express');\nvar router = express.Router();\n\nconst API_KEY = process.env.ALPHAVANTAGE_API_KEY || \"abc123\" // obtain your own api key and set via environment variable\n\nrouter.get('/form', function(req, res, next) {\n  res.render(\"stocks_form\");\n});\n\nrouter.post('/dashboard', function(req, res, next) {\n  console.log(\"FORM DATA\", req.body)\n  var symbol = req.body.symbol || \"OOPS\"\n  console.log(\"STOCK SYMBOL\", symbol)\n\n  var requestUrl = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&amp;symbol=${symbol}&amp;apikey=${API_KEY}` // using string interpolation here, but you could alternatively do concatenation with + operators\n  console.log(\"REQUEST URL\", requestUrl)\n\n  fetch(requestUrl)\n    .then(function(response) {\n        return response.json()\n    })\n    .then(function(data){\n        console.log(\"STOCK DATA SUCCESS\", Object.keys(data))\n        var latestClose = Object.values(data[\"Time Series (Daily)\"])[0][\"5. adjusted close\"]\n        //req.flash(\"success\", \"Stock Data Request Success!\")\n        res.render(\"stocks_dashboard\", {symbol: symbol, data: JSON.stringify(data), latestClose: latestClose});\n      })\n    .catch(function(err){\n      console.log(\"STOCK DATA ERROR:\", err)\n      //req.flash(\"danger\", \"OOPS, Please check your inputs and try again.\")\n      res.redirect(\"/stocks/form\")\n    })\n});\n\nmodule.exports = router;\n</code></pre> <p>Updating the \"app.js\" file to recognize these routes:</p> <pre><code>// the \"app.js\" file...\n\n// ...\n\nvar stocksRouter = require('./routes/stocks') // around line 12\n\n// ...\n\napp.use('/stocks', stocksRouter) // around line 29\n\n// ...\n</code></pre> <p>Update the \"layout.ejs\" file in the \"views\" directory to include a new nav link:</p> <pre><code>&lt;!-- this is the \"views/layout.ejs \" file... --&gt;\n\n&lt;li class=\"nav-item\"&gt;\n    &lt;a class=\"nav-link\" href=\"/stocks/form\"&gt;Stocks Form&lt;/a&gt;\n&lt;/li&gt;\n</code></pre> <p>Create a new file called \"stocks_form.ejs\" in the \"views\" directory, and place the following contents inside:</p> <pre><code>&lt;!-- this is the \"views/stocks_form.ejs \" file... --&gt;\n\n&lt;h2&gt;Stocks Form&lt;/h2&gt;\n\n&lt;p&gt;Request some stock market data...&lt;/p&gt;\n\n&lt;form action=\"/stocks/dashboard\" method=\"POST\"&gt;\n\n    &lt;label&gt;Stock Symbol:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"symbol\" placeholder=\"MSFT\" value=\"MSFT\"&gt;\n    &lt;br&gt;\n\n    &lt;label&gt;Risk Tolerance:&lt;/label&gt;\n    &lt;select name=\"risk_level\"&gt;\n        &lt;option value=\"high\"&gt;High&lt;/option&gt;\n        &lt;option value=\"medium\"&gt;Medium&lt;/option&gt;\n        &lt;option value=\"low\"&gt;Low&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;br&gt;\n\n    &lt;button&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Create a new file called \"stocks_dashboard.ejs\" in the \"views\" directory, and place the following contents inside:</p> <pre><code>&lt;!-- this is the \"views/stocks_dashboard.ejs \" file... --&gt;\n\n&lt;h2&gt;Stocks Dashboard (&lt;%= symbol %&gt;)&lt;/h2&gt;\n\n&lt;p class=\"lead\"&gt;Latest Close: $&lt;%= latestClose %&gt; &lt;/p&gt;\n\n&lt;div id=\"chart-container\" height=\"700px\"&gt;\n&lt;/div&gt;\n\n&lt;script src=\"https://cdn.plot.ly/plotly-latest.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n\n    console.log(\"STOCKS DASHBOARD...\")\n\n    // use data from the router!\n    var symbol = '&lt;%- symbol %&gt;'\n    var stockData = JSON.parse('&lt;%- data %&gt;')\n    console.log(stockData)\n\n    var tsd = stockData[\"Time Series (Daily)\"]\n    var dates = Object.keys(tsd)\n    var dailyPrices = Object.values(tsd)\n    var closingPrices = dailyPrices.map(obj =&gt; obj[\"5. adjusted close\"])\n\n    // see: https://plotly.com/javascript/line-charts/\n    var series = {\n        x: dates,\n        y: closingPrices,\n        mode: \"lines+markers\"\n    }\n    var data = [series]\n    var layout = {\n        title: \"Daily Closing Prices for Stock: \" + symbol,\n        height: 600\n    }\n    Plotly.newPlot(\"chart-container\", data, layout, {responsive: true})\n\n&lt;/script&gt;\n</code></pre> <p>In order to fetch data on the server-side, we're using the \"node-fetch\" package, so let's install that now:</p> <pre><code>npm install node-fetch@2 --save\n</code></pre> <p>Finally, restart the server as necessary, revisit the app in the browser, and submit the stocks form to see the app working, with the new stocks form and dashboard pages!</p> <ul> <li>http://localhost:3000/stocks/form</li> </ul> <p>Finally, make a commit with a message like \"Setup stock routes\".</p>"},{"location":"exercises/express-app/checkpoints/6-deploy/","title":"Express App Exercise Part 6: Deploying to Production","text":""},{"location":"exercises/express-app/checkpoints/6-deploy/#references","title":"References","text":"<ul> <li>Getting Started w/ Heroku for Node.js</li> </ul>"},{"location":"exercises/express-app/checkpoints/6-deploy/#prerequisites","title":"Prerequisites","text":"<p>If you haven't yet done so, sign up for a Heroku account and install the Heroku CLI. The Heroku CLI may require installation of the Git CLI (see Node.js Development Environment Setup Guide).</p> <p>NOTE: Mac users may first need to install Homebrew.</p> <p>After installing the Heroku CLI, make sure you can login and list your applications:</p> <pre><code># just a one-time thing when you use heroku for the first time\nheroku login\n\n# list your servers (at this time, results might be empty-ish)\nheroku apps\n</code></pre> <p>NOTE: some students have reported that when running <code>heroku login</code> in Git Bash, it hangs after their successful login. If this is the case for you, close that Git Bash window and when you open a new one you should be all set.</p>"},{"location":"exercises/express-app/checkpoints/6-deploy/#server-setup","title":"Server Setup","text":"<p>IMPORTANT: run the following commands from the root directory of your project repository!</p> <p>Use the online Heroku Dashboard or the command-line (instructions below) to create a new application server, specifying a globally-unique name (e.g. \"stocks-app-123\", but yours will need to be different):</p> <pre><code>heroku create stocks-app-123 # choose your own unique name!\n</code></pre> <p>Verify the app has been created:</p> <pre><code>heroku apps\n</code></pre> <p>Also verify this step has associated the local repo with a remote address called \"heroku\":</p> <pre><code>git remote -v\n</code></pre>"},{"location":"exercises/express-app/checkpoints/6-deploy/#server-configuration","title":"Server Configuration","text":"<p>Before we copy the source code to the remote server, we need to configure the server's environment in a similar way we configured our local environment.</p> <p>Instead of using a \".env\" file, we will directly configure the server's environment variables by either clicking \"Reveal Config Vars\" from the \"Settings\" tab in your application's Heroku dashboard, or from the command line (instructions below):</p> <p></p> <pre><code># setting environment variables:\nheroku config:set ALPHAVANTAGE_API_KEY=\"________\"\n</code></pre> <p>At this point, you should be able to verify the production environment has been configured with the proper environment variable values:</p> <pre><code># getting environment variables:\nheroku config\n</code></pre>"},{"location":"exercises/express-app/checkpoints/6-deploy/#deploying","title":"Deploying","text":"<p>After this configuration process is complete, you are finally ready to \"deploy\" the application's source code to the Heroku server:</p> <pre><code>git push heroku main\n</code></pre> <p>NOTE: any time you update your source code, you can repeat this deployment command to upload your new code onto the server (after making a commit)</p>"},{"location":"exercises/express-app/checkpoints/6-deploy/#debugging","title":"Debugging","text":"<p>Open your app's URL in the browser:</p> <pre><code>heroku open\n</code></pre> <p>And see there are some errors. Let's view the errors:</p> <pre><code>heroku logs --tail\n</code></pre>"},{"location":"exercises/express-app/checkpoints/6-deploy/#configuring-the-procfile","title":"Configuring the Procfile","text":"<p>We need to tell Heroku how to run our app.</p> <p>Add a file called \"Procfile\" to the project's root directory, with the following contents inside:</p> <pre><code>web: node ./bin/www\n</code></pre> <p>Commit these changes with a message like \"Setup Procfile\", then re-deploy. Re-visit your site and see it working \"in production\". Nice!</p>"},{"location":"exercises/express-app/checkpoints/7-flash/","title":"Express App Exercise Part 7: Flash Messaging","text":""},{"location":"exercises/express-app/checkpoints/7-flash/#references","title":"References","text":"<ul> <li>https://github.com/expressjs/session</li> <li>https://github.com/escaladesports/express-flash-messages</li> </ul>"},{"location":"exercises/express-app/checkpoints/7-flash/#instructions","title":"Instructions","text":"<p>Uncomment the two lines related to <code>flash()</code> in the \"stocks.js\" file in the \"routes\" directory.</p> <p>In order to use these Flash messaging capabilities, we need to make use of sessions, so let's install some packages that will help us (by running these commands from the repo's root directory):</p> <pre><code>npm install express-session --save\nnpm install express-flash-messages --save\n</code></pre> <p>Update the contents of the \"app.js\" file:</p> <pre><code>// the \"app.js\" file...\n\n// ...\n\nvar session = require('express-session') // around line 9\nvar flash = require('express-flash-messages') // around line 10\n\n// ...\n\nvar SESSION_SECRET = process.env.SESSION_SECRET || \"super secret\" // around line 16 (before app initialization)\n\n// ...\n\n// around line 30 (after cookie parser and express layouts stuff)\napp.use(session({\n  cookie: { maxAge: 60000},\n  secret: SESSION_SECRET,\n  name: 'stocks-app-session',\n  resave: true,\n  saveUninitialized: true\n}));\napp.use(flash())\n\n// ...\n</code></pre> <p>Add this section to the top of the body in the \"layout.ejs\" file, before the nav:</p> <pre><code>&lt;!--\n    FLASH MESSAGES\n    https://github.com/escaladesports/express-flash-messages\n--&gt;\n&lt;div class=\"flash-container\"&gt;\n    &lt;% const messages = getMessages() %&gt;\n\n    &lt;% if (messages) { %&gt;\n        &lt;% Object.entries(messages).forEach((obj) =&gt; { %&gt;\n            &lt;% var category = obj[0] %&gt;\n            &lt;% var message = obj[1] %&gt;\n\n            &lt;!--\n                BOOTSTRAP ALERTS\n                https://getbootstrap.com/docs/5.0/components/alerts/#dismissing\n            --&gt;\n            &lt;div class=\"alert alert-&lt;%= category %&gt; alert-dismissible fade show\" role=\"alert\" style=\"margin-bottom:0;\"&gt;\n                &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"&gt;&lt;/button&gt;\n                &lt;%= message %&gt;\n            &lt;/div&gt;\n\n        &lt;% }) %&gt;\n    &lt;% } %&gt;\n&lt;/div&gt;\n</code></pre> <p>This code will make use of the flash messaging capabilities of the packages we installed, and display the messages as dismissible alerts.</p> <p>Restart the server as necessary, preview the app in the browser, and fill out the stocks form to see the flash messaging capabilities.</p> <p>Make a commit with a message like \"Flash messages\", then re-deploy to the server.</p>"},{"location":"exercises/express-app/checkpoints/8-database/","title":"Express App Exercise Part 8: Interfacing with a Database","text":"<p>Let's setup our own database and configure our web application to fetch data from there. Because SQL is not a prerequisite for this course, we'll use a NoSQL key-value storage option called Firestore from Google. Firestore is available via the Firebase suite of products.</p>"},{"location":"exercises/express-app/checkpoints/8-database/#database-setup","title":"Database Setup","text":"<p>Follow the Firestore Database Setup Guide to create an example database and credentials to access it. Download the resulting service account credentials JSON file into the root directory of your project repo, specifically naming it \"google-credentials.json\".</p> <p>Add a new line to your local \".gitignore\" file to ignore this file from version control (thus keeping your credentials secure, and preventing them from being uploaded to GitHub):</p> <pre><code># this is the \".gitignore\" file ...\n\ngoogle-credentials.json\n\n# ...\n</code></pre> <p>Remember to save the file.</p>"},{"location":"exercises/express-app/checkpoints/8-database/#package-installation","title":"Package Installation","text":"<p>We're going to use some firebase-related packages from Google to access the database, so let's install those now:</p> <pre><code>npm install firebase firebase-admin --save\n</code></pre> <p>See also the <code>firebase-admin</code> package notes.</p>"},{"location":"exercises/express-app/checkpoints/8-database/#usage","title":"Usage","text":""},{"location":"exercises/express-app/checkpoints/8-database/#firestore-service","title":"Firestore Service","text":"<p>After setting up the database and configuring the credentials file, we should be able to update our app to fetch data from the database.</p> <p>First create a new file called \"firestore-service.js\" in a new \"services\" subdirectory, and place the following contents inside:</p> <pre><code>// this is the \"services/firestore-service.js\" file...\n\nconst { initializeApp, cert } = require('firebase-admin/app');\nconst { getFirestore } = require('firebase-admin/firestore');\n\nconst serviceAccountCreds = require('../google-credentials.json'); // assumes you downloaded the credentials file here\n\ninitializeApp({credential: cert(serviceAccountCreds)});\n\nconst db = getFirestore();\n\nasync function fetchProducts() {\n    console.log(\"FETCHING PRODUCTS...\")\n\n    // see: https://googleapis.dev/nodejs/firestore/latest/CollectionReference.html#get\n    const docs = await db.collection(\"products\").get()\n    console.log(\"DOCS:\", docs.size)\n\n    // see: https://googleapis.dev/nodejs/firestore/latest/QuerySnapshot.html\n    // instead of returning the products as documents with separate ids and data\n    // let's create a single object with both the id and the data\n    // to make them easier to process and loop through later\n    var products = []\n    docs.forEach((doc) =&gt; {\n        //console.log(\"DOC ID:\", doc.id, \"DATA\", doc.data())\n        var product = doc.data() // create a new object with the product info\n        product[\"id\"] = doc.id // merge the id with the object\n        products.push(product)\n    })\n    //console.log(\"PRODUCTS:\", products.length)\n    return products\n}\n\nmodule.exports = {db, fetchProducts}\n</code></pre> <p>Here we are referencing the environment variables we setup earlier, and defining a function called <code>fetchProducts()</code> to fetch product documents from our database. We're also exporting this functionality so other local files can import it.</p>"},{"location":"exercises/express-app/checkpoints/8-database/#product-routes-and-views","title":"Product Routes and Views","text":"<p>Let's update our app's routes and views to fetch the products from the database, and display them on a page.</p> <p>Update the \"app.js\" file to configure some new product-related routes:</p> <pre><code>// this is the \"app.js\" file...\n\n// ...\n\nvar productsRouter = require('./routes/products'); // around line 15\n\n// ...\n\napp.use('/products', productsRouter); // around line 43\n\n// ...\n</code></pre> <p>And create a new file called \"products.js\" in the \"routes\" directory to define the routing logic:</p> <pre><code>// this is the \"routes/products.js\" file...\n\nvar express = require('express');\nvar router = express.Router();\n\nconst {fetchProducts} = require(\"../services/firestore-service\")\n\nrouter.get('/products', async function(req, res, next) {\n    try {\n        var products = await fetchProducts()\n\n        res.render(\"products\", {\"products\": products})\n    } catch (error) {\n        req.flash(\"danger\", \"OOPS, failed to fetch products.\")\n        res.redirect(\"/\")\n    }\n})\n\nrouter.post('/orders', function(req, res, next) {\n    console.log(\"FORM DATA\", req.body)\n    var productId = req.body.productId\n    var productName = req.body.productName\n    var productPrice = req.body.productPrice\n    // todo: maybe update the form / flow to ask the user for this info as well...\n    //var userEmail = \"customer@example.com\"\n    //var quantity = 1\n    //var totalPrice = productPrice * quantity\n    console.log(productId, productName, productPrice)\n    console.log(\"TODO: ORDER A PRODUCT!\")\n\n    req.flash(\"warning\", \"Order sent successfully (TODO)!\")\n    res.redirect(\"/products\")\n})\n\nmodule.exports = router;\n</code></pre> <p>Here we are saying that when a user visits the \"/products\" route, we will invoke the <code>fetchProducts()</code> function we imported from the firebase service helper file, and pass the resulting products data to the \"products\" page.</p> <p>So let's create that products page now, called \"products.ejs\" in the \"views\" directory:</p> <pre><code>&lt;!-- this is the \"views/products.ejs \" file... --&gt;\n\n&lt;h1&gt;Products&lt;/h1&gt;\n\n&lt;p className=\"lead\"&gt;Browse products and services...&lt;/p&gt;\n\n&lt;!--\n    BOOTSTRAP GRID\n    https://getbootstrap.com/docs/5.0/layout/grid/#row-columns\n--&gt;\n&lt;div class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n    &lt;% products.forEach(function(product){ %&gt;\n        &lt;div class=\"col\"&gt;\n            &lt;!--\n                BOOTSTRAP CARD\n                https://getbootstrap.com/docs/5.0/components/card/\n            --&gt;\n            &lt;div class=\"card\" style=\"margin-bottom: 2em;\"&gt;\n                &lt;img src=\"&lt;%= product['url'] %&gt;\" class=\"card-img-top\" alt=\"photo of &lt;%= product['name'] %&gt;\"&gt;\n                &lt;div class=\"card-body\"&gt;\n                    &lt;h5 class=\"card-title\"&gt;&lt;%= product[\"name\"] %&gt;&lt;/h5&gt;\n                    &lt;p class=\"card-text\"&gt;&lt;%= product[\"description\"] %&gt;&lt;/p&gt;\n\n                    &lt;form action=\"/orders\" method=\"POST\"&gt;\n                        &lt;input type=\"hidden\" name=\"productId\" value=\"&lt;%= product['id'] %&gt;\"&gt;\n                        &lt;input type=\"hidden\" name=\"productName\" value=\"&lt;%= product['name'] %&gt;\"&gt;\n                        &lt;input type=\"hidden\" name=\"productPrice\" value=\"&lt;%= product['price'] %&gt;\"&gt;\n                        &lt;button class=\"btn btn-primary\"&gt;Order Now!&lt;/button&gt;\n                    &lt;/form&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;% }) %&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Notice how we are using some EJS syntax to loop through the products array and display some info about each.</p> <p>Finally, let's add a nav link to this products page, by adding the following contents to the \"layout.ejs\" file in the \"views\" directory:</p> <pre><code>&lt;!-- this is the \"views/layout.ejs \" file... --&gt;\n\n&lt;li class=\"nav-item\"&gt;\n    &lt;a class=\"nav-link\" href=\"/products\"&gt;Products&lt;/a&gt;\n&lt;/li&gt;\n</code></pre> <p>Alright, now we're ready to see if our app works. Restart the server as necessary, preview your app in the browser, navigate to the products page, and see the products displayed there.</p> <p>Nice job, you've fetched data from the database!</p> <p>Make a commit, with a message like \"Fetch data from the database\".</p>"},{"location":"exercises/express-app/checkpoints/8-database/#re-deploying","title":"Re-Deploying","text":"<p>When we re-deploy our code to the server, it won't work unless we also configure our google credentials on the server, by running these commands from the root directory of your local repo:</p> <pre><code>heroku buildpacks:add https://github.com/s2t2/heroku-google-application-credentials-buildpack\n\n# stores contents of local credentials file (e.g. \"google-credentials.json\")\n# ... into an environment variable on the server\n# ... for use in conjunction with the buildpack\nheroku config:set GOOGLE_CREDENTIALS=\"$(&lt; google-credentials.json)\"\n</code></pre> <p>The next time you deploy, the products functionality should be working:</p> <pre><code>git push heroku main\n</code></pre>"},{"location":"exercises/fetch-the-data/","title":"\"Fetch the Data\" Exercise","text":""},{"location":"exercises/fetch-the-data/#prerequisites","title":"Prerequisites","text":"<ul> <li>\"Crunch the Data\" Exercise</li> </ul>"},{"location":"exercises/fetch-the-data/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Write JavaScript code to fetch data over the Internet.</li> <li>Gain familiarity with the JSON data format.</li> </ul>"},{"location":"exercises/fetch-the-data/#references","title":"References","text":"<ul> <li>Asynchronous JavaScript</li> <li>Arrow Functions</li> </ul>"},{"location":"exercises/fetch-the-data/#instructions","title":"Instructions","text":"<p>For each of the challenges in the original \"Crunch the Data\" Exercise, you were provided the data in a given hard-coded variable. But client-side applications will more likely be fetching their data from an API server or external file. So let's practice our ability to fetch data from some JSON files hosted on the web. This should help us prepare to request data from APIs in the future.</p>"},{"location":"exercises/fetch-the-data/#challenges","title":"Challenges","text":""},{"location":"exercises/fetch-the-data/#challenge-1-gradebook","title":"Challenge 1: Gradebook","text":"<p>Instead of using the hard-coded <code>gradebook</code> variable, fetch the data from this \"gradebook.json\" file instead.</p>"},{"location":"exercises/fetch-the-data/#challenge-2-rideshare","title":"Challenge 2: Rideshare","text":"<p>Instead of using the hard-coded <code>trip</code> variable, fetch the data from this \"trip.json\" file instead.</p>"},{"location":"exercises/fetch-the-data/#challenge-3-social-media","title":"Challenge 3: Social Media","text":"<p>Instead of using the hard-coded <code>tweets</code> variable, fetch the data from this \"tweets.json\" file instead.</p>"},{"location":"exercises/interactive-charts/exercise/","title":"Interactive Charts Exercise","text":"<p>Make an interactive chart.</p> <p>If you get stuck, or would like a step-by-step tutorial, see the accompanying screencast.</p>"},{"location":"exercises/interactive-charts/exercise/#objectives","title":"Objectives","text":"<ol> <li>Gain exposure to making interactive charts and graphs.</li> <li>Practice data-driven document development.</li> <li>Practice updating page contents without refreshing the page.</li> </ol>"},{"location":"exercises/interactive-charts/exercise/#prerequisites","title":"Prerequisites","text":"<ul> <li>Changing Datasets</li> </ul>"},{"location":"exercises/interactive-charts/exercise/#instructions","title":"Instructions","text":"<p>Create a new \"index.html\" page and populate it with the following contents:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Highcharts Exercise&lt;/title&gt;\n    &lt;script src=\"http://code.highcharts.com/highcharts.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Highcharts Exercise&lt;/h1&gt;\n\n    &lt;!-- OPTIONALLY PUT A SELECT OR BUTTON ELEMENT HERE - FURTHER EXPLORATION ONLY --&gt;\n\n    &lt;div id=\"my-chart-container\"&gt;\n    &lt;/div&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n\n      // INITIALIZE YOUR CHART HERE\n\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>NOTE: Do not at any time manually edit the HTML elements on this page (except as instructed in the \"Further Exploration\" section). Only edit the contents of the <code>script</code> at the bottom of the page.</p> <p>Preview the page in a browser.</p> <p>Browse the types of charts available, and choose one that looks interesting to you. Then click on it to reveal an example. For example, you might choose a basic pie chart.</p> <p>Scroll down and click the \"View Options\" button to reveal the source code producing the example chart.</p> <p>Copy and paste that code into your <code>script</code>, then refresh the page and see if you can get it to display on the page.</p> <p>Once you see the chart, save your work, then start to make minor edits to the configuration options. Configure the graph's title, series colors, series labels, axis labels, number formatting, etc.</p> <p>Optionally change the data series to display different data values.</p> <p>Nice job!</p>"},{"location":"exercises/interactive-charts/exercise/#further-exploration","title":"Further Exploration","text":"<p>Abstract-away the data series from within the chart configuration options to a variable outside of the chart initialization function.</p> <p>Create another dataset that mimics the structure of this dataset, but differs in values. Store that in a different variable.</p> <p>Add a <code>button</code> or <code>select</code> element, and configure it such that when clicked or selected, it changes the contents of the chart by switching the underlying dataset.</p>"},{"location":"exercises/interactive-maps/exercise/","title":"Interactive Maps Exercise","text":"<p>Make an interactive map.</p>"},{"location":"exercises/interactive-maps/exercise/#objectives","title":"Objectives","text":"<ol> <li>Gain exposure to making interactive maps.</li> <li>Gain exposure to Geographic Information System (GIS) data structures, including Latitude and Longitude.</li> <li>Practice data-driven document development.</li> <li>Practice updating page contents without refreshing the page.</li> </ol>"},{"location":"exercises/interactive-maps/exercise/#prerequisites","title":"Prerequisites","text":"<ul> <li>Changing Datasets</li> </ul>"},{"location":"exercises/interactive-maps/exercise/#instructions","title":"Instructions","text":"<p>Create a new \"index.html\" page and populate it with the following contents:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Leaflet Exercise&lt;/title&gt;\n\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.0.3/dist/leaflet.css\" /&gt;\n    &lt;script src=\"https://unpkg.com/leaflet@1.0.3/dist/leaflet.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Leaflet Exercise&lt;/h1&gt;\n\n    &lt;!-- OPTIONALLY PUT A SELECT ELEMENT HERE (FURTHER EXPLORATION ONLY) --&gt;\n\n    &lt;div id=\"my-map-container\" style='width: 400px; height: 300px;'&gt;&lt;/div&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n\n      //\n      // RAW DATASET\n      // courtesy of Shoreline East GTFS feed:\n      //   +  https://www.cttransit.com/about/developers\n      //   +  http://www.shorelineeast.com/google_transit.zip\n      //\n\n      var trainStations = [\n        {abbrev: \"NHV\", name: \"New Haven Union Station\", lat: 41.29771887088102, lon: -72.92673110961914, url: \"http://www.shorelineeast.com/service_info/stations/nh_u.php\"},\n        {abbrev: \"ST\", name: \"New Haven State Street Station\", lat: 41.3049849812806, lon: -72.92176365852356, url: \"http://www.shorelineeast.com/service_info/stations/nh_s.php\"},\n        {abbrev: \"BRN\", name: \"Branford\", lat: 41.27462757904543, lon: -72.81724601984024, url: \"http://www.shorelineeast.com/service_info/stations/branford.php\"},\n        {abbrev: \"GUIL\", name: \"Guilford\", lat: 41.275818924391224, lon: -72.6736432313919, url: \"http://www.shorelineeast.com/service_info/stations/guilford.php\"},\n        {abbrev: \"MAD\", name: \"Madison\", lat: 41.28366795570182, lon: -72.59953916072845, url: \"http://www.shorelineeast.com/service_info/stations/madison.php\"},\n        {abbrev: \"CLIN\", name: \"Clinton\", lat: 41.279485551365795, lon: -72.52829968929291, url: \"http://www.shorelineeast.com/service_info/stations/clinton.php\"},\n        {abbrev: \"WES\", name: \"Westbrook\", lat: 41.28876307212696, lon: -72.44840204715729, url: \"http://www.shorelineeast.com/service_info/stations/westbrook.php\"},\n        {abbrev: \"OSB\", name: \"Old Saybrook\", lat: 41.30039086249561, lon: -72.37682461738586, url: \"http://www.shorelineeast.com/service_info/stations/old_saybrook.php\"},\n        {abbrev: \"NLC\", name: \"New London\", lat: 41.354158032583534, lon: -72.0930764079094, url: \"http://www.shorelineeast.com/service_info/stations/new_london.php\"},\n        {abbrev: \"GCS\", name: \"Grand Central Station\", lat: 40.753165, lon: -73.977379, url: \"http://as0.mta.info/mnr/stations/station_detail.cfm\"},\n        {abbrev: \"GW\", name: \"Greenwich\", lat: 41.021705, lon: -73.624597, url: \"http://as0.mta.info/mnr/stations/station_detail.cfm\"},\n        {abbrev: \"STM\", name: \"Stamford\", lat: 41.04665375272103, lon: -73.54284524917603, url: \"http://as0.mta.info/mnr/stations/station_detail.cfm?key=226\"},\n        {abbrev: \"SN\", name: \"South Norwalk\", lat: 41.095529, lon: -73.421803, url: \"http://as0.mta.info/mnr/stations/station_detail.cfm\"},\n        {abbrev: \"BRP\", name: \"Bridgeport\", lat: 41.17870242332479, lon: -73.18707704544067, url: \"http://as0.mta.info/mnr/stations/station_detail.cfm?key=246\"},\n        {abbrev: \"STR\", name: \"Stratford\", lat: 41.19428563274378, lon: -73.13156604766846, url: \"http://as0.mta.info/mnr/stations/station_detail.cfm?key=248\"},\n        {abbrev: \"MIL\", name: \"Milford\", lat: 41.223229872871606, lon: -73.05766582489014, url: \"http://as0.mta.info/mnr/stations/station_detail.cfm?key=250\"},\n        {abbrev: \"WH\", name: \"West Haven\", lat: 41.271408, lon: -72.964722, url: \"http://as0.mta.info/mnr/stations/station_detail.cfm?key=251\"}\n      ]\n\n      //\n      // INITIALIZE MAP\n      //\n\n      var mapContainerId = 'my-map-container'\n      var latLonCoords = [41.29771887088102, -72.92673110961914] // [LAT, LON]\n      var zoomLevel = 8\n\n      var map = L.map(mapContainerId)\n          .setView(latLonCoords, zoomLevel)\n\n      //\n      // ADD MAP TILES\n      //\n\n      var tileUrlTemplate = 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' // just use this. don't worry about what it means\n      var tileLayerOptions = {attribution: '&amp;copy; &lt;a href=\"http://osm.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'} // just keep this\n\n      L.tileLayer(tileUrlTemplate, tileLayerOptions)\n          .addTo(map);\n\n      //\n      // ADD STATION MARKER(S) TO MAP\n      //\n\n      var stationPopup = \"&lt;b&gt;New Haven Union Station&lt;/b&gt;\" + \"&lt;br&gt;\" + \"Some content or context here. Maybe a clickable URL! Go crazy.\"\n\n      L.marker([41.29771887088102, -72.92673110961914])\n          .addTo(map)\n          .bindPopup(stationPopup)\n\n      // TODO: Add a marker for each station.\n\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>NOTE: Do not at any time manually edit the HTML elements on this page (except as instructed in the \"Further Exploration\" section). Only edit the contents of the <code>script</code> at the bottom of the page.</p> <p>Preview the page in a browser. Ensure you see a map with a marker.</p> <p>The default marker has been hard-coded to depict the location of New Haven Union Station. Your challenge is to instead dynamically display a marker for each station included in the <code>trainStations</code> variable. Display all the markers on the same map. HINT: try using a <code>forEach()</code> function!</p>"},{"location":"exercises/interactive-maps/exercise/#further-exploration","title":"Further Exploration","text":"<p>Display only a single station on the map. Configure a <code>select</code> element to include an option for each station. When a station is selected, trigger a map update to display only a marker for the selected station.</p>"},{"location":"exercises/local-dev-setup/exercise/","title":"Local Node.js Development Environment Setup","text":""},{"location":"exercises/local-dev-setup/exercise/#objectives","title":"Objectives","text":"<p>This document helps you install and configure the tools you'll need to develop Node.js (i.e. server-side JavaScript) applications on your local machine.</p>"},{"location":"exercises/local-dev-setup/exercise/#prerequisites","title":"Prerequisites","text":"<p>You should already have:</p> <ul> <li>GitHub Account</li> <li>GitHub Desktop software installed locally</li> <li>Text Editor (e.g. VS Code) installed locally</li> </ul>"},{"location":"exercises/local-dev-setup/exercise/#command-line-application","title":"Command-line Application","text":"<p>The goal is to have access to a command-line application of choice, which we'll use for a variety of purposes.</p> <p>Mac users who don't already have a preferred command-line application are encouraged to use the built-in Terminal application (no need to download anything, although you may want to customize the Terminal appearance as desired).</p> <p>Windows users who don't already have a preferred command-line application are encouraged to install Git Bash, which will allow Windows users to write the same unix-style commands as Mac users.</p> <p>After installing and configuring a command line application, complete this \"Command-line Computing\" Exercise, which will introduce you to the most useful commands.</p>"},{"location":"exercises/local-dev-setup/exercise/#nodejs","title":"Node.js","text":"<p>The goal is to have a tool capable of running JavaScript programs on your computer.</p> <p>Follow the steps in the Node.js Overview to install Node.js and NPM, either from the official website (recommended for beginners), or using a version manager like NVM or NVM-Windows (recommended for professionals).</p> <p>After installing, you should be able to run <code>node --version</code> and see something like \"v12.18.3\" (or later / higher). </p>"},{"location":"exercises/local-dev-setup/exercise/#git-cli","title":"Git CLI","text":"<p>NOTE: feel free to skip this section for now, unless you are running into errors saying Git needs to be installed. Later, if/when we use another tool that requires the Git CLI, we can revisit this.</p> <p>Windows users who have installed Git Bash (see \"Command-line Application\" section above) will have satisfied the Git CLI installation requirement.</p> <p>Mac users may find that Git is already installed, otherwise you are encouraged to install Git via Homebrew. See the professor's Git installation reference for more details.</p> <p>After installing the Git CLI, all students should generate SSH keys and configure their account credentials. See Connecting to GitHub with SSH  for more details.</p> <p>If successful, you should be able to run the following command:</p> <pre><code>git --version\n</code></pre>"},{"location":"exercises/server-side-javascript/exercise/","title":"Server-side JavaScript Exercise","text":"<p>Use NPM to create a new Node.js project, install a third-party open source JavaScript library, and execute a script which utilizes that library.</p>"},{"location":"exercises/server-side-javascript/exercise/#objectives","title":"Objectives","text":"<ol> <li>Run server-side JavaScript applications with Node.js.</li> <li>Gain familiarity with the structure of a Node.js project, including the role of the \"package.json\" file and \"node_modules\" directory.</li> </ol>"},{"location":"exercises/server-side-javascript/exercise/#prerequisites","title":"Prerequisites","text":"<ul> <li>Command-line Computing Exercise</li> <li>Node.js Overview</li> <li>Node Package Management (NPM) Overview</li> </ul>"},{"location":"exercises/server-side-javascript/exercise/#instructions","title":"Instructions","text":"<p>After installing Node.js and NPM via the prerequisite instructions, we should be able to use it to create and run applications.</p>"},{"location":"exercises/server-side-javascript/exercise/#initializing-projects","title":"Initializing Projects","text":"<p>Create a new directory on the Desktop called something like \"my_node_project\", and navigate there from the command-line.</p> <p>From the project directory, initialize a new Node.js project:</p> <pre><code>npm init\n</code></pre> <p>This process will ask you to specify the name of your project and some other metadata. You can leave most of the fields blank or use defaults by pressing \"enter\". Make sure to choose \"index.js\" as the entry point.</p> <p>When complete, this process will create a new file in the project directory called \"package.json\", which contains metadata about the project, the names and versions of all the project's dependencies, and the commands used to test and run it.</p>"},{"location":"exercises/server-side-javascript/exercise/#creating-programs","title":"Creating Programs","text":"<p>During the project initialization, we specified an \"entry point\" or chose the default entry point of \"index.js\". This is somewhat analogous to the \"index.html\" file being the entry point of a website project.</p> <p>Create a new file in the project directory called \"index.js\", and place inside the following contents:</p> <pre><code>// this is the \"index.js\" file...\nconsole.log(\"RUNNING RUNNING RUNNING\")\n</code></pre>"},{"location":"exercises/server-side-javascript/exercise/#running-programs","title":"Running Programs","text":"<p>We can use either the <code>node</code> utility or the <code>npm</code> utility to run the program.</p> <p>When using <code>node</code> to run the program, we specify the program's filepath:</p> <pre><code>node index.js\n</code></pre> <p>We can also optionally register a short-cut / alias for this command in the \"scripts\" section of the project's \"package.json\" file. For example, see the \"go-go-go\" alias below:</p> <pre><code>{\n  \"name\": \"my_node_project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n    \"go-go-go\": \"node index.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n</code></pre> <p>If specifying the alias in this way, we can use <code>npm run</code> to run it:</p> <pre><code>npm run go-go-go\n</code></pre> <p>Nice, you now know how to create and run Node.js apps.</p>"},{"location":"exercises/server-side-javascript/exercise/#managing-dependencies","title":"Managing Dependencies","text":"<p>Let's practice running a script which will require us to use some package dependencies, like some array methods from the \"d3\" package. Create a new file in the project directory called \"calculate.js\" and place inside the following contents:</p> <pre><code>// this is the \"calculate.js\" file...\n\nimport * as d3 from \"d3\" // see docs: https://github.com/d3/d3\n\nvar someIntegers = [9, 13, 99, 3]\nconsole.log(\"THE ARRAY IS:\", someIntegers)\n\nvar maxNumber = d3.max(someIntegers)\nconsole.log(\"MAXIMUM NUMBER IN THE ARRAY IS:\", maxNumber)\n</code></pre> <p>Since this program requires the \"d3\" module, let's install that now for the first time:</p> <pre><code>npm install d3 --save\n</code></pre> <p>Notice when we run the <code>npm install</code> command for the first time, it generates a new directory called \"node_modules\" and installs the specified package(s) inside. When we run this command with the <code>--save</code> flag, it also adds the package name to the \"dependencies\" section of the \"package.json\" file, and uses a file called \"package-lock.json\" to track more metadata about the package versions.</p> <p>FYI: If our project is a Git repository, we'll want to include a <code>node_modules</code> entry in the project's \".gitignore\" file, to ignore the \"node_modules\" directory from version control.</p> <p>Finally, demonstrate your ability to run this new program:</p> <pre><code>node calculate.js\n</code></pre> <p>NOTE: If you still run into the error: ```sh SyntaxError: Cannot use import statement outside a module <pre><code> One fix would be to add this statement to our \"package.json\" file right before the closing curly bracket:\n ```js\n //this is the \"package.json\" file...\n \n   \"type\": \"module\"\n</code></pre></p> <p>Nice, you now know how to install and use third-party Node.js modules!</p>"},{"location":"exercises/version-control/exercise/","title":"Version Control","text":"<p>Save and share your documents using the Git version control system.</p>"},{"location":"exercises/version-control/exercise/#prerequisites","title":"Prerequisites","text":"<ol> <li>Git Overview</li> </ol>"},{"location":"exercises/version-control/exercise/#objectives","title":"Objectives","text":"<ol> <li>Familiarize yourself with fundamental concepts of document version control.</li> <li>Learn the Git version control system.</li> <li>Practice using your Git client of choice.</li> </ol>"},{"location":"exercises/version-control/exercise/#instructions","title":"Instructions","text":"<p>Complete one or more of the following tutorials as desired:</p> <ul> <li>Git Tutorial</li> <li>Intro to GitHub</li> <li>Git Client Tutorials:<ul> <li>Intro to GitHub Desktop</li> <li>Intro to GitHub CLI</li> </ul> </li> </ul> <p>Reference also this Git Cheat Sheet.</p> <p>After participating in these tutorials and practicing on your own, you should be able to:</p> <ul> <li>Initialize a new Git repository.</li> <li>Review, stage, and commit file changes.</li> <li>Configure remote repositories, link them to local repositories, and push and pull (sync) them.</li> <li>Checkout a branch, commit changes to that branch, push to remote branch, and merge branches.</li> </ul>"},{"location":"exercises/website-challenge/exercise/","title":"Business Website Design Challenge","text":""},{"location":"exercises/website-challenge/exercise/#prerequisites","title":"Prerequisites","text":"<ol> <li>\"Website Hosting\" Exercise</li> <li>\"Website Structure\" Exercise</li> <li>\"Website Style\" Exercise</li> </ol>"},{"location":"exercises/website-challenge/exercise/#prompt","title":"Prompt","text":"<p>You've been hired by a juice company to modernize their web presence. The company currently uses printed brochures and in-store displays to communicate their menu of juice products to customers.</p> <p>Your mission is to convert their printed brochure into a website, so they can share their menu of juice products with the world!</p> <p></p> <p>NOTE: this prompt is fictional, however all menu items and images are copyright of The Juice Laundry, used here for instructional purposes only. </p> <p>Feel free to alternatively use a different menu or brochure, as long as you include a photo of the original menu in your website repository.</p> <p>Your website need not be an exact replica of the original brochure. It should draw inspiration from the brochure to generally convey the same information. You are encouraged to make your own decisions about the website's layout and design. Feel free to incorporate aspects of the original menu into a new design, as desired. </p>"},{"location":"exercises/website-challenge/exercise/#instructions","title":"Instructions","text":""},{"location":"exercises/website-challenge/exercise/#making-a-plan","title":"Making a Plan","text":"<p>First, take a few moments to sketch your desired website layout and design onto a piece of paper or a whiteboard. You can refer to this design sketch to keep you on track when developing the site. If you need to change designs later, that's fine. It's just helpful to have a plan before moving on to development. Optionally take a photo of, or otherwise document, your design mockup, and include it in your website repository for reference.</p>"},{"location":"exercises/website-challenge/exercise/#using-provided-images","title":"Using Provided Images","text":"<p>You may use any of the provided images. To use the images, you can choose any one of the following approaches:</p> <ul> <li> <p>A) Download or \"clone\" this entire course repository onto your computer, and copy / paste the relevant image files into your own local website repository; OR</p> </li> <li> <p>B) View any image on GitHub and click the \"download\" button to download that image file, then move it into your own local website repository; OR</p> </li> <li> <p>C) View any image on GitHub and right-click on it to \"Copy Image Address\" and use that URL as the HTML image source (no need to download any image files into your own local website repository)</p> </li> </ul>"},{"location":"exercises/website-challenge/exercise/#setting-up-the-repository","title":"Setting up the Repository","text":"<p>Create a new repository on GitHub. Download or \"clone\" the repository onto your local computer. Open the repository in a text editor, create a new \"index.html\" file, and auto-generate the default HTML scaffolding in that file.</p>"},{"location":"exercises/website-challenge/exercise/#developing-the-website","title":"Developing the Website","text":"<p>Iteratively develop the contents of your \"index.html\" page, using HTML and CSS. It may be helpful to save your work at certain milestones by making \"commits\" in GitHub Desktop software.</p> <p>You are encouraged to leverage Twitter Bootstrap or any other frameworks, as desired. </p>"},{"location":"exercises/website-challenge/exercise/#previewing-local-changes","title":"Previewing Local Changes","text":"<p>Open the \"index.html\" file with your browser to preview the changes locally. Make sure the site looks good locally before moving on to hosting.</p>"},{"location":"exercises/website-challenge/exercise/#deploying-the-website","title":"Deploying the Website","text":"<p>Use GitHub Desktop to \"commit\" any final changes, and then push your changes to GitHub.</p> <p>In your repository settings on GitHub, configure GitHub Pages to host your website so it is publicly-accessible over the Internet.</p> <p>Note the URL of your hosted site, and use this URL for deliverable submission purposes, and for sharing with friends. </p>"},{"location":"exercises/website-hosting/analytics/","title":"Website Analytics Exercise","text":""},{"location":"exercises/website-hosting/analytics/#prerequisites","title":"Prerequisites","text":"<ul> <li>Website Hosting Exercise</li> <li>Sign up for a Google Analytics account.</li> </ul>"},{"location":"exercises/website-hosting/analytics/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Configure your website to track pageviews and user events.</li> </ul>"},{"location":"exercises/website-hosting/analytics/#instructions","title":"Instructions","text":""},{"location":"exercises/website-hosting/analytics/#configure-google-analytics","title":"Configure Google Analytics","text":"<p>Login to your Google Analytics account.</p> <p>From the admin settings (see gear icon bottom left), create a new Web Property, called something like \"Student Site\".</p> <p>From the Web Property settings, set up a \"Web\" \"Data Stream\". Specify the URL to your hosted GitHub Pages site. Keep enhanced measurement turned on.</p> <p>Locate your data stream's \"Measurement Id\" (e.g. \"G-XXXXXXXX\"). Click \"view tag instructions\" to reveal the configuration code you'll need in the next step.</p>"},{"location":"exercises/website-hosting/analytics/#configure-the-website","title":"Configure the Website","text":""},{"location":"exercises/website-hosting/analytics/#tracking-pageviews","title":"Tracking Pageviews","text":"<p>As instructed, add a snippet like this to each of your website's HTML files, where <code>YOUR_MEASUREMENT_ID</code> refers to the Measurement Id you obtained in the previous step. See also this guide about Adding the Google Analytics Tag to your site, which says \"This code should appear immediately after the opening  tag. You need only one global snippet per page.\" <pre><code>&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;\n&lt;script async src=\"https://www.googletagmanager.com/gtag/js?id=YOUR_MEASUREMENT_ID\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments);}\n    gtag('js', new Date());\n\n    gtag('config', 'YOUR_MEASUREMENT_ID');\n&lt;/script&gt;\n</code></pre> <p>Save the file, commit your changes, and push them to GitHub to trigger a re-build of your GitHub Pages site. Visit the site and ask some friends to visit as well, and measure your pageviews in Google Analytics.</p> <p>NOTE: in some cases, you may need to wait around 24-48 hours for the data to start collecting.</p> <p>NOTE: page views and events will not be triggered by visitors who have disabled JavaScript via their browser settings or plugins.</p>"},{"location":"exercises/website-hosting/analytics/#tracking-events","title":"Tracking Events","text":"<p>To track events, we'll add a JavaScript snippet like the following examples / templates.</p> <pre><code>// event template:\ngtag('event', '&lt;type&gt;', {&lt;parameters&gt;});\n</code></pre> <pre><code>// event template / example:\ngtag('event', '&lt;type&gt;', {\n  'event_category': '&lt;category&gt;',\n  'event_label':' &lt;label&gt;',\n  'value': '&lt;value&gt;'\n});\n</code></pre> <p>See also: Sending Google Analytics Events, for more info, and Anatomy of an Event, which describes some of the event categories.</p> <p>We'll learn more about website interactivity in a later lesson, but for now, let's add the following JavaScript to the bottom of the body of the \"experience.html\" page:</p> <pre><code>&lt;script type=\"text/javascript\"&gt;\n\n    // referencing an HTML button element by its identifier:\n    var resumeButton = document.getElementById(\"download-resume\")\n\n    // defining a reusable function:\n    function handleClick() {\n        console.log(\"YOU CLICKED ME!\")\n\n        // send event to GA\n        gtag(\"event\", \"resume_download\")\n    }\n\n    // triggering the function when the button is clicked:\n    resumeButton.addEventListener(\"click\", handleClick, false)\n\n&lt;/script&gt;\n</code></pre> <p>Save the file, commit your changes, and push them to GitHub to trigger a re-build of your GitHub Pages site. Visit the site and click the button and see the resulting events logged in Google Analytics.</p> <p>NOTE: it might take a day or two for events to start showing up in Google Analytics.</p>"},{"location":"exercises/website-hosting/exercise/","title":"\"Website Hosting\" Exercise","text":"<p>Leverage an existing open source website to publish your own.</p> <p>NOTE: your website content will be accessible to the public.</p>"},{"location":"exercises/website-hosting/exercise/#objectives","title":"Objectives","text":"<ol> <li>Practice using web development tools like a text editor, web browser, and version control software.</li> <li>Gain exposure to a basic website repository, including its directory structure and HTML document contents.</li> <li>Publish a website to the Internet.</li> <li>Make changes to website contents, and re-publish.</li> </ol>"},{"location":"exercises/website-hosting/exercise/#prerequisites","title":"Prerequisites","text":"<ul> <li>Sign up for a GitHub account, unless you already have one. New users make sure to verify your email address by clicking the confirmation link sent via email.</li> <li>Download a text editor like VS Code.</li> <li>Download the GitHub Desktop software.</li> </ul>"},{"location":"exercises/website-hosting/exercise/#instructions","title":"Instructions","text":""},{"location":"exercises/website-hosting/exercise/#copying-a-repository-template","title":"Copying a Repository Template","text":"<p>Sign in to GitHub and navigate to the professor's Student Site repository. This repository contains an \"index.html\" file and other HTML files which comprise a basic website.</p> <p>Use this repository as a \"Template\" to create a copy of the repository under your own control. Navigate to your repository's homepage on GitHub, if necessary.</p> <p>Great, now you have some example website code.</p>"},{"location":"exercises/website-hosting/exercise/#configuring-hosting","title":"Configuring Hosting","text":"<p>Let's configure a GitHub Pages server to host our website.</p> <p>Navigate to your repository's \"Settings\" menu on GitHub, and scroll down to find the section called \"GitHub Pages\". Select the \"main\" branch from the drop-down, and click \"Save\". Visit the resulting GitHub Pages URL, which should resemble <code>https://USERNAME.github.io/student-site/</code>, where <code>USERNAME</code> is your own GitHub username.</p> <p>Congrats, you've published, or \"deployed\" the site! Anytime we save new versions of our website code to the repository's \"main\" branch, it will trigger a re-building of our hosted site.</p> <p>NOTE: sometimes it can take a few minutes for new changes to be reflected at the GitHub Pages URL.</p>"},{"location":"exercises/website-hosting/exercise/#downloading-the-repository","title":"Downloading the Repository","text":"<p>Let's now download the website code so we can make changes and preview them locally before re-publishing.</p> <p>From your repository's homepage on GitHub, click the green button to \"Open with GitHub Desktop\". Choose to save the repo in a location like your Desktop. Open the local repository in GitHub Desktop, if necessary.</p>"},{"location":"exercises/website-hosting/exercise/#making-changes","title":"Making Changes","text":"<p>Open the repository with your text editor. Open the \"about.html\" file in your text editor.</p> <p>Change some of the page's content, such as the student's name. Remember to save the file before previewing the changes.</p>"},{"location":"exercises/website-hosting/exercise/#previewing-changes","title":"Previewing Changes","text":"<p>Open the repository with your operating system's file explorer / finder.</p> <p>Right-click on the \"index.html\" page or any other to view its contents in the browser.</p>"},{"location":"exercises/website-hosting/exercise/#publishing-changes","title":"Publishing Changes","text":"<p>Optionally repeat the process of making and previewing changes.</p> <p>When you are satisfied with your changes, use the GitHub Desktop to make a \"commit\" (save a new version).</p> <p>After making a commit, push your changes up to your remote repo (named \"origin\" by default).  This should trigger a re-build of your GitHub pages site.</p>"},{"location":"exercises/website-hosting/exercise/#visiting","title":"Visiting","text":"<p>Re-visit the GitHub Pages URL, and navigate to the \"about\" page, where you should see your changes.</p> <p>Congratulations, you've published a website!</p>"},{"location":"exercises/website-interactivity/challenges/","title":"Interactivity Exercise Challenges","text":""},{"location":"exercises/website-interactivity/challenges/#stocks-page","title":"Stocks Page","text":"<p>Add a new page called \"stocks.html\" to your \"interactivity-exercise\" website, and paste the following contents inside:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Stocks Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My Stocks Page&lt;/h1&gt;\n\n    &lt;select id=\"stock-selector\"&gt;\n      &lt;option value=\"MSFT\" selected=true&gt;Microsoft&lt;/option&gt;\n      &lt;option value=\"GOOG\"&gt;Google&lt;/option&gt;\n      &lt;option value=\"AAPL\"&gt;Apple&lt;/option&gt;\n    &lt;/select&gt;\n\n    &lt;p&gt;Latest Date: &lt;span id=\"latest-date\"&gt;some placeholder content&lt;/span&gt;&lt;/p&gt;\n    &lt;p&gt;Latest Closing Price: &lt;span id=\"latest-closing-price\"&gt;some placeholder content&lt;/span&gt;&lt;/p&gt;\n\n    &lt;script&gt;\n\n      // FYI: this is JavaScript\n      console.log(\"HELLO FROM THE STOCKS PAGE!\")\n\n      // select elements from the document:\n      var stockSelector = document.getElementById(\"stock-selector\")\n      var latestDateParagraph = document.getElementById(\"latest-date\")\n      var latestPriceParagraph = document.getElementById(\"latest-closing-price\")\n\n      var cachedResponse // response data will only be accessible within the scope of the fetch() statement, so provide a variable in the global scope we can store response data to, for debugging in the console\n\n      // define a function with logic to request stock market data and write the results to the page:\n      function updateStockData() {\n\n        // get the selected stock from the &lt;select&gt; element:\n        var symbol = stockSelector.value\n        console.log(\"STOCK SYMBOL:\", symbol)\n\n        // compile the request URL\n        // see: https://www.alphavantage.co/documentation/#daily\n        var requestUrl = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&amp;apikey=abc123&amp;symbol=\" + symbol\n        console.log(\"REQUEST URL:\", requestUrl)\n\n        // issue the HTTP request to the specified URL\n        // see: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n        fetch(requestUrl)\n          .then((response) =&gt; {\n            return response.json();\n          })\n          .then((responseData) =&gt; {\n            console.log(\"RESPONSE DATA:\", responseData)\n            cachedResponse = responseData // store the response data in a variable that can be accessed after the request has been made (so you can debug via the console)\n\n            // determine latest date and closing price\n            // depends on the specific nested structure of our responseData\n            // for data structure, see: https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&amp;symbol=MSFT&amp;apikey=demo\n            var tsd = responseData[\"Time Series (Daily)\"]\n            var daily_entries = Object.entries(tsd) // see: https://github.com/prof-rossetti/internet-technologies/blob/main/notes/javascript/README.md#object-methods\n            console.log(\"LATEST ENTRY\", daily_entries[0])\n            var latestDate = daily_entries[0][0] // \"2020-01-24\"\n            console.log(\"LATEST DATE:\", latestDate)\n            var latestClose = tsd[latestDate][\"4. close\"]\n            console.log(\"LATEST CLOSING PRICE:\", latestClose)\n\n            // update page contents:\n            latestDateParagraph.innerHTML = latestDate\n            latestPriceParagraph.innerHTML = \"$\" + latestClose\n          })\n      }\n\n      // update when the page loads for the first time:\n      updateStockData()\n\n      // also update when a stock is selected:\n      stockSelector.addEventListener(\"change\", updateStockData, false)\n\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>The JavaScript provided at the bottom of the page issues an HTTP request to the AlphaVantage API and processes the resulting response data containing recent prices for the selected stock.</p> <p>Visit your page in the browser and observe the page contents update after a request has been made for the stock's data.</p>"},{"location":"exercises/website-interactivity/challenges/#stocks-dashboard","title":"Stocks Dashboard","text":"<p>Leverage the capabilities of a third-party JavaScript charting library like Highcharts.js or Plotly.js to create a line graph data visualization of the stock's daily closing prices over time.</p> <p>The first step will be do create an example line graph using example data provided by the library documentation. Then the hardest step will be to transform the stock data into the data structure the chart is looking for.</p> <p></p> <p>SPOILER ALERT: Stock Dashboard Solution</p>"},{"location":"exercises/website-interactivity/exercise/","title":"Website Interactivity Exercise","text":""},{"location":"exercises/website-interactivity/exercise/#objectives","title":"Objectives","text":"<ol> <li>Write JavaScript code to access and manipulate the contents of an HTML document.</li> <li>Write JavaScript code to add interactive features to a web page.</li> <li>Practice capturing HTML form inputs.</li> </ol>"},{"location":"exercises/website-interactivity/exercise/#prerequisites","title":"Prerequisites","text":"<ol> <li>\"Website Structure\" Exercise</li> <li>\"Website Style\" Exercise</li> <li>The Document Object Model</li> <li>JavaScript Language Overview</li> </ol>"},{"location":"exercises/website-interactivity/exercise/#instructions","title":"Instructions","text":"<p>Download this example HTML page with a form elements and Twitter Bootstrap styling, or copy its contents into a new local HTML document. Locate the document and open it with your text editor. Preview the document in a browser. Notice the absence of interactive features. Follow the instructions below to add some interactivity.</p>"},{"location":"exercises/website-interactivity/exercise/#button-click-events","title":"Button Click Events","text":"<p>Let's demonstrate our ability to respond to normal button click events:</p> <pre><code>//\n// BUTTON\n//\n\nvar clickMeButton = document.getElementById(\"click-me\")\n//var clickCountSpan = document.getElementById(\"click-count\")\n//var clickCount = 0\n\nfunction handleClick() {\n  console.log(\"---------------------\")\n  console.log(\"YOU CLICKED ME!\")\n  //clickCount += 1\n  //console.log(\"CLICK COUNT:\", clickCount)\n  //clickCountSpan.textContent = clickCount\n}\n\nclickMeButton.addEventListener(\"click\", handleClick)\n</code></pre>"},{"location":"exercises/website-interactivity/exercise/#change-events","title":"Change Events","text":"<pre><code>//\n// SELECT\n//\n\nvar mySelect = document.getElementById(\"my-select\")\nconsole.log(\"DEFAULT SELECTION:\", mySelect.value)\n\nfunction handleSelection() {\n  console.log(\"SELECTION:\", mySelect.value)\n}\n\nmySelect.addEventListener(\"change\", handleSelection)\n</code></pre>"},{"location":"exercises/website-interactivity/exercise/#radio-check-and-switch-events","title":"Radio, Check, and Switch Events","text":"<pre><code>//\n// CHECKBOX\n//\n\nvar myPref = document.getElementById(\"my-preference\")\n\nfunction handleCheck() {\n  console.log(\"OPT OUT:\", myPref.checked)\n}\n\nmyPref.addEventListener(\"click\", handleCheck, false)\n\n//\n// CHECKBOX (SWITCH)\n//\n\nvar mySwitch = document.getElementById(\"my-switch\")\n\nfunction handleSwitch() {\n  console.log(\"OPT OUT (SWITCH):\", mySwitch.checked)\n}\n\nmySwitch.addEventListener(\"click\", handleSwitch, false)\n\n//\n// RADIOS\n//\n\nvar myRadioContainer = document.getElementById(\"my-radios-container\")\n\nfunction handleRadioToggle() {\n  // h/t: https://stackoverflow.com/a/15839451\n  var selectedRadio = document.querySelector('input[name=\"my-radio-preference\"]:checked')\n  console.log(\"----------------\")\n  console.log(\"RADIO TOGGLE:\", selectedRadio.value)\n}\n\nmyRadioContainer.addEventListener(\"click\", handleRadioToggle, false)\n</code></pre>"},{"location":"exercises/website-interactivity/exercise/#form-submit-events","title":"Form Submit Events","text":"<p>The form submit button is a special case of button click event:</p> <pre><code>//\n// FORM SUBMIT\n//\n\nvar submitButton = document.getElementById(\"my-button\")\n//var emailInput = document.getElementById(\"my-email\")\n//var passwordInput = document.getElementById(\"my-password\")\n// etc...\n\nfunction handleSubmit(event) {\n  event.preventDefault() // because our button happens to be in a form, we prevent the default form action that would be triggered when the form is submitted\n\n  console.log(\"---------------------\")\n  console.log(\"FORM SUBMIT...\")\n  //console.log(\"EMAIL:\", emailInput.value)\n  //console.log(\"PASSWORD:\", passwordInput.value)\n  // etc...\n}\n\nsubmitButton.addEventListener(\"click\", handleSubmit)\n</code></pre>"},{"location":"exercises/website-structure/exercise/","title":"\"Website Structure\" Exercise","text":"<p>Create your own static website from scratch, work on it in a local development environment, and publish your site online.</p>"},{"location":"exercises/website-structure/exercise/#objectives","title":"Objectives","text":"<ol> <li>Practice using web development tools like a text editor, web browser, and version control software.</li> <li>Use a text editor to create and manage text files.</li> <li>Gain familiarity with HTML.</li> </ol>"},{"location":"exercises/website-structure/exercise/#prerequisites","title":"Prerequisites","text":"<ol> <li>\"Website Hosting\" Exercise</li> </ol>"},{"location":"exercises/website-structure/exercise/#instructions","title":"Instructions","text":""},{"location":"exercises/website-structure/exercise/#creating-a-remote-repository","title":"Creating a Remote Repository","text":"<p>Create a new repository on GitHub named something like \"my-site\".</p>"},{"location":"exercises/website-structure/exercise/#downloading-the-repository","title":"Downloading the Repository","text":"<p>Note the repository's remote address, then click the \"Open in Desktop\" button or \"clone\" it using GitHub Desktop. This should download a copy of the repository onto your local machine, in your desired location.</p>"},{"location":"exercises/website-structure/exercise/#opening-the-local-repository","title":"Opening the Local Repository","text":"<p>Find the location of the website repository on your local machine, open it in your file finder / explorer, and open it with your text editor.</p>"},{"location":"exercises/website-structure/exercise/#creating-an-html-document","title":"Creating an HTML Document","text":"<p>Use your text editor to create a new file in the \"my-site\" directory called \"index.html\".</p> <p>Edit the \"index.html\" file using your text editor of choice. Add basic HTML page structure (<code>html</code>, <code>head</code>, <code>body</code>, etc.), leveraging your text editor's auto-completion functionality. It will probably generate content like the following:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My Site&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>What do you notice about this content so far? Are there any patterns to observe?</p> <p>Save the file and preview it in the browser. What do you notice? Try revising the text inside the <code>title</code> tag and seeing what changes.</p>"},{"location":"exercises/website-structure/exercise/#editing-html-content","title":"Editing HTML Content","text":"<p>To display a top-level page heading, add an <code>h1</code> tag and some text within it.</p> <p>Your code should now resemble:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My Site | A website by me&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Welcome to My Site&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Save the file and preview it in the browser.</p>"},{"location":"exercises/website-structure/exercise/#learning-html","title":"Learning HTML","text":"<p>Take some time to read through all of these helpful Mozilla HTML guides:</p> <ul> <li>Intro to HTML Guides</li> <li>HTML Elements Reference</li> <li>HTML Attributes Reference</li> <li>HTML Head Metadata</li> </ul> <p>Also work through the following units in the W3Schools HTML Tutorial:</p> <ul> <li>HTML Intro</li> <li>HTML Basics</li> <li>HTML Head</li> <li>HTML Elements</li> <li>HTML Attributes</li> <li>HTML Comments</li> <li>HTML Headings</li> <li>HTML Paragraphs</li> <li>HTML Links</li> <li>HTML Lists</li> <li>HTML Quotes</li> <li>HTML Images</li> <li>HTML Tables</li> <li>HTML5 Semantic Elements</li> </ul> <p>Take your time to develop a baseline comfort with various HTML elements. For now, don't worry about styling these elements or making them look good. Ignore references about CSS and styling.</p>"},{"location":"exercises/website-structure/exercise/#practicing-html","title":"Practicing HTML","text":"<p>As you learn new HTML concepts using the resources above, put them into practice in your local website. Expand your website across multiple pages, with navigation links between pages. Also try to display at least one image.</p> <p>As you develop your website, use an iterative development approach. Focus on small tasks one at a time. Edit your HTML file(s), preview your changes, then use GitHub Desktop to commit your changes. Then repeat the process. Every so often, use GitHub Desktop to push / sync your local commits up to the remote repository, where you should see them reflected on GitHub.</p> <p>Nice Job! You are developing like a pro!</p>"},{"location":"exercises/website-structure/exercise/#further-exploration-html-forms","title":"Further Exploration - HTML Forms","text":"<p>Ideally also familiarize yourself with HTML form and input elements:</p> <ul> <li>HTML Forms</li> <li>HTML Form Elements</li> <li>HTML Input Types</li> <li>HTML Input Attributes</li> </ul> <p>Try to create your own web form which employs a variety of input elements.</p> <p>Don't worry about submitting the form inputs or configuring form actions - we'll cover this in the future.</p>"},{"location":"exercises/website-structure/exercise/#further-exploration-seo","title":"Further Exploration - SEO","text":"<p>Ideally also read the following resources to learn how website structure decisions affect page rank through the process of Search Engine Optimization (SEO):</p> <ul> <li>Mozilla SEO Definition</li> <li>Google SEO Starter Guide</li> <li>Google Webmaster Guidelines</li> <li>Neil Patel on Website Structure for SEO</li> </ul>"},{"location":"exercises/website-style/exercise/","title":"\"Website Style\" Exercise","text":"<p>Improve the look and feel of a static website.</p>"},{"location":"exercises/website-style/exercise/#objectives","title":"Objectives","text":"<ol> <li>Gain familiarity with CSS, including selectors, and hexadecimal color notation.</li> <li>Configure in-line, internal, and external CSS stylesheets.</li> <li>Experiment with CSS media queries to produce a responsive design.</li> <li>Leverage a front-end web development framework like Twitter Bootstrap.</li> </ol>"},{"location":"exercises/website-style/exercise/#prerequisites","title":"Prerequisites","text":"<ol> <li>\"Website Structure\" Exercise</li> </ol>"},{"location":"exercises/website-style/exercise/#instructions","title":"Instructions","text":""},{"location":"exercises/website-style/exercise/#learning-css","title":"Learning CSS","text":"<p>Review the Mozilla CSS Syntax Reference.</p> <p>Also work through the following units in the W3Schools HTML and CSS Tutorials:</p> <ul> <li>HTML Style</li> <li>HTML Formatting</li> <li>HTML Element Classes</li> <li>HTML Element Identifiers</li> <li>HTML Responsive</li> <li>Styling HTML with CSS</li> <li>CSS How-To</li> <li>CSS Introduction</li> <li>CSS Syntax</li> <li>CSS Selectors</li> <li>CSS Combinators</li> <li>CSS Colors</li> <li>CSS Backgrounds</li> <li>CSS Borders</li> <li>CSS Margins</li> <li>CSS Padding</li> <li>CSS Height and Width</li> <li>CSS Box Model</li> <li>CSS Outline</li> <li>CSS Text</li> <li>CSS Fonts</li> <li>CSS Icons</li> <li>CSS Opacity</li> <li>CSS Links</li> <li>CSS Pseudo-classes</li> <li>CSS Lists</li> <li>CSS Tables</li> <li>CSS Display</li> <li>CSS Positioning</li> <li>CSS Overflow</li> <li>CSS Float</li> <li>CSS Inline-Block</li> <li>CSS Align</li> </ul> <p>Also review CSS Media Queries, for conditionally applying different styles at different window widths, to achieve a \"responsive\" design:</p> <ul> <li>CSS Media Queries (W3Schools)</li> <li>Using Media Queries (Mozilla)</li> <li>Complete Guide to CSS Media Queries (CSS Tricks)</li> </ul>"},{"location":"exercises/website-style/exercise/#practicing-css","title":"Practicing CSS","text":"<p>Setup a new local website, or continue working in the local website you created during the Website Structure exercise.</p> <p>As you learn new CSS concepts using the resources above, put them into practice in your local website.</p> <p>For a guided experience, see also the Guided Exercise Walk-through.</p>"},{"location":"exercises/website-style/exercise/#learning-a-framework","title":"Learning a Framework","text":"<p>After gaining a high-level familiarity with various CSS styling techniques, consider adopting a styling framework like Twitter Bootstrap:</p> <ul> <li>Bootstrap Intro</li> <li>Bootstrap Layout:<ul> <li>Grid</li> </ul> </li> <li>Bootstrap Content:<ul> <li>Typography</li> <li>Images</li> <li>Tables</li> </ul> </li> <li>Bootstrap Components:<ul> <li>Buttons</li> <li>Cards</li> <li>Carousel</li> <li>Navbar</li> </ul> </li> <li>Bootstrap Utilities:<ul> <li>Colors</li> </ul> </li> </ul> <p>Skip Forms for now, we will return to them later</p> <p>Ignore JavaScript references in the Bootstrap docs for now. We'll cover JavaScript and website interactivity in the future.</p> <p>See also the Prof's Bootstrap 5 Navbar Template, which provides an example Bootstrap Navbar out of the box, and feel free to leverage in your exercises and projects, as desired.</p>"},{"location":"exercises/website-style/walkthrough/","title":"\"Website Style\" Exercise Walkthrough","text":""},{"location":"exercises/website-style/walkthrough/#instructions","title":"Instructions","text":""},{"location":"exercises/website-style/walkthrough/#preparing-an-html-document","title":"Preparing an HTML Document","text":"<p>Create a new HTML file with the following contents:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Hello | My Site&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n\n    &lt;p&gt;Welcome to my site.&lt;/p&gt;\n\n    &lt;div&gt;\n      &lt;p&gt;Some paragraph text here!&lt;/p&gt;\n\n      &lt;ol&gt;\n        &lt;li&gt;One&lt;/li&gt;\n        &lt;li&gt;Two&lt;/li&gt;\n        &lt;li&gt;Three&lt;/li&gt;\n      &lt;/ol&gt;\n\n      &lt;p&gt;Some more text at the bottom.&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Preview this page in a browser to see it is not styled.</p>"},{"location":"exercises/website-style/walkthrough/#inline-styles","title":"Inline Styles","text":"<p>Update the HTML page to use inline CSS styles, using content like the following:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Hello | My Site&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1 style=\"font-size:48px; color: red;\"&gt;Hello World&lt;/h1&gt;\n\n    &lt;p style=\"font-family: monospace; color: '#ccc';\"&gt;Welcome to my site.&lt;/p&gt;\n\n    &lt;div style=\"border: 2px solid #000;\"&gt;\n      &lt;p style=\"font-family: monospace; color: '#ccc';\"&gt;Some paragraph text here!&lt;/p&gt;\n\n      &lt;ol style=\"list-style:none;\"&gt;\n        &lt;li style=\"display: inline;\"&gt;One&lt;/li&gt;\n        &lt;li style=\"display: inline;\"&gt;Two&lt;/li&gt;\n        &lt;li style=\"display: inline;\"&gt;Three&lt;/li&gt;\n      &lt;/ol&gt;\n\n      &lt;p style=\"font-family: monospace; color: 'red';\"&gt;Some more text at the bottom.&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Preview this page in a browser to see the styles applied to the document.</p> <p></p> <p>This version of the HTML file looks messier and harder to read than before. The styles are mixed-in with the structure, and neither is easy to distinguish from the other. We also see the same style declarations duplicated across multiple elements. We can remove this duplication by using a \"stylesheet\" to apply the same styles to specified elements (see next section).</p>"},{"location":"exercises/website-style/walkthrough/#internal-stylesheet","title":"Internal Stylesheet","text":"<p>Update the HTML page to use an internal stylesheet, using content like the following:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Hello | My Site&lt;/title&gt;\n    &lt;style media=\"screen\"&gt;\n\n      h1 {\n        font-size:48px;\n        color: red;\n      }\n\n      p {\n        font-family: monospace;\n        color: '#ccc';\n      }\n\n      div#my-divider {\n        border: 2px solid #000;\n        height: 300px;\n        width: 300px;\n      }\n\n      ol { list-style:none; }\n\n      li.horizontal { display: inline; }\n\n      .bottom { color:red; }\n\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n\n    &lt;p&gt;Welcome to my site.&lt;/p&gt;\n\n    &lt;div id=\"my-divider\"&gt;\n      &lt;p&gt;Some paragraph text here!&lt;/p&gt;\n\n      &lt;ol&gt;\n        &lt;li class=\"horizontal\"&gt;One&lt;/li&gt;\n        &lt;li class=\"horizontal\"&gt;Two&lt;/li&gt;\n        &lt;li class=\"horizontal\"&gt;Three&lt;/li&gt;\n      &lt;/ol&gt;\n\n      &lt;p class=\"bottom\"&gt;Some more text&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Preview this page in a browser to see the document is styled the same as before.</p> <p>This version of the HTML file is still a bit busy, with all those style declarations at the top. We can simplify our document even further by separating the style declarations into a different file (see next section).</p>"},{"location":"exercises/website-style/walkthrough/#external-stylesheet-local","title":"External Stylesheet (Local)","text":"<p>Update the HTML page to use an internal stylesheet, using content like the following:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Hello | My Site&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"assets/styles/my-style.css\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n\n    &lt;p&gt;Welcome to my site.&lt;/p&gt;\n\n    &lt;div id=\"my-divider\"&gt;\n      &lt;p&gt;Some paragraph text here!&lt;/p&gt;\n\n      &lt;ol&gt;\n        &lt;li class=\"horizontal\"&gt;One&lt;/li&gt;\n        &lt;li class=\"horizontal\"&gt;Two&lt;/li&gt;\n        &lt;li class=\"horizontal\"&gt;Three&lt;/li&gt;\n      &lt;/ol&gt;\n\n      &lt;p class=\"bottom\"&gt;Some more text&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>You'll notice the HTML <code>&lt;link&gt;</code> element references a CSS file called \"my-style.css\" nested inside some subdirectories called \"assets\" and \"styles\" respectively. Let's use the text editor to create those subdirectories and the CSS file, and place the existing style declarations inside:</p> <pre><code>/* THIS IS MY STYLESHEET (e.g. \"assets/styles/my-style.css\") */\n\nh1 {\n  font-size:48px;\n  color: red;\n}\n\np {\n  font-family: monospace;\n  color: '#ccc';\n}\n\ndiv#my-divider {\n  border: 2px solid #000;\n  height: 300px;\n  width: 300px;\n}\n\nol { list-style:none; }\n\nli.horizontal { display: inline; }\n\n.bottom { color:red; }\n</code></pre> <p>Preview the HTML page in a browser to see the document is styled the same as before.</p> <p>This approach results in files that are easier to read and more organized than the previous approaches. It is also more organized in the sense that the structural logic is separated from the style logic. This approach also allows us to reference the same stylesheet across multiple different HTML pages.</p>"},{"location":"exercises/website-style/walkthrough/#external-stylesheet-hosted","title":"External Stylesheet (Hosted)","text":"<p>In addition to, or instead of using our own stylesheets, we can leverage those from third party front end development frameworks like Twitter Bootstrap.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Hello | My Site&lt;/title&gt;\n\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6\" crossorigin=\"anonymous\"&gt;\n\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"assets/styles/my-style.css\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n\n    &lt;p class=\"lead\"&gt;Welcome to my site.&lt;/p&gt;\n\n    &lt;div id=\"my-divider\"&gt;\n      &lt;p&gt;Some paragraph text here!&lt;/p&gt;\n\n      &lt;ol&gt;\n        &lt;li class=\"horizontal\"&gt;One&lt;/li&gt;\n        &lt;li class=\"horizontal\"&gt;Two&lt;/li&gt;\n        &lt;li class=\"horizontal\"&gt;Three&lt;/li&gt;\n      &lt;/ol&gt;\n\n      &lt;p class=\"bottom\"&gt;Some more text&lt;/p&gt;\n\n      &lt;button&gt;Button One&lt;/button&gt;\n      &lt;button type=\"button\" class=\"btn btn-default\"&gt;Button Two&lt;/button&gt;\n      &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Button Three&lt;/button&gt;\n      &lt;button type=\"button\" class=\"btn btn-lg btn-danger\"&gt;Button Four&lt;/button&gt;\n\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"notes/environment-variables/","title":"Environment Variables","text":"<p>Environment variables allow developers to customize the environment in which an application is operating.</p>"},{"location":"notes/environment-variables/#benefits","title":"Benefits","text":""},{"location":"notes/environment-variables/#security","title":"Security","text":"<p>Sometimes applications need to reference secret passwords, tokens, and other values. This is especially the case when the app is authenticating to some other service on behalf of a given user.</p> <p>But hard-coding these sensitive values into a program's source code would be irresponsible from a security standpoint, especially when sharing the source code online. You don't want your passwords on GitHub for everyone to see.</p> <p>Environment variables provide a way of separating these secret values from a program's source code.</p>"},{"location":"notes/environment-variables/#collaboration-and-customization","title":"Collaboration and Customization","text":"<p>Sometimes developers need to run an application in different environments. For example, two developers may want to use the same program to download their respective social media posts from an API.</p> <p>But each developer has their own private API key which provides access to their own private social media posts. It would be ineffective for them to use the exact same source code, and inefficient to maintain two slightly different versions of the application's source code.</p> <p>Environment variables allow developers to share the same source code while specifying different values at run-time.</p>"},{"location":"notes/environment-variables/#testing-and-delivery","title":"Testing and Delivery","text":"<p>Environment variables allow developers to specify customized environments in which to develop, test and deliver their application.</p> <p>Environment variable customization allows an application to perform differently in a \"test\" environment than it would in a user-facing \"production\" environment. For example, developers can use the application to manipulate example data in a \"test\" environment without affecting real user data in the \"production\" environment.</p>"},{"location":"notes/environment-variables/#usage","title":"Usage","text":"<p>There are a few different ways to set and get environment variables. Most often when using environment variables in a Node.js script, will use a local \".env\" file approach for setting, and the <code>dotenv</code> package for getting. Focus on the \"Setting Locally Using a .env File\", and \"Getting from a Node.js Script\" sections below.</p>"},{"location":"notes/environment-variables/#setting","title":"Setting","text":"<p>Environment variables can be set \"globally\", in which case they are accessible by any program running on that given computer. Or they can be set \"locally\", in which case they are only accessible by programs located in a specific directory.</p> <p>After setting an environment variable using one of the approaches below, reference the section on \"Getting\" to see if the variable was set properly.</p>"},{"location":"notes/environment-variables/#setting-globally-on-mac-or-git-bash","title":"Setting Globally on Mac or Git Bash","text":"<p>Mac users (or Git Bash users on Windows) should be able to manage global environment variables using a hidden file called \"~/.bash_profile\". Open the file with your text editor (e.g. <code>code ~/.bash_profile</code>), and place inside the following contents:</p> <pre><code># ~/.bash_profile\nexport MY_SECRET_MESSAGE=\"SecretPassword123\"\n# or ...\n# export MY_SECRET_MESSAGE=SecretPassword123\n</code></pre> <p>Then exit and re-open your Terminal for the changes to take effect.</p>"},{"location":"notes/environment-variables/#setting-globally-on-windows","title":"Setting Globally on Windows","text":"<p>Windows users can set local environment variables from the command-line using the <code>set</code> keyword (or <code>export</code>, if <code>set</code> doesn't work):</p> <pre><code># Windows Command Prompt:\nset MY_SECRET_MESSAGE=\"SecretPassword123\"\n# or ...\n# export MY_SECRET_MESSAGE=SecretPassword123\n</code></pre> <p>NOTE: if you close your command prompt and re-open it, you may need to re-set the environment variable.</p>"},{"location":"notes/environment-variables/#setting-locally-via-the-command-line","title":"Setting Locally via the Command Line","text":"<p>To set a script-specific environment variable on either Mac or Windows, its possible to prefix the environment variable before invoking your script. For example:</p> <pre><code>MY_SECRET_MESSAGE=\"SecretPassword123\" node path/to/my_script.js\n</code></pre>"},{"location":"notes/environment-variables/#setting-locally-via-env-file","title":"Setting Locally via \".env\" File","text":"<p>To set project-specific local environment variables on either Mac or Windows, consider using the \"dotenv\" approach. Create a special file in your project named \".env\" and place inside content like the following:</p> <pre><code># this is the \"my-secure-project/.env\" file...\n\nMY_SECRET_MESSAGE=\"SecretPassword123\"\n</code></pre>"},{"location":"notes/environment-variables/#getting","title":"Getting","text":""},{"location":"notes/environment-variables/#getting-from-the-command-line","title":"Getting from the Command-line","text":"<p>You will know you have successfully set an environment variable when you can access its value from the command-line:</p> <pre><code># Mac Terminal:\necho $MY_SECRET_MESSAGE #&gt; SecretPassword123\n\n# Windows Command Prompt:\necho %MY_SECRET_MESSAGE% #&gt; SecretPassword123\n</code></pre>"},{"location":"notes/environment-variables/#getting-from-a-nodejs-script","title":"Getting from a Node.js Script","text":"<p>To access environment variables from within a Node.js program, reference the <code>process.env</code> object, and the name of the environment variable:</p> <pre><code>// this is a Node.js script\n\nvar message = process.env.MY_SECRET_MESSAGE\nconsole.log(message)\n</code></pre> <p>To read environment variables from a \".env\" file, use this approach in conjunction with the <code>dotenv</code> package.</p>"},{"location":"notes/formspree/","title":"The Formspree Service","text":"<p>The role of an HTML Form is usually to send some data to a server somewhere. We could create our own server-side application to receive the data, or use a service like Formspree to handle the data for us. Formspree will forward data sent through a web form to an email address we configure.</p>"},{"location":"notes/formspree/#usage","title":"Usage","text":"<p>After creating a Formspree account and verifying your email address, use the Formspree interface to create a new project as desired, then click to create a new form. </p> <p>After doing so, you'll see some example code they're instructing you to add to your site, like the following (using your own unique endpoint i.e. <code>YOUR_ENDPOINT</code>):</p> <pre><code>&lt;!-- modify this form HTML and place wherever you want your form --&gt;\n&lt;form action=\"https://formspree.io/f/YOUR_ENDPOINT\" method=\"POST\"&gt;\n  &lt;label&gt;\n    Your email:\n    &lt;input type=\"email\" name=\"email\"&gt;\n  &lt;/label&gt;\n\n  &lt;label&gt;\n    Your message:\n    &lt;textarea name=\"message\"&gt;&lt;/textarea&gt;\n  &lt;/label&gt;\n\n  &lt;!-- your other form fields go here --&gt;\n\n  &lt;button type=\"submit\"&gt;Send&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Add this code to your site (somewhere in the HTML page's <code>body</code>). Save the file and preview the form locally. Submit the form with some example inputs. Then check your email to see the values you submitted. Nice!</p> <p>If you'd like to make your forms and input elements look better, try styling via Bootstrap Forms.</p>"},{"location":"notes/computer-networks/http-request-methods/","title":"Http Request Methods","text":""},{"location":"notes/computer-networks/http-request-methods/#http-requests","title":"HTTP Requests","text":""},{"location":"notes/computer-networks/http-request-methods/#how-to-make-a-request","title":"How to Make a Request","text":"<p>In addition to using a web browser to request HTML documents, you can also use it to view raw data, most often in JSON or XML format.</p> <p>In addition to using a web browser to request data, you can also request data using the command line, JavaScript, or any other contemporary server-side programming language like Ruby, Python, etc.</p>"},{"location":"notes/computer-networks/http-request-methods/#request-methods","title":"Request Methods","text":"<p>W3Schools: https://www.w3schools.com/tags/ref_httpmethods.asp</p>"},{"location":"notes/computer-networks/http-request-methods/#get","title":"GET","text":"<p>Request some data from some URL.</p> <p>Using the command line:</p> <pre><code>curl https://raw.githubusercontent.com/SCSU-CSC-Department/201701-csc-443-01/master/course.json\n</code></pre> <p>See JavaScript AJAX Notes for examples of how to make a GET request using JavaScript.</p>"},{"location":"notes/computer-networks/http-request-methods/#post","title":"POST","text":"<p>Send data to some URL. When you make a POST request, you need to send along the data in the body of the request. There are many ways to do this.</p> <p>Using the command line:</p> <pre><code>curl --data \"name=testBot&amp;description=testingTesting\" https://example.com/api/robots\n# ... OR ...\ncurl -H \"Content-Type: application/json\" -X POST --data '{\"name\":\"Test Bot\", \"description\":\"Posted via cURL.\"}' https://example.com/api/robots\n</code></pre> <p>See JavaScript AJAX Notes for examples of how to make a POST request using JavaScript.</p>"},{"location":"notes/computer-networks/http-response-statuses/","title":"Http Response Methods","text":""},{"location":"notes/computer-networks/http-response-statuses/#http-response-statuses","title":"HTTP Response Statuses","text":"<p>Official Docs: https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</p> <p>W3Schools: https://www.w3schools.com/tags/ref_httpmessages.asp</p>"},{"location":"notes/computer-networks/http-response-statuses/#examples","title":"Examples","text":""},{"location":"notes/computer-networks/http-response-statuses/#301","title":"301","text":"<p>From the command line:</p> <pre><code>curl google.com\n</code></pre> <p>=&gt;</p> <pre><code>&lt;HTML&gt;\n  &lt;HEAD&gt;\n    &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\"&gt;\n    &lt;TITLE&gt;301 Moved&lt;/TITLE&gt;\n  &lt;/HEAD&gt;\n  &lt;BODY&gt;\n      &lt;H1&gt;301 Moved&lt;/H1&gt;\n      The document has moved &lt;A HREF=\"http://www.google.com/\"&gt;here&lt;/A&gt;.\n  &lt;/BODY&gt;\n&lt;/HTML&gt;\n</code></pre>"},{"location":"notes/computer-networks/notes/","title":"Computer Networks","text":"<p>A computer network is a \"system (of) connect(ed) computers and (computer hardware)\"  which use \"communications media\" to transmit data   to other members in the network.</p>"},{"location":"notes/computer-networks/notes/#network-communications-media","title":"Network Communications Media","text":"<p>Communications media refer to the pathways, or methods, by which data are transmitted.  Cable media transmit information over physical wires or cables, whereas broadcast media transmit information through electromagnetic waves.</p>"},{"location":"notes/computer-networks/notes/#cable-media","title":"Cable Media","text":"<p>Cable media are described by their physical composition and each have advantages and disadvantages in terms of capability and cost.</p> <p>Twisted pair wire is a medium comprised of \"twisted copper wires\" which is commonly used to \"transmit business telephone communications\".  Twisted-pair wire is inexpensive, but \"slow ... and subject to (intrusion and) interference.\"</p> <p>Coaxial cable is a medium comprised of \"insulated copper wire\"  and is commonly used to \"transmit high-speed data traffic and television signals\". Cable is \"less susceptible to interference\" but \"more expensive and harder to work with\" than twisted-pair wire.</p> <p>Fiber-optic cable is a medium comprised of \"thin ... glass fibers that transmit information via light pulses generated by lasers\". Fiber provides a significant increase in bandwidth and security, but may involve great up-front investment costs, and is \"harder to work with\" than other cable media.</p>"},{"location":"notes/computer-networks/notes/#broadcast-media","title":"Broadcast Media","text":"<p>Examples include:</p> <ul> <li>Bluetooth</li> <li>WiFi</li> <li>Wireless Mesh Networks</li> <li>Cellular radio</li> <li>Satellite radio</li> <li>Wireless Broadband</li> </ul>"},{"location":"notes/computer-networks/notes/#network-sizes","title":"Network Sizes","text":"<p>Computer networks are often described in terms of size:</p> network size description example(s) Personal Area Network (PAN) Two ore more devices in a very limited geographical region, usually within the same room a bluetooth connection between headphones and mobile phone Local Area Network (LAN) \"two or more devices in a limited geographical region, usually within the same building\" a home WiFi network Wide Area Network (WAN) \"covers a large geographic region; typically connects multiple LANs\" a university network; the Internet"},{"location":"notes/computer-networks/notes/#the-internet","title":"The Internet","text":"<p>The Internet is a very very large WAN computer network. It is a network of networks.</p> <p></p>"},{"location":"notes/computer-networks/notes/#internet-protocols","title":"Internet Protocols","text":"<p>Computers connected to the Internet communicate according to a \"common set of rules and procedures\", or protocols. The following table identifies some of them:</p> abbreviation name description HTTP Hyper Text Transfer Protocol The foundation protocol for the Internet. HTTPS Secure Hyper Text Transfer Protocol A widely-used Internet protocol for secure network communication over HTTP within a connection encrypted by SSL/TLS. SSL/TLS Transport Layer Security (formerly and still known as Secure Sockets Layer) For providing communication security over a network. TCP/IP Transmission Control Protocol, which compliments the Internet Protocol Provides reliable, ordered, and error-checked delivery of a stream of octets between applications running on hosts communicating over an IP network. FTP File Transfer Protocol For transmitting large files between computers. SMTP Simple Mail Transfer Protocol For transmitting electronic mail between computers. SSH Secure Shell A cryptographic (encrypted) network protocol to allow remote login and other network services to operate securely over an unsecured network. SFTP SSH/Secure File Transfer Protocol For transferring files over SSH. <p>When computers communicate information over the Internet, they do so according to a set of rules or standards set forth by these protocols. The Internet Protocol primarily governs the routing and delivery of information from one computer to another.</p> <p>Computers participating in these connections each have an address, or location where the information is sent and received. Just as a street address identifies a building within a connected system of roads and highways, and as a telephone number identifies a phone's connection to a cellular network, an Internet Protocol (IP) Address identifies a computer's connection to the Internet. IP Address notation typically includes numbers separated by decimals in IP Version 4 (e.g. 144.228.10.74), and numbers or letters separated by colons in IP Version 6 (e.g. 2601:37b:c211:7109:7833:f6d1:1f15:9174).</p> <p>When information is traveling throughout the network, data is separated into component parts and encapsulated into packets which also contain routing information. These packets may or may not take the same route across the network and may or may not arrive at the destination at the same time. Once all the packets are received, they are re-assembled into the original information representation.</p>"},{"location":"notes/computer-networks/notes/#internet-architecture","title":"Internet Architecture","text":""},{"location":"notes/computer-networks/notes/#peer-to-peer","title":"Peer-to-Peer","text":"<p>In Peer-to-peer (P2P) networks, connected computers share the same or similar information-sharing responsibilities. Napster, Kazaa, and BitTorrent are examples of a popular P2P sites.</p>"},{"location":"notes/computer-networks/notes/#clientserver","title":"Client/Server","text":"<p>Within the context of today's Internet, most computers connect according to Client/Server architecture. The role of the client computer is to request information, whereas the responsibility of the server is to fulfill those requests.</p>"},{"location":"notes/computer-networks/notes/#lifecycle-of-a-network-request","title":"Lifecycle of a Network Request","text":"<p>The way you are most likely familiar with requesting information over the Internet is by visiting a URL in your web browser. In this case, your computer is the client making the request for information. And the computer hosting the website associated with the given URL is the server.</p> <ol> <li>The client sends a request to the server.</li> </ol> <p>1a. If the client doesn't know the IP address of the server, it will ask a Domain Name System (DNS) Server to lookup the IP address associated with that URL's domain name. In this way, the role of the DNS is analogous to the role of the telephone operator when you dial 411, in which you may ask the operator, \"May I please have the number for Pepe's Pizza in New Haven?\" and the operator would either share the phone number with you, or connect your call directly.</p> <ol> <li> <p>The server receives the request, processes it, and sends a response back to the client.</p> </li> <li> <p>The client receives the response, and within the context of the web-browsing example, the client's web browser interprets and formats the results on screen.</p> </li> </ol>"},{"location":"notes/computer-networks/notes/#client-side-vs-server-side-programming","title":"Client-side vs Server-side Programming","text":"<p>You may have heard references to client-side and/or server-side programming. You can generally think of server-side software as a set of instructions executed by the server, and client-side software as a set of instructions executed by the client.</p> <p>Practically, server-side applications are responsible for processing web requests into responses. Written in server-side programming languages like Ruby, Python, PHP, etc., they often handle database connections, translating database data into HTML or JSON responses. A web service (i.e. RESTful API) is a perfect example of a purely server-side application.</p> <p>Client-side applications are generally responsible for displaying or otherwise representing the information returned by server-side applications. Written in client-specific languages like JavaScript, they are commonly executed within web browsers or native applications. They may provide user interactivity or other functionality that does not require subsequent communication with the server after the server's initial response. Or they may send information back and forth to and from the server multiple times within a single user session. Web pages and data visualizations are good examples of client-side web applications.</p> <p>In some cases, a single web application may contain both server-side and client-side logic. This hybrid approach is exemplified by any fully-functional Model-View-Controller (MVC) application built using the Ruby on Rails or Python Django framework. In other cases, client-side logic and server-side logic may be separated into different web applications (i.e. a back-end web service distinct from a front-end user interface).</p> <p>Reference:</p> <ul> <li>Intro to Information Systems, Rainer, 5th edition, ISBN 9781118674369</li> <li>Quotes based on Rainer 4.5, 6.1, 6.2 unless otherwise noted</li> </ul> <p>Additional Resources:</p> <ul> <li>http://fcit.usf.edu/network/chap1/chap1.htm</li> <li>http://fcit.usf.edu/network/chap4/chap4.htm</li> <li>https://en.wikipedia.org/wiki/Computer_network</li> <li>http://study.com/academy/lesson/types-of-networks-lan-wan-wlan-man-san-pan-epn-vpn.html</li> <li>http://www.edinformatics.com/inventions_inventors/fiber_optics.htm</li> <li>http://fcit.usf.edu/network/chap2/chap2.htm</li> <li>http://flask.pocoo.org/docs/0.10/htmlfaq/</li> <li>https://en.wikipedia.org/wiki/Lists_of_network_protocols</li> <li>https://en.wikipedia.org/wiki/Internet_Protocol</li> <li>http://www.livinginternet.com/i/iw_arch.htm</li> <li>https://www.godaddy.com/help/what-is-dns-665</li> <li>https://www.techopedia.com/definition/454/peer-to-peer-architecture-p2p-architecture</li> <li>http://www.cs.ccsu.edu/~stan/classes/cs490/slides/networks4-ch2-4.pdf</li> <li>https://www2.cs.sfu.ca/~ggbaker/zju/web/</li> <li>https://www.washington.edu/accesscomputing/webd2/student/index.html</li> <li>https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm</li> <li>http://docs.webplatform.org/wiki/concepts/Internet_and_Web/How_does_the_Internet_Work</li> <li>http://www.theshulers.com/whitepapers/internet_whitepaper/index.html</li> </ul>"},{"location":"notes/computer-networks/rest-architecture/","title":"Rest Architecture","text":""},{"location":"notes/computer-networks/rest-architecture/#representational-state-transfer-rest","title":"Representational State Transfer (REST)","text":"<p>REST is essentially an Internet architecture paradigm whereby a client makes an HTTP Request to a server to send or receive a representation of one or more resources. The term \"resource\" generally refers to an instance of a class of object.</p> <p>Developers of web services and APIs often design these applications to conform with RESTful architecture principles.</p> <p>One of the key characteristics of a RESTful Web service is the explicit use of HTTP methods in a way that follows the protocol as defined by RFC 2616. HTTP GET, for instance, is defined as a data-producing method that's intended to be used by a client application to retrieve a resource, to fetch data from a Web server, or to execute a query with the expectation that the Web server will look for and respond with a set of matching resources.</p> <p>REST asks developers to use HTTP methods explicitly and in a way that's consistent with the protocol definition. This basic REST design principle establishes a one-to-one mapping between create, read, update, and delete (CRUD) operations and HTTP methods. According to this mapping:  + To create a resource on the server, use POST.  + To retrieve a resource, use GET.  + To change the state of a resource or to update it, use PUT.  + To remove or delete a resource, use DELETE.</p> <p>... - IBM website </p> <p>In practice, it is sometimes acceptable to use a POST request in place of a PUT or DELETE request. The idea is that GET requests are used for receiving data while the others are used for sending data or performing actions.</p> <p>References:</p> <ul> <li>https://www.ibm.com/developerworks/library/ws-restful/</li> <li>http://www.restapitutorial.com/</li> </ul>"},{"location":"notes/computer-networks/rest-architecture/#typical-api-endpoints","title":"Typical API Endpoints","text":"<p>Here is an example of RESTful URL routes used by the Ruby on Rails application framework given an example \"photos\" resource:</p> HTTP Verb Path Controller#Action Used for GET /photos photos#index display a list of all photos GET /photos/new photos#new return an HTML form for creating a new photo POST /photos photos#create create a new photo GET /photos/:id photos#show display a specific photo GET /photos/:id/edit photos#edit return an HTML form for editing a photo PATCH/PUT /photos/:id photos#update update a specific photo DELETE /photos/:id photos#destroy delete a specific photo"},{"location":"notes/computer-networks/servers/","title":"Servers","text":"<p>Recall the responsibility of a server in client-server architecture is to respond to HTTP requests issued by the client.</p>"},{"location":"notes/computer-networks/servers/#remote-servers-cloud-computing","title":"Remote Servers (Cloud Computing)","text":""},{"location":"notes/computer-networks/servers/#major-providers-of","title":"Major Providers of","text":"<ul> <li>Amazon Web Services</li> <li>Heroku</li> </ul>"},{"location":"notes/computer-networks/servers/#advantages-of","title":"Advantages of","text":"<ul> <li>Cost</li> <li>Scalability</li> <li>Efficiency</li> <li>Security</li> <li>Usability</li> </ul>"},{"location":"notes/computer-networks/servers/#types-of-servers","title":"Types of Servers","text":"<ul> <li>Application Servers</li> <li>Database Servers</li> <li>Email Servers</li> <li>etc.</li> </ul>"},{"location":"notes/computer-networks/servers/#application-servers","title":"Application Servers","text":"<p>When we \"deploy\" an application to a server, we copy the application's source code onto the server. The server then runs the application just like we were running the application in development on our local machines.</p>"},{"location":"notes/computer-networks/servers/#deployment-environments","title":"Deployment Environments","text":"Name Description Common Developer Tasks Primary Audience Level of Risk Development The computer, often a personal computer, on which you produce, develop, and test an application's source code. Running a local web server, editing code in a text-editor, and running tests. One or more individual members of the software development team. Low Staging The computer, often a remote server, onto which you deploy an application's source code to emulate as best as possible the production environment to get a sense for how code changes will affect the application running on the production environment. Performing usability tests, monitoring server scalability and performance. One or more collective members of the software development team. Medium Production The computer, often a remote server, onto which you deploy your application's source code for \"live\" usage. Monitoring server logs. Users, customers, and the public at large. Very High"},{"location":"notes/css/notes/","title":"CSS Introduction","text":"<p>Class was cancelled on Week 4 due to inclement weather (snow), so we held a remote class session in Slack in an attempt to stay somewhat on-track. This document contains a transcript of that narrative, for reference. Note: Slack user handles have been redacted and generalized.</p> <p>Professor [7:39 PM] OK so the name of the game this week is CSS.</p> <p>[7:40] Check out the SCHEDULE document for information about what we were planning on covering tonight. https://github.com/SCSU-CSC-Department/201701-csc-443-01/blob/master/SCHEDULE.md</p> <p>[7:41] There you'll see links to two checkpoint exercises. Please take a few moments to read the Personal Website Style Checkpoint: https://github.com/SCSU-CSC-Department/201701-csc-443-01/blob/master/projects/personal-website/checkpoints/style/checkpoint.md</p> <p>[7:42] FYI - I aim to post instructions for the CRUD App Style Checkpoint sometime within the next day or two.</p> <p>[7:42] But for now let's take a look at that style checkpoint for the personal website assignment.</p> <p>[7:43] Basically what we are doing here is starting off with a basic HTML page like the one we did together in class and the ones you have been working on through your \"structure\" checkpoints...</p> <p>[7:44] ... and slowly adding CSS style declarations to it...</p> <p>[7:44] ... using a variety of stylesheet configuration approaches.</p> <p>[7:46] I suspect it will take you a while to explore the many different CSS styling options available. A good reference for the different styles is found here: http://www.w3schools.com/css/default.asp</p> <p>Student1 [7:46 PM] What about if we add one CSS file instead of including it to the HTML? thank you</p> <p>Professor [7:47 PM] The first, and easiest way to apply a style to any html element is by adding a \"style\" attribute to that element, and specifying a certain value or set of values to that attribute.</p> <p>[7:48] @Student1 using a single CSS file is an approach covered later in the exercise.</p> <p>[7:48] Good question.</p> <p>[7:49] We'll get to that in a minute, or if you'd like, read ahead in the exercise to the section on configuring \"external local stylesheets\".</p> <p>[7:49] In fact that is a more ideal approach, and the exercise mentions some reasons why.</p> <p>[7:50] But getting back to the first approach for now, essentially we add this inline \"style\" attribute using notation like the following: <code>style=\"font-family: monospace; color: '#ccc';\"</code>.</p> <p>[7:51] So <code>&lt;p&gt;Some paragraph text here!&lt;/p&gt;</code> becomes <code>&lt;p style=\"font-family: monospace; color: '#ccc';\"&gt;Some paragraph text here!&lt;/p&gt;</code>.</p> <p>[7:52] Notice that the attribute name and value are specified within the opening tag of the <code>p</code> element.</p> <p>[7:52] <code>style=</code> references the attribute name, \"style\"...</p> <p>[7:52] And <code>\"font-family: monospace; color: '#ccc';\"</code> references the attribute value.</p> <p>[7:53] In this case, and in the case of many style declarations that contain multiple CSS properties, the CSS properties are all contained within the same string value, <code>\"______\"</code>.</p> <p>[7:54] Inside the string they are listed using key/value pairs...</p> <p>[7:55] ... where the key is separated from the value by a colon (<code>:</code>) and each key/value pair is separated from the next pair by a semi-colon (<code>;</code>).</p> <p>[7:57] So in this case, the properties being applied to this <code>p</code> element include setting its <code>font-family</code> property to \"monospace\"...</p> <p>[7:57] ... and its <code>color</code> property to '#ccc' (the hexadecimal representation of the color grey). (edited)</p> <p>[7:58] The <code>font-family</code> and <code>color</code> properties, and the rest of the available properties and their accepted values can all be found in that w3schools link.</p> <p>[7:59] My personal experience with CSS differs greatly than my experience programming in other languages in the sense that I feel CSS is more of a guessing game.</p> <p>[7:59] I often find myself having to try some combination of styles, previewing their application in a browser, then revising them until the page looks the way I want.</p> <p>Student2 [8:01 PM] Here's another css tutorial if anyone needs it: http://docs.webplatform.org/wiki/css/tutorials</p> <p>Professor [8:02 PM] not to get too far ahead in the exercise, but since I personally find CSS to be especially tricky, I end up leveraging front-end frameworks like Twitter Bootstrap, and I've encouraged you to do the same.</p> <p>[8:02] Thanks @Student2  for that resource.</p> <p>[8:03] OK, returning back to the flow of the exercise now, does anyone have a question about using inline styles?</p> <p>[8:04] If you do, chime in at any time.</p> <p>[8:04] I advise you take at least twenty minutes to work through some of the different style options using inline styles.</p> <p>[8:07] Once you've specified a handful of style declarations that are getting applied the way you expect them to in your browser, take a moment to pause before moving on.</p> <p>[8:08] You may want to commit your changes to version control to start fresh on the next step...</p> <p>[8:08] ... which is to convert your inline style declarations to a single internal \"stylesheet\".</p> <p>[8:10] Perhaps the trickiest part of this step is making sure to properly define \"selectors\" in your stylesheet that specify which elements to apply the styles to.</p> <p>[8:10] You'll notice in the exercise we create an inline stylesheet by adding a <code>style</code> element to the <code>head</code>.</p> <p>[8:10] The <code>style</code> element has both opening and closing tags, and inside is where the style declarations go.</p> <p>[8:11] These style declarations very closely resemble the inline values for the <code>style</code> attribute, except they are written solely in CSS.</p> <p>[8:14] For example, the inline style value of <code>&lt;ol style=\"list-style:none;\"&gt;</code> becomes <code>ol { list-style:none; }</code> where the <code>ol</code> is the selector and everything within the curly braces comprises the CSS properties.</p> <p>[8:16] Also note this approach completely separates the <code>ol</code> HTML element from its CSS style declaration. (edited)</p> <p>[8:16] The only way the stylesheet knows what elements to apply the <code>list-style:none;</code> property to is because we gave it a selector of <code>ol</code>.</p> <p>[8:17] This is an example of using the actual element names as CSS selectors.</p> <p>[8:17] The other two approaches include referencing elements by their <code>id</code> and <code>class</code> attributes, respectively.</p> <p>[8:19] We use <code>id</code> to assign an HTML element a unique identifier, and <code>class</code> attribute to classify similar HTML elements into groups. this is often done for styling purposes, or to facilitate the function of interactive features (which we will see when we get to the JavaScript exercise next week).</p> <p>[8:20] Refer to the exercise for examples of using ids and classes as CSS selectors.</p> <p>[8:21] I often find myself messing up the selectors and having to try a few times to get them right, so don't worry if you find yourself doing the same.</p> <p>[8:21] Are there any questions about selectors? Feel free to chime in at any time.</p> <p>[8:23] Once you have moved your original inline styles into a stylesheet and referenced the original elements properly using selectors, you should see the same design that you started with.</p> <p>[8:26] Moving on to the next step in the exercise (external stylesheets)... you are essentially transferring your stylesheet from the HTML file's <code>head</code> to a stand-alone CSS file located somewhere else in the website's directory structure.</p> <p>[8:27] So the <code>style</code> element gets replaced with a <code>link</code> element...</p> <p>[8:28] ... as <code>&lt;style media=\"screen\"&gt; ... &lt;/style&gt;</code>becomes <code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"assets/styles/my-style.css\"&gt;</code>...</p> <p>[8:28] ...where the <code>link</code>'s <code>href</code> attribute value points to the location of wherever you put that stylesheet.</p> <p>[8:30] If you don't see your original styles applied in the browser after you make this switch, you most likely specified the wrong file path.</p> <p>[8:31] Now we've achieved the separation of HTML and CSS that @Student1  was asking about earlier.</p> <p>Student1 [8:32 PM] Yes it make sense now, thank you.</p> <p>Professor [8:34 PM] OK, now the only type of configuration left to cover is an external hosted stylesheet.</p> <p>[8:34] For this example, we will use the stylesheet provided to us by a popular front-end web development framework called Twitter Bootstrap:</p> <p>[8:34] http://getbootstrap.com/</p> <p>[8:35] Basically they have created styles for you to use. And all you have to do is classify your HTML elements in such a way as to utilize these styles.</p> <p>[8:35] Let's take a look at an example...</p> <p>[8:36] Navigate to http://getbootstrap.com/css/#buttons-options.</p> <p>[8:38] You can see Bootstrap provides an easy way to use buttons that look nice, use engaging colors,  and respond to to hover-states, etc.</p> <p>[8:39] Before we use Twitter Bootstrap to make a fun button, let's start by seeing what a <code>button</code> element looks like without the use of Twitter Bootstrap.</p> <p>[8:39] Drop the following elements into your webpage and see what they look like:</p> <pre><code>&lt;button&gt;Button One&lt;/button&gt;\n&lt;button type=\"button\" class=\"btn btn-default\"&gt;Button Two&lt;/button&gt;\n</code></pre> <p>[8:40] The first button is declared normally. The second is declared using the syntax that Twitter Bootstrap told us to use.</p> <p>[8:40] When we preview these buttons in the browser, we see something like...</p> <p>Professor [8:41 PM] uploaded and commented on this image: Screenshot 2017-02-09 20.41.19.png</p> <p></p> <p>1 Comment</p> <p>buttons without bootstrap</p> <p>Professor [8:41 PM] not very nice.</p> <p>[8:42] But why isn't the second button displaying the way Twitter Bootstrap said it would?</p> <p>[8:43] We used the syntax it told us to, so what's going on?</p> <p>Professor [8:43 PM] uploaded this image: Screenshot 2017-02-09 20.42.56.png</p> <p></p> <p>Add Comment</p> <p>Professor [8:44 PM] The answer is that we have not yet configured our web page to use Twitter Bootstrap's stylesheet.</p> <p>[8:45] We can do this by downloading the Twitter Bootstrap files locally and including them in our repository, and linking to them the same way we did a few minutes ago...</p> <p>[8:45] ... and that approach is a common one.</p> <p>[8:45] But for simplicity's sake, we will use a different approach whereby we link directly to a hosted version of the stylesheet we need.</p> <p>[8:46] For instructions on how to \"install\" Twitter Bootstrap in this manner, navigate to http://getbootstrap.com/getting-started/#download-cdn.</p> <p>[8:47] There we see instructions to use the following link:</p> <p>[8:47] <code>&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt;</code></p> <p>[8:48] So all we have to do is replace <code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"assets/styles/my-style.css\"&gt;</code> with <code>&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt;</code> and when we refresh the page in the browser, we will see the bootstrap styles being applied:</p> <p>Professor [8:49 PM] uploaded this image: Screenshot 2017-02-09 20.48.57.png</p> <p></p> <p>Add Comment</p> <p>Professor [8:50 PM] Now we can apply different button colors like the Twitter Bootstrap documentation suggests:</p> <p>Professor [8:51 PM] added this HTML snippet: partial_index.html <pre><code>&lt;button&gt;Button One&lt;/button&gt;\n&lt;button type=\"button\" class=\"btn btn-default\"&gt;Button Two&lt;/button&gt;\n&lt;button type=\"button\" class=\"btn btn-primary\"&gt;Button Three&lt;/button&gt;\n&lt;button type=\"button\" class=\"btn btn-large btn-danger\"&gt;Button Four&lt;/button&gt;&lt;!-- ah, \"btn-large\" should instead be \"btn-lg\", which explains why the button is not large in the picture as expected. --&gt;\n</code></pre></p> <p>Add Comment</p> <p>Professor [8:51 PM] and see the colors applied:</p> <p>Professor [8:51 PM] uploaded this image: Screenshot 2017-02-09 20.51.21.png</p> <p></p> <p>Add Comment</p> <p>Professor [8:52 PM] Notice, the first button still doesn't look like the rest, and its because we haven't structured the element according to Twitter Bootstrap's instructions.</p> <p>[8:53] I encourage you to take at least twenty minutes exploring the styling options made available to you through Twitter Bootstrap...</p> <p>[8:53] ... i.e. everything on this page: http://getbootstrap.com/css/.</p> <p>Student3 [8:53 PM] :+1:</p> <p>Student1 [8:54 PM] Great website</p> <p>Professor [8:55 PM] That also includes everything on this page: http://getbootstrap.com/components. (edited)</p> <p>[8:56] You will see ways to structure your website to make it responsive to different device widths so it looks good on both desktop and mobile browsers.</p> <p>[8:57] I highly recommend that if you are attempting to add headers and navigation menus, that you do so in small increments, making small changes at a time. You might even want to start entirely from scratch using the templates provided by Twitter Bootstrap, then drop-in the other HTML structure and content you have previously been working on.</p> <p>[8:58] I find that if I try to make large structural changes I am more prone to making a mistake or missing some text somewhere.</p> <p>[8:59] Anyway, that introduction to Twitter Bootstrap concludes the second Personal Website Checkpoint exercise.</p> <p>[8:59] Please take the next week to apply what you have learned to your Personal Website project.</p> <p>[9:00] Be aware that some of Twitter Bootstrap's components, like drop-down menus, require small snippets of JavaScript, but we will cover that next week.</p> <p>[9:01] So for now, either don't worry if you're using a dropdown menu that doesn't yet have its interactive features, or take an advance peek at http://getbootstrap.com/javascript/  to try to figure it out on your own if you're curious.</p> <p>[9:02] I'm going to sign off in a few minutes, but let me know if you have questions about CSS or Twitter Bootstrap.</p> <p>[9:04] Also be aware I will be posting the CRUD App Style Checkpoint instructions over the upcoming days, hopefully before the end of the weekend. In at least one of the two style-related checkpoint exercises, I hope to post an example of a Bootstrap-styled page that has a header navigation menu, for your reference.</p> <p>[9:05] Look out for a Blackboard announcement for more details.</p> <p>[9:05] I know this was kind of awkward with me typing into a chat room for like two hours, but I'm thankful at least a handful of you were present during this time.</p> <p>[9:06] And I hope that even though we didn't meet in person tonight, that you are able to make progress on your personal website project at least.</p> <p>Student4 [9:07 PM] I know I didn't chime in at all but this is alot of help thanks alot professor!</p> <p>Professor [9:09 PM] @Student4  my pleasure.</p>"},{"location":"notes/databases/firestore/setup/","title":"Google Cloud Firestore Database","text":"<p>Let's setup our own database and fetch data from there. We'll use a NoSQL key-value storage option called Firestore from Google. Firestore is available via the Firebase suite of products.</p>"},{"location":"notes/databases/firestore/setup/#database-setup","title":"Database Setup","text":""},{"location":"notes/databases/firestore/setup/#google-cloud-project","title":"Google Cloud Project","text":"<p>Visit the Google Cloud Console. Create a new project, and name it. After it is created, select it from the project selection dropdown menu.</p>"},{"location":"notes/databases/firestore/setup/#firebase-project","title":"Firebase Project","text":"<p>Visit the Google Firebase Console to create a new Firebase project. When you create the project:</p> <ol> <li>Select the Google Cloud project you just created from the dropdown.</li> <li>Enable Google Analytics.</li> <li>Configure Google Analytics:<ol> <li>Choose an existing Google Analytics account or create a new one.</li> <li>Automatically create a new property in this account.</li> </ol> </li> </ol>"},{"location":"notes/databases/firestore/setup/#firestore-database-setup","title":"Firestore Database Setup","text":"<p>Follow this guide (just the \"Create a Cloud Firestore database\" section), to create a Firestore database for the Firebase project you just created. When you create the database, \"start in test mode\".</p>"},{"location":"notes/databases/firestore/setup/#products-collection","title":"Products Collection","text":"<p>After the database has been created, create a new collection called \"products\" with a number of documents inside. Create each document using an auto-generated <code>id</code> attribute, as well as the attributes <code>name</code> (string), <code>description</code> (string), <code>price</code> (number) and <code>url</code> (string). Populate the documents based on the following examples:</p> name description price url Strawberries Juicy organic strawberries. 4.99 https://picsum.photos/id/1080/360/200 Cup of Tea An individually-prepared tea or coffee of choice. 3.49 https://picsum.photos/id/225/360/200 Textbook It has all the answers. 129.99 https://picsum.photos/id/24/360/200"},{"location":"notes/databases/firestore/setup/#google-cloud-service-account-credentials","title":"Google Cloud Service Account Credentials","text":"<p>To fetch data from the Firestore database (and use other Google APIs), the app will need access to a local \"service account\" credentials file.</p> <p>From the Google API Credentials page, find the service account created during the Firebase project setup process (it should be called something like \"firebase-adminsdk\"), or feel free to create a new service account.</p> <p>For the chosen service account, create new JSON credentials file as necessary from the \"Keys\" menu, then download the resulting JSON file. You'll need to move a copy of this file into the root directory of your project repository, by convention naming it \"google-credentials.json\" (see project-specific README files and guidance).</p>"},{"location":"notes/databases/mongodb/notes/","title":"MongoDB Overview (Optional)","text":"<p>Databases are not within the scope of this course. But if you're already somewhat familiar with databases and database management and you're attempting the optional extra credit project: then you'll probably benefit from a brief overview of MongoDB.</p> <p>MongoDB stores data using a flexible document data model that is similar to JSON. Documents contain one or more fields, including arrays, binary data and sub-documents. Fields can vary from document to document. This flexibility allows development teams to evolve the data model rapidly as their application requirements change. When you need to lock down your data model, optional document validation enforces the rules you choose. - MongoDB website</p> <p>Source Code: https://github.com/mongodb/mongo.</p> <p>Documentation:</p> <ul> <li>Mongo Shell</li> <li>CRUD Operations</li> </ul>"},{"location":"notes/databases/mongodb/notes/#installation","title":"Installation","text":"<p>Mac OS:</p> <pre><code>brew install mongodb\nbrew services start mongodb\n</code></pre> <p>Windows OS:</p> <pre><code># TBA\n</code></pre>"},{"location":"notes/databases/mongodb/notes/#usage","title":"Usage","text":"<pre><code>which mongo\nmongo --version\nmongo\n&gt; db # to show the active database\n&gt; show dbs # to show all databases\n&gt; use myNewDatabase # create/use a new database\n&gt; show collections # list all collections in the current database\n&gt; db.getCollectionNames() # list all collections in the current database (alternate)\n&gt; db.myCollection.insert( { x: 1 } ); # insert a new record\n&gt; db.myCollection.insert( { y: 2 } );\n&gt; db.myCollection.find().pretty() # print collection\n&gt; db.myCollection.find({x:1}).pretty() # find a record matching given query conditions\n&gt; exit\n</code></pre>"},{"location":"notes/git/notes/","title":"Git","text":"<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. - Git Website</p> <p>Git is a command-line utility which allows us to track changes and manage different versions of the files that comprise our software projects.</p> <p>Source Code: https://github.com/git/git.</p> <p>Documentation: https://git-scm.com/doc.</p> <p>Command Line Reference Documents (Cheat Sheets):</p> <ul> <li>https://education.github.com/git-cheat-sheet-education.pdf</li> <li>https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf</li> <li>https://www.git-tower.com/blog/git-cheat-sheet/</li> </ul>"},{"location":"notes/git/notes/#git-vs-github","title":"Git vs GitHub","text":"<p>Git is a command-line utility. Whereas GitHub is an online platform - a social network of sorts - where programmers create profiles and publish software projects.</p> <p>GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside millions of other developers. - GitHub website</p> <p>GitHub and competitor BitBucket) both use Git paradigms and technologies.</p> <p>GitHub is the place to find and explore the world's leading open source code projects. It also provides robust project management features to help you collaborate with other developers.</p>"},{"location":"notes/git/notes/#tools-clients","title":"Tools (Clients)","text":"<p>You can use a number of different tools and techniques to use Git. The most efficient way is via the command line. But that requires some understanding of command-line computing. So often it's easier to start with a more user-friendly and easy-to-learn tool like one of these Git GUI applications. Perhaps the leading Git GUI application is GitHub Desktop, however the application can at times run into performance issues (i.e. general slowness), and does not contain all the features of the Git command line utility.</p> <p>Choose the Git client that works best for you for now, while recognizing you should eventually end up using the command line.</p>"},{"location":"notes/git/notes/#git-command-line-utility","title":"Git Command Line Utility","text":""},{"location":"notes/git/notes/#initializing-a-local-repository","title":"Initializing a Local Repository","text":"<p>Navigate to an existing directory, then check to see if that directory is a Git repository by running one of the Git commands, for example:</p> <pre><code>git log # see a history of recent commit messages\n</code></pre> <p>If you see an error that says \"fatal: Not a git repository (or any of the parent directories): .git\", then you first need to initialize a new repository in this directory:</p> <pre><code>git init . # initialize a new git repository, creating a hidden folder called .git in your project's root directory\n</code></pre>"},{"location":"notes/git/notes/#committing-changes","title":"Committing Changes","text":"<p>A general iterative workflow to commit your changes is as follows...</p> <p>Detect changes:</p> <pre><code>git status # see what files have changed since the last version\ngit diff # see how those files have changed (only shows diffs for files that existed during the last version, not for newly created files)\n</code></pre> <p>Stage and commit changes:</p> <pre><code>git add . # either add files individually by name, or use the . to represent all files in the repository. this \"stages\" the files for commit. you can undo this with `git reset`\ngit log # take a look at the most recent commit messages as you consider what message to apply to the upcoming commit, in case you want to maintain a consistent narrative and/or tone across related commit messages\ngit commit -m \"my message\" # saves the changes and adds a unique reference for this particular version\n</code></pre> <p>Note: Get comfortable with these commands, because you will use them every time you commit your changes to version control! Optionally alias them by adding one or more new entries to your profile (e.g. <code>~/.bash_profile</code>). For example:</p> <pre><code>alias gd=\"git diff\"\nalias gs=\"git status\"\n</code></pre>"},{"location":"notes/git/notes/#associating-local-and-remote-repositories","title":"Associating Local and Remote Repositories","text":"<p>This process can differ based on different circumstances, but these instructions assume you have created both a local repository and a remote repository.</p> <p>How to associate an existing GitHub-hosted remote Git repository with an existing local Git repository:</p> <ol> <li>Create a new repo on GitHub, and note its clone url (either HTTPS or SSH, depending on your preference).</li> <li>Navigate to the root directory of your existing local repository.</li> <li>Configure a \"remote\" address for your local repository: <code>git remote add origin CLONE_URL</code>. Note: the overwhelming convention is to name your GitHub remote, \"origin\".</li> <li>One-time association of remote repo with local repo: <code>git pull origin master --allow-unrelated-histories</code> (then you'll be in a Vi window, so press \"shift + ZZ\" to save and exit the window).</li> </ol>"},{"location":"notes/git/notes/#pushing-changes","title":"Pushing Changes","text":"<p>Assuming you have created a remote repository on GitHub and configured your local repository with the corresponding remote address:</p> <pre><code>git pull origin master # best practice, pull before you push in case other changes have been made to the remote repository.\ngit push origin master\n</code></pre> <p>After pushing, you should be able to visit your remote repository on GitHub and see your code there.</p>"},{"location":"notes/heroku/notes/","title":"Heroku Overview","text":"<p>When we published our personal website project, we used the GitHub Pages platform to host our site. GitHub Pages can host static websites, but it is not currently able to host dynamic web applications which rely on server-side software. To host our web application, we will use a different hosting provider called Heroku.</p> <p>Heroku is a cloud platform that lets companies build, deliver, monitor and scale apps \u2014 we're the fastest way to go from idea to URL, bypassing all those infrastructure headaches. - Heroku website</p> <p>Heroku provides us with the ability to configure and manage remote servers. We will configure one or more of these servers to host our web application's source code and serve HTTP responses upon request. Each Heroku server has a unique URL address that you can visit to interact with your application. Heroku also provides you the ability to remote login to your server to run commands, check server logs, etc.</p> <p>We can use Heroku to serve applications written in many of today's popular programming languages, including Node.js, Python, Ruby, and more. This means learning how to manage Heroku servers will be beneficial to you regardless of which programming language you are using in the future. Heroku can host all kinds of apps.</p> <p>For more information about how Heroku works, see: https://devcenter.heroku.com/articles/how-heroku-works.</p>"},{"location":"notes/heroku/notes/#prerequisites","title":"Prerequisites","text":"<ul> <li>Login to an existing Heroku account, or register for a new one. Make sure to confirm your account by clicking a confirmation link the confirmation email sent to you by Heroku.</li> </ul> <p>Security Alert: consider eventually enabling multi-factor authentication on your Heroku account to keep your account and your servers safe from intrusion. Don't worry about doing this now if you don't feel like it, but take a moment to do so when you have time.</p>"},{"location":"notes/heroku/notes/#installation","title":"Installation","text":"<p>In addition to using Heroku's online platform, we will use the Heroku Toolbelt command-line utility to interface with Heroku's resources and capabilities.</p> <p>Source Code: https://github.com/heroku/cli.</p> <p>Installation Guide:  https://devcenter.heroku.com/articles/heroku-cli#download-and-install.</p> <pre><code>which heroku\n#&gt; /usr/local/bin/heroku (Mac example)\n</code></pre>"},{"location":"notes/heroku/notes/#authentication","title":"Authentication","text":"<p>After installing Heroku Toolbelt, authenticate using your Heroku account credentials:</p> <pre><code>heroku login\n</code></pre> <p>Authentication Guide: https://devcenter.heroku.com/articles/heroku-cli#getting-started.</p>"},{"location":"notes/heroku/notes/#usage","title":"Usage","text":"<p>Heroku CLI Guides and Documentation: https://devcenter.heroku.com/categories/command-line.</p> <p>Heroku Node.js Application Tutorial: https://devcenter.heroku.com/articles/getting-started-with-nodejs.</p> <p>List applications:</p> <pre><code>heroku apps\n</code></pre> <p>Create a Heroku application server (ideally from within the root directory of an existing project):</p> <pre><code>heroku create # or optionally specify a name, like: heroku create my-app-name\n</code></pre> <p>Deploy the application's source code to the application server:</p> <pre><code>git push origin master # best practice: commit and push your code to a remote repository before deploying\ngit push heroku master\n</code></pre> <p>Visit the application in a browser and note its URL for future reference:</p> <pre><code>heroku open\n</code></pre> <p>Check your logs:</p> <pre><code>heroku logs\n</code></pre>"},{"location":"notes/javascript/","title":"JavaScript Language Overview","text":"<p>This document contains a high level overview of the JavaScript language. For more details, see the external resources linked below.</p>"},{"location":"notes/javascript/#references","title":"References","text":"<p>Mozilla Guides:</p> <ul> <li>JavaScript First Steps</li> <li>JavaScript Basics</li> <li>JavaScript Reference</li> <li>JavaScript Statements</li> </ul> <p>W3Schools Guides:</p> <ul> <li>Intro to JavaScript</li> <li>Where to put JavaScript</li> <li>Logging and Output</li> <li>Variables</li> <li>Functions</li> </ul>"},{"location":"notes/javascript/#notes","title":"Notes","text":""},{"location":"notes/javascript/#syntax-and-style","title":"Syntax and Style","text":"<p>You may see JavaScript statements ended with a trailing semi-colon. In some cases it is necessary to use these trailing semi-colons, but you are generally free to omit them.</p> <p>Always observe lower-case variable and function names. If your variable or function name is comprised of two words, use camel-case, not snake case or title-case.</p> <pre><code>// DO:\nname\nfirstName\nlastName\nfirstAndLastName\n\n// DON'T:\nName\nfirst_name\nLastName\nfirst_and_last_name\n</code></pre>"},{"location":"notes/javascript/#comments","title":"Comments","text":"<p>Reference https://www.w3schools.com/js/js_comments.asp.</p> <p>Single-line comments:</p> <pre><code>console.log(\"HELLO WORLD\") // single-line comment\n// console.log(\"HELLO WORLD - THIS MESSAGE IS PREVENTED FROM BEING EXECUTED\")\n</code></pre> <p>Multi-line comments:</p> <pre><code>/*\n\nmulti-line comment\n\nconsole.log(\"HELLO WORLD - THIS MESSAGE IS PREVENTED FROM BEING EXECUTED\")\n\n*/\n</code></pre>"},{"location":"notes/javascript/#logging","title":"Logging","text":"<p>Output, or \"log\" an object to the browser's console:</p> <pre><code>console.log(\"HELLO WORLD\") //&gt; HELLO WORLD\n</code></pre> <p>Log multiple objects:</p> <pre><code>console.log(\"HELLO WORLD\", 5, 9999, \"GOODBYE!\")  //&gt; HELLO WORLD 5 9999 GOODBYE!\n</code></pre>"},{"location":"notes/javascript/#debugging","title":"Debugging","text":"<p>Insert a <code>debugger</code> statement to drop a break-point in script execution. When the break-point is reached, it will stop and allow you to interact with the state of the code at that particular line.</p> <pre><code>debugger;\n</code></pre> <p>For example:</p> <pre><code>function debugStuff(){\n  console.log(\"START OF FUNCTION\");\n  var x = 100;\n  debugger;\n  var y = 999;\n  console.log(\"END OF FUNCTION\");\n}\n\ndebugStuff()\nx //=&gt; 100\ny //=&gt; undefined\n</code></pre> <p>Feel free to come back to this <code>debugger</code>  example after you have familiarized yourself with functions, below.</p>"},{"location":"notes/javascript/#variables","title":"Variables","text":"<p>Declare a variable using the syntax <code>var</code> then the name of the variable, then assign its value by using a single equal sign (<code>=</code>) followed by the value. Any datatype can be stored in a variable.</p> <pre><code>var i = 10\nvar f = 0.45\nvar s = \"My Message\"\nvar d = new Date(2017,02,23)\nvar a = [1,2,3,4]\nvar o = {}\nvar f = function(){ console.log(\"LOGGING FROM INSIDE A FUNCTION\") }\n\n// REFRESHER ON FUNCTION INVOCATION:\nf // references the function as a variable, but does not invoke it\nf() // invokes the function\n</code></pre> <p>NOTE: when assigning a value, use a single equal sign (<code>=</code>).</p> <p>Variables can be defined without yet being assigned a value. In this case, the variable's value is said to be \"undefined\".</p> <pre><code>var g;\ng //=&gt; undefined\ng = 100\ng //=&gt; 100\n</code></pre>"},{"location":"notes/javascript/#datatypes","title":"Datatypes","text":""},{"location":"notes/javascript/#functions","title":"Functions","text":""},{"location":"notes/javascript/#control-flow","title":"Control Flow","text":""},{"location":"notes/javascript/#errors","title":"Errors","text":""},{"location":"notes/javascript/ajax/","title":"Asynchronous JavaScript (AJAX)","text":"<p>AJAX stands for Asynchronous JavaScript and XML. In a nutshell, it is the use of the XMLHttpRequest object to communicate with server-side scripts. It can send as well as receive information in a variety of formats, including JSON, XML, HTML, and even text files. AJAX\u2019s most appealing characteristic is its \"asynchronous\" nature which means it can communicate with the server, exchange data, and update the page all without having to refresh the browser.</p> <p>The two major features of AJAX allow you to do the following:</p> <ul> <li>Make requests to the server without reloading the page</li> <li>Receive and work with data from the server</li> </ul> <p>... - Mozilla website</p> <p>Use AJAX to send and receive data on the client-side, without refreshing the page.</p> <p>Be careful not to assume synchronous execution of your JavaScript code. Assume the time between request and response is not certain.</p> <p>After fetching the data, it won't be accessible to the console or other global scope part of your program (unless you save the results to a variable previously defined in the global scope). For more information, refer to this guide on global vs local scopes.</p> <p>When we make an asynchronous request, we'll be working with objects called Promises, so it will be helpful to read up about them. To make use of the data eventually returned in a Promise, we'll either use a <code>then()</code> strategy (preferred), or an async/await strategy (might not work on older browsers).</p>"},{"location":"notes/javascript/ajax/#how-to-make-an-ajax-request","title":"How to Make an AJAX Request","text":"<p>To make an asyncronous HTTP request, we can either use vanilla JavaScript, or third-party packages like d3, jQuery, or axios.</p> <p>NOTE: let's prefer to use the Vanilla JavaScript <code>fetch()</code> method if possible, unless we're already using one of the other packages in our project, to avoid unnecessary dependencies.</p>"},{"location":"notes/javascript/ajax/#vanilla-javascript","title":"Vanilla JavaScript","text":"<p>References:</p> <ul> <li>Using Fetch - Mozilla</li> <li><code>fetch()</code></li> <li><code>Promise</code></li> <li><code>Response</code></li> </ul> <p>Issuing GET requests (the following approaches are equivalent):</p> <pre><code>var requestUrl = \"https://raw.githubusercontent.com/prof-rossetti/internet-technologies/main/exercises/fetch-the-data/gradebook.json\"\n\n// PROMISE CHAINING w/ ARROW FUNCTIONS\n\nfetch(requestUrl)\n    .then(response =&gt; response.json())\n    .then(data =&gt; console.log(data))\n    .catch(err =&gt; console.log(err))\n\n// PROMISE CHAINING\n\nfetch(requestUrl)\n    .then(response =&gt; {\n        console.log(\"RESPONSE\", response)\n        return response.json()\n    })\n    .then(data =&gt; {\n        console.log(\"DATA\", data) // this is the data you're looking for\n    })\n    .catch(err =&gt; {\n        console.error(\"FETCH ERR\", err)\n    })\n</code></pre> <p>Issuing POST requests:</p> <pre><code>var requestUrl = \"https://example.com/api/robots\"\nvar formData = {name: \"New Bot\", description: \"Does all the things.\"}\nvar requestOptions = {\n  method: \"POST\",\n  headers: {'Accept':'application/json', 'Content-Type':'application/json'},\n  body: JSON.stringify(formData)\n}\n\nfetch(requestUrl, requestOptions)\n  .then(function(response) {\n    if (response.ok) { // check response status and proceed accordingly\n      response.json()\n        .then(function(data){\n          console.log(data)\n        })\n    } else {\n      console.log(\"OOPS\")\n    }\n  })\n  .catch(function(err){\n    console.log(\"OOPS\")\n  })\n</code></pre>"},{"location":"notes/javascript/ajax/#d3","title":"D3","text":"<p>References:</p> <ul> <li><code>d3.request()</code>.</li> <li><code>d3.json()</code></li> </ul> <p>Issuing GET requests with D3:</p> <pre><code>var requestUrl = \"https://raw.githubusercontent.com/prof-rossetti/internet-technologies/main/exercises/fetch-the-data/gradebook.json\"\n\nd3.json(requestUrl, function(json){\n  console.log(\"GOT SOME DATA:\", json)\n  // DO SOMETHING WITH THE DATA HERE!\n})\n</code></pre> <p>Issuing POST requests with D3:</p> <pre><code>var requestUrl = \"https://example.com/api/robots\"\nvar formData = {name: \"New Bot\", description: \"Does all the things.\"}\n\nd3.request(requestUrl)\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Type\", \"application/json\")\n  .on(\"error\", function(error) {\n    // HANDLE ERRORS HERE\n  })\n  .on(\"load\", function(xhr) {\n    // HANDLE RESPONSE HERE\n  })\n  .send(\"POST\", JSON.stringify(formData))\n</code></pre>"},{"location":"notes/javascript/ajax/#jquery","title":"JQuery","text":"<p>References:</p> <ul> <li><code>$.ajax()</code></li> <li><code>$.getJSON()</code></li> <li><code>$.post()</code></li> <li><code>jqXHR</code></li> </ul> <p>Issuing GET requests with JQuery:</p> <pre><code>var url = \"https://raw.githubusercontent.com/prof-rossetti/internet-technologies/main/exercises/fetch-the-data/gradebook.json\"\n\n$.getJSON(url, function(json) {\n  console.log(\"GOT SOME DATA:\", json)\n  // DO SOMETHING WITH THE DATA HERE!\n});\n</code></pre> <p>Issuing POST requests with JQuery:</p> <pre><code>var requestUrl = \"https://example.com/api/robots\"\nvar formData = {name: \"New Bot\", description: \"Does all the things.\"}\n\n$.post(requestUrl, formData)\n  .done(function(data, textStatus, xhr) {\n    // HANDLE RESPONSE HERE\n  })\n  .fail(function(xhr, textStatus, errorThrown){\n    // HANDLE ERRORS HERE\n  })\n</code></pre>"},{"location":"notes/javascript/ajax/#axios","title":"Axios","text":"<p>References:</p> <ul> <li>Axios Docs</li> <li>Axios Source Code</li> </ul> <p>Issuing GET requests with axios:</p> <pre><code>var requestUrl = \"https://raw.githubusercontent.com/prof-rossetti/internet-technologies/main/exercises/fetch-the-data/gradebook.json\"\n\naxios.get(requestUrl)\n    .then(function (response) {\n        // handle success\n        console.log(\"RESPONSE:\", response)\n        console.log(\"DATA:\", response.data)\n    })\n    .catch(function (error) {\n        // handle error\n        console.log(error)\n    })\n    .then(function () {\n        // always executed\n    })\n</code></pre> <p>Issuing GET requests with URL params object (as an alternative to compiling the params in the request URL itself, which would require some escaping of spaces and special characters), with Axios:</p> <pre><code>var API_KEY = \"abc123\" // TODO: use env vars instead of hard-coding\n\n// https://www.yelp.com/developers/documentation/v3/business_search\nvar requestUrl = \"https://api.yelp.com/v3/businesses/search\"\nconsole.log(\"REQUEST URL:\", requestUrl)\n\nvar requestOptions = {\n    headers: {\n        Authorization: `Bearer ${API_KEY}`,\n    },\n    params: {\n      location: \"Washington, DC\", // todo: use form data\n      price: 3 // todo: use form data\n    }\n}\nconsole.log(\"REQUEST OPTIONS:\", requestOptions)\n\naxios.get(requestUrl, requestOptions)\n  .then(function (response) {\n    //console.log(\"RESPONSE:\", response)\n    console.log(\"DATA:\", response.data)\n  })\n  .catch(function (error) {\n    console.log(\"ERR:\", error)\n  })\n  .then(function () {\n    console.log(\"DONE...\")\n  })\n})\n</code></pre> <p>Issuing POST requests with axios:</p> <pre><code>var requestUrl = \"https://example.com/api/robots\"\nvar requestData = {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n}\naxios.post(requestUrl, requestData)\n  .then(function (response) {\n    console.log(response)\n  })\n  .catch(function (error) {\n    console.log(error)\n  })\n</code></pre>"},{"location":"notes/javascript/ajax/#async-await","title":"Async / Await","text":"<p>References:   + Async Function - Mozilla   + Async / Await - Mozilla   + Async / Await - W3Schools</p> <p>FYI: sometimes instead of using <code>then()</code> to handle Promises, you might see an async / await strategy:</p> <pre><code>function resolveAfter2Seconds() {\n  return new Promise(resolve =&gt; {\n    setTimeout(() =&gt; {\n      resolve('resolved')\n    }, 2000)\n  });\n}\n\nasync function asyncCall() {\n    const result = await resolveAfter2Seconds()\n    console.log(result);\n}\n\nasyncCall()\n</code></pre> <p>NOTE: The await keyword can only be used inside an async function. So it might require us to use some awkward wrapper function(s).</p>"},{"location":"notes/javascript/control-flow/","title":"Control Flow","text":"<p>Reference https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference#Control_flow.</p>"},{"location":"notes/javascript/control-flow/#conditionals","title":"Conditionals","text":"<p>In JavaScript, conditionals are defined using the <code>if</code> keyword followed by a set of parentheses (<code>()</code>) containing an expression to be evaluated, followed by curly braces (<code>{}</code>) which contain statements to be executed if that condition is met.</p> <pre><code>if (true) {\n  console.log(\"SWEET\")\n}\n\nif (!true) {\n  console.log(\"SWEET\")\n}\n</code></pre> <pre><code>if (1 == 1) {\n  console.log(\"SWEET\")\n}\n\nif (1 == 2) {\n  console.log(\"SWEET\")\n}\n</code></pre> <pre><code>if (undefined) {\n  console.log(\"SWEET\")\n}\n\nif (!undefined) {\n  console.log(\"SWEET\")\n}\n</code></pre> <p>IF statements may be followed by the <code>else</code> keyword followed by a set of parentheses (<code>()</code>) containing an expression to be evaluated in the event none of the above conditions are met.</p> <pre><code>if (1 == 1) {\n  console.log(\"SWEET\")\n} else {\n  console.log(\"NOPE\")\n}\n//&gt; \"SWEET\"\n\nif (1 == 2) {\n  console.log(\"SWEET\")\n} else {\n  console.log(\"NOPE\")\n}\n//&gt; \"NOPE\"\n</code></pre> <p>IF statements, regardless of whether or not they contain an ELSE statement, can contain any number of <code>else if</code> keywords followed by a set of parentheses (<code>()</code>) containing an expression to be evaluated in the event that condition is met.</p> <pre><code>var fruit = \"Apple\"\n\nif (fruit == \"Orange\") {\n  console.log(\"SWEET\")\n} else if (fruit == \"Banana\") {\n  console.log(\"OK\")\n} else {\n  console.log(\"NOPE\")\n}\n\n//&gt; \"NOPE\"\n</code></pre> <p>As in other languages, statement order matters:</p> <pre><code>if (false) {\n  console.log(\"SWEET\")\n} else if (true) {\n  console.log(\"OK\")\n} else if (true) {\n  console.log(\"ALSO OK\")\n} else {\n  console.log(\"NOPE\")\n}\n\n//&gt; \"OK\"\n</code></pre>"},{"location":"notes/javascript/control-flow/#switch-case-statements","title":"Switch / Case Statements","text":"<p>Switch statements are essentially case statements.</p> <pre><code>var fruit = \"Apple\"\n\nswitch(fruit) {\n    case \"Orange\":\n        console.log(\"SWEET\")\n        break;\n    case \"Banana\":\n        console.log(\"OK\")\n        break;\n    default:\n        console.log(\"NOPE\")\n}\n\n//&gt; \"NOPE\"\n</code></pre>"},{"location":"notes/javascript/document-object-model/","title":"The Document Object Model (DOM)","text":"<p>\"The Document Object Model (DOM) is the data representation of the objects that comprise the structure and content of a document on the web.\" - Mozilla</p> <p>\"When an HTML document is loaded into a web browser, it becomes a document object.\" - W3Schools</p>"},{"location":"notes/javascript/document-object-model/#references","title":"References","text":"<p>Mozilla Guides:</p> <ul> <li>DOM Introduction</li> <li>Manipulating Documents</li> </ul> <p>W3Schools Guides:</p> <ul> <li>The Document Object</li> <li>DOM Element Objects</li> <li>Accessing and Manipulating the DOM</li> <li>The Window Object - W3Schools</li> </ul>"},{"location":"notes/javascript/document-object-model/#notes","title":"Notes","text":""},{"location":"notes/javascript/document-object-model/#the-window-object","title":"The Window Object","text":"<p>Read more about the window object, including intervals, time-outs, and alerts.</p>"},{"location":"notes/javascript/document-object-model/#the-document-object","title":"The Document Object","text":"<p>Read more about the document object, including element selection, and event listeners.</p>"},{"location":"notes/javascript/document/","title":"The Document Object","text":"<p>See also:   + The Document Object Model (DOM)   + The Window Object</p> <p>The document is a property of the browser window object:</p> <pre><code>window.document\n</code></pre> <p>The document object and some properties:</p> <pre><code>document\n\ndocument.head\ndocument.body\n\ndocument.title\ndocument.URL\ndocument.cookie\n</code></pre> <p>Traversing the document tree hierarchy (we need to know about JavaScript arrays):</p> <pre><code>document.childNodes\ndocument.children\ndocument.children[0].children\ndocument.children[0].children[0]\ndocument.children[0].children[1]\n</code></pre>"},{"location":"notes/javascript/document/#selections","title":"Selections","text":"<p>Selecting elements:</p> <ul> <li><code>document.getElementById()</code></li> <li><code>document.getElementsByClassName()</code></li> <li><code>document.getElementsByTagName()</code></li> <li><code>document.querySelector()</code></li> <li><code>document.querySelectorAll()</code></li> </ul> <pre><code>&lt;div id=\"my-container\"&gt;\n  &lt;p id=\"my-message\"&gt;some placeholder content&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  // select elements from the DOM by specifying their unique identifiers:\n  var myDiv = document.getElementById(\"my-container\")\n  var myParagraph = document.getElementById(\"my-message\")\n\n  // manipulate properties of an element:\n  myParagraph.innerHTML = \"Fun times!\"\n  myParagraph.style.color = \"red\"\n\n  // can even create new elements:\n  var myHeading = document.createElement(\"h3\")\n  myHeading.innerHTML = \"This is a heading\"\n  myDiv.appendChild(myHeading)\n\n&lt;/script&gt;\n</code></pre>"},{"location":"notes/javascript/document/#event-listening","title":"Event-listening","text":"<p>References:</p> <ul> <li>https://developer.mozilla.org/en-US/docs/Web/API/EventListener</li> <li>https://www.w3schools.com/jsref/met_document_addeventlistener.asp</li> </ul> <pre><code>&lt;button id=\"my-awesome-btn\"&gt;\n  Click Me\n&lt;/button&gt;\n</code></pre> <pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var clickCount = 0\n\n  // access the button element from the DOM by specifying its unique identifier\n  var myBtn = document.getElementById(\"my-awesome-btn\")\n\n  // define a click event handler function\n  function myBtnClick() {\n    clickCount = clickCount + 1\n    console.log(\"YOU CLICKED ME\", clickCount, \"TIMES! :-)\")\n  }\n\n  // register the handler function to the button's click event\n  myBtn.addEventListener(\"click\", myBtnClick, false)\n\n&lt;/script&gt;\n</code></pre>"},{"location":"notes/javascript/errors/","title":"Errors","text":""},{"location":"notes/javascript/errors/#handling-errors","title":"Handling Errors","text":"<p>Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch.</p> <p>Handle, or \"catch\" errors:</p> <pre><code>try {\n   console.log(\"TRYING TO DO STUFF HERE\")\n} catch (err) {\n   console.log(\"CAUGHT AN ERROR\", err)\n}\n\ntry {\n   document.oops() // this invalid code throws error like \"document.oops is not a function\"\n   console.log(\"TRYING TO DO STUFF HERE\")\n} catch (err) {\n   console.log(\"CAUGHT AN ERROR\", err)\n}\n</code></pre>"},{"location":"notes/javascript/errors/#throwing-errors","title":"Throwing Errors","text":"<p>Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw.</p> <p>Raise, or \"throw\" errors yourself:</p> <pre><code>throw \"MyError\"\nthrow 4\nthrow true\n</code></pre>"},{"location":"notes/javascript/functions/","title":"Functions","text":"<p>Like in other languages, JavaScript functions must first be defined before they can be invoked (or called).</p> <p>Define a function:</p> <pre><code>function doStuff(){\n  console.log(\"DOING STUFF HERE!\")\n}\n</code></pre> <p>Invoke the function:</p> <pre><code>doStuff() // NOTE: the trailing parentheses are important. If they are omitted, the function will not be invoked.\n</code></pre> <p>You might see some functions invoked by themselves (e.g. <code>doStuff()</code>) while others are invoked on objects (e.g. <code>someObject.doSomethingElse()</code>).</p> <p>Many of the examples below involve invoking built-in functions on certain types of objects. To find a comprehensive list of functions available to be called on any given type of object, reference the documentation for that type of object.</p>"},{"location":"notes/javascript/functions/#parameters","title":"Parameters","text":"<p>Some functions accept parameters which can be passed to the function during its invocation. A function's parameters must be configured during the function's definition.</p>"},{"location":"notes/javascript/functions/#single-parameter","title":"Single Parameter","text":"<p>Define a function with a parameter:</p> <pre><code>function doStuffWithParam(message){\n  console.log(message)\n}\n</code></pre> <p>In this case, <code>message</code> is the name of the function's parameter. Invoke it like so:</p> <pre><code>doStuffWithParam(\"My Message Here\")\n</code></pre>"},{"location":"notes/javascript/functions/#multiple-parameters","title":"Multiple Parameters","text":"<p>Define a function with multiple parameters:</p> <pre><code>function doStuffWithParams(message, firstName, lastName){\n  console.log(\"DOING STUFF HERE!\")\n  console.log(message, \"says\", firstName, lastName)\n}\n</code></pre> <p>In this case, <code>message</code>, <code>firstName</code> and <code>lastName</code> are the names of the function's parameters. Invoke it like so:</p> <pre><code>doStuffWithParams(\"Hello World\", \"Ophelia\", \"Clarke\")\n</code></pre>"},{"location":"notes/javascript/functions/#returns","title":"Returns","text":"<p>Use the <code>return</code> keyword when you want to make use of the value returned by the function:</p> <pre><code>function calculateArea(length, height){\n  length * height\n}\n\nvar area = calculateArea(4, 2)\narea //=&gt; undefined\n</code></pre> <pre><code>function calculateArea(length, height){\n  return length * height\n}\n\nvar area = calculateArea(4, 2)\narea //=&gt; 8\n</code></pre>"},{"location":"notes/javascript/functions/#arrow-functions","title":"Arrow Functions","text":"<p>Reference: Arrow Functions - Mozilla.</p> <p>FYI: there is a new \"arrow function: style short-hand for JavaScript functions. The following approaches are equivalent:</p> <pre><code>var numbers = [1,2,3,4,5,6,7]\n\n//\n// TRADITIONAL APPROACH\n//\n\nvar bigger1 = numbers.map(function(n){\n    return n * 100\n})\nconsole.log(bigger1) //&gt; [100, 200, 300, 400, 500, 600, 700]\n\n//\n// ARROW STYLE APPROACH\n//\n\nvar bigger2 = numbers.map(n =&gt; n * 100)\nconsole.log(bigger2) //&gt; [100, 200, 300, 400, 500, 600, 700]\n</code></pre>"},{"location":"notes/javascript/node/","title":"Node.js Overview","text":"<p>Up until this point we have been using JavaScript on the \"client-side\" - executed and interpreted by a web browser.</p> <p>Node.js allows us to install an interpreter onto our local machines that will allow us to run JavaScript scripts on the \"server-side\".</p> <p>Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js' package ecosystem, npm, is the largest ecosystem of open source libraries in the world. - Node.js website</p>"},{"location":"notes/javascript/node/#references","title":"References","text":"<ul> <li>Node.js Source Code</li> <li>Node.js Documentation</li> </ul>"},{"location":"notes/javascript/node/#detection","title":"Detection","text":"<p>First, check if node is installed on your computer, and if so, which version:</p> <pre><code># Mac Terminal:\nwhich node\n\n# Windows Command Prompt:\nwhere node\n#&gt; /Users/YOUR_USERNAME/.nvm/versions/node/v6.6.0/bin/node\n</code></pre> <pre><code>node -v\n#&gt; v6.6.0\n</code></pre>"},{"location":"notes/javascript/node/#installation","title":"Installation","text":"<p>If Node isn't already installed on your computer, you need to install it. There are two general ways to do this:</p> <p>A. Install the latest version of Node.js from https://nodejs.org/en/download/ -- EASY WAY</p> <p>B. Install a version manager, and use that to install a specific version of Node.js. If installing via a version manager, choose one depending on your operating system:</p> <ul> <li><code>nvm</code> (Mac OS)</li> <li><code>nvm-windows</code> (Windows OS)</li> </ul>"},{"location":"notes/javascript/node/#usage","title":"Usage","text":"<p>Once you have installed Node, you should be able to use it to run scripts. For example, if you have a file called \"my_script.js\" file on your Desktop with the following contents inside:</p> <pre><code>// this is a file on the Desktop called my_script.js\nconsole.log(\"HEY WE ARE RUNNING JAVASCRIPT ON THE SERVER-SIDE!\")\n</code></pre> <p>Run the script by specifying its filepath:</p> <pre><code>cd ~/Desktop\nnode my_script.js\n</code></pre> <p>NOTE: You either need to run the script from within the directory where it exists, or invoke it with a more absolute file path (e.g. <code>node ~/Desktop/my_script.js</code>).</p>"},{"location":"notes/javascript/node/#npm","title":"NPM","text":"<p>Once you have installed Node, you also get NPM, the Node Package Manager.</p>"},{"location":"notes/javascript/npm/","title":"Node Package Manager (NPM)","text":"<p>In the Node.js ecosystem, third-party JavaScript libraries are called \"packages\" (or \"modules\") and we can install them using the Node Package Manager (NPM).</p>"},{"location":"notes/javascript/npm/#detection","title":"Detection","text":"<p>NPM usually comes pre-installed when you install Node. Check to see if NPM is installed, and if so, where:</p> <pre><code># Mac Terminal / Windows Git Bash:\nwhich npm\n\n# Windows Command Prompt:\nwhere npm\n</code></pre> <p>Checking to see which version is installed:</p> <pre><code>npm -v\n</code></pre>"},{"location":"notes/javascript/npm/#installing-packages","title":"Installing Packages","text":"<p>When installing third-party packages, you have the option to install them \"globally\" or \"locally,\" and the installation method differs slightly for each. Generally, the package documentation will tell you whether to install locally or globally.</p>"},{"location":"notes/javascript/npm/#installing-packages-globally","title":"Installing Packages Globally","text":"<p>By installing a package \"globally\", you install it onto your machine in a shared place for use within any of your projects. Packages that provide command-line utilities are often installed this way.</p> <pre><code>npm install MODULE_NAME -g\n</code></pre>"},{"location":"notes/javascript/npm/#installing-packages-locally","title":"Installing Packages Locally","text":"<p>By installing a package \"locally\", you install it within the \"node_modules\" directory of a specific project you are working on, and only files within that project will have access to the installed modules.</p> <p>This is often useful if you are working on multiple projects at the same time which use different modules or different versions of the same module.</p>"},{"location":"notes/javascript/npm/#the-packagejson-file","title":"The \"package.json\" File","text":"<p>References:   + https://docs.npmjs.com/files/package.json   + https://docs.npmjs.com/files/package.json#main   + https://docs.npmjs.com/files/package.json#scripts</p> <p>To manage the module dependencies of your project, create a new file called \"package.json\" in that project's root directory (most commonly by running the <code>npm init</code> command in that directory). Then within the \"package.json\" file, specify a list of packages and their versions. From within the project's root directory, run <code>npm install</code> to install all packages listed in the \"package.json\" file.</p> <p>Installing existing modules listed in the \"package.json\" file:</p> <pre><code>npm install\n</code></pre> <p>Installing a new module locally and adding it to the \"package.json\" file for the first time: ```sh npm install MODULE_NAME --save ````</p>"},{"location":"notes/javascript/window/","title":"The Browser Window Object","text":"<p>See also:   + The Document Object Model (DOM)   + The Document Object</p> <p>Get current browser window dimensions:</p> <pre><code>window.innerHeight\nwindow.innerWidth\n</code></pre> <p>Get information about the URL of the current page:</p> <pre><code>window.location\nwindow.location.href\nwindow.location.protocol\nwindow.location.host\nwindow.location.port\nwindow.location.pathName\nwindow.location.toString()\n</code></pre> <p>Store data:</p> <pre><code>window.localStorage //=&gt; Storage {length: 0}\nwindow.localStorage.userID = \"ABCD\"\nwindow.localStorage //=&gt; Storage {userID: \"ABCD\", length: 1}\n</code></pre>"},{"location":"notes/javascript/window/#alerts","title":"Alerts","text":"<p>Display a pop-up alert message box:</p> <pre><code>window.alert(\"HELLO WORLD\")\n\nalert(\"HELLO WORLD\")\n</code></pre>"},{"location":"notes/javascript/window/#timeouts","title":"Timeouts","text":"<p>Invoke a function after waiting for a specified duration of time:</p> <pre><code>function doStuff() {\n  console.log(\"PATIENTLY WAITING\")\n}\n\ndoStuff()\n\nwindow.setTimeout(doStuff, 5000); // invoke the doStuff() function after waiting 5 seconds\n\nsetTimeout(doStuff, 5000);\n</code></pre>"},{"location":"notes/javascript/window/#intervals","title":"Intervals","text":"<p>Invoke a function at specified intervals:</p> <pre><code>function doStuff() {\n  console.log(\"DOING IT AND DOING IT AND DOING IT WELL\")\n}\n\nwindow.setInterval(doStuff, 1000); // invoke the doStuff() function once per second\n\nsetInterval(doStuff, 1000);\n</code></pre> <p>Stop intervals:</p> <pre><code>function doStuff() {\n  console.log(\"DOING IT AND DOING IT AND DOING IT WELL\")\n}\n\nvar myInterval = window.setInterval(doStuff, 500); // must store the interval in a variable to access it later\n\nclearInterval(myInterval);\n</code></pre>"},{"location":"notes/javascript/datatypes/","title":"JavaScript Datatypes","text":"<p>Use <code>typeof()</code> to return the type of any object:</p> <pre><code>typeof(\"Hello\") //=&gt; string\ntypeof(100) //=&gt; number\ntypeof(0.45) //=&gt; number\ntypeof(true) //=&gt; boolean\ntypeof(false) //=&gt; boolean\ntypeof(undefined) //=&gt; undefined\ntypeof( {a:1, b:2} ) //=&gt; object\ntypeof( [1,2,3] ) //=&gt; object\ntypeof( new Date() ) //=&gt; object\ntypeof( function doStuff(){} ) //=&gt; function\n</code></pre> <p>Here are a few examples of how to convert between datatypes:</p> <pre><code>// convert string to number:\nparseInt(\"500\")\n\n// convert string to number:\nparseFloat(\"0.45\")\n\n// convert string to unix timestamp:\nDate.parse(\"March 21, 2012\")\n\n// convert number to string:\nvar i = 100\ni.toString() //=&gt; \"100\"\n</code></pre> <p>See the subsections below for more information about the different data types:</p> <ul> <li>Booleans</li> <li>Strings</li> <li>Numbers</li> <li>Arrays</li> <li>Objects</li> </ul>"},{"location":"notes/javascript/datatypes/arrays/","title":"Arrays","text":"<p>Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array.</p> <p>Arrays are ordered lists. Arrays contain zero or more elements. Arrays can contain elements of any type. As a best practice, array elements should share a datatype and structure:</p> <pre><code>// DO:\n\n[]\n[1,2,3,4]\n[100, 75, 33]\n[\"fun\", \"times\", \"right?\"]\n[ {a:1, b:2}, {a:5, b:6}] // arrays can contain objects\n[ [1,2,3], [4,5,6], [7,8,9]] // arrays can be \"nested\" inside other arrays\n\n// DON'T:\n[100, \"fun\"]\n[ {a:1, b:2}, {c:5, d:6}]\n</code></pre> <p>Like other languages, individual array elements can be accessed by their index. Array indices are zero-based, meaning the index of the first element in an array is 0.</p> <pre><code>var arr = [\"a\", \"b\", \"c\", \"d\"]\narr[0] //&gt; \"a\"\narr[1] //&gt; \"b\"\narr[2] //&gt; \"c\"\narr[3] //&gt; \"d\"\narr[4] //&gt; undefined\n\narr.indexOf(\"a\") //&gt; 0\narr.indexOf(\"b\") //&gt; 1\narr.indexOf(\"c\") //&gt; 2\narr.indexOf(\"z\") //&gt; -1 (applies to any item not found in the array)\n</code></pre> <p>Counting the number of items in an array:</p> <pre><code>var arr = [\"a\", \"b\", \"c\", \"d\"]\narr.length //=&gt; 4\n</code></pre> <p>Checking to see if an item is in the array:</p> <pre><code>var arr = [\"a\", \"b\", \"c\", \"d\"]\narr.includes(\"a\") //&gt; true\narr.includes(\"z\") //&gt; false\n</code></pre> <p>Add an element to the end of an array:</p> <pre><code>var arr = [\"a\", \"b\", \"c\", \"d\"]\narr.push(\"e\") //&gt; \"e\"\narr //&gt; [\"a\", \"b\", \"c\", \"d\", \"e\"]\n</code></pre> <p>Concatenate two arrays:</p> <pre><code>var arr = [\"a\", \"b\", \"c\", \"d\"]\nvar arr2 = [\"x\", \"y\", \"z\"]\nvar arr3 = arr.concat(arr2)\narr //&gt; [\"a\", \"b\", \"c\", \"d\"] \narr2 //&gt; [\"x\", \"y\", \"z\"]\narr3 //&gt; \"a\", \"b\", \"c\", \"d\", \"x\", \"y\", \"z\"]\n</code></pre>"},{"location":"notes/javascript/datatypes/arrays/#iteration","title":"Iteration","text":"<p>Arrays can be iterated, or \"looped\" using the <code>forEach()</code> function:</p> <pre><code>var arr = [\"a\", \"b\", \"c\", \"d\"]\n\narr.forEach(function(item, index, array) { // uses all available params\n  console.log(item, index);\n})\n\narr.forEach(function(item) { // uses the most simple params possible\n  console.log(item);\n})\n</code></pre> <p>A common pattern is to loop through one array to populate the contents of another:</p> <pre><code>var arr = [1, 2, 3, 4]\nvar arr2 = []\n\narr.forEach(function(item) {\n  arr2.push(item * 100)\n})\n\narr //=&gt; [1, 2, 3, 4]\narr2  //=&gt; [100, 200, 300, 400]\n</code></pre>"},{"location":"notes/javascript/datatypes/arrays/#mapping","title":"Mapping","text":"<p>Arrays can be looped \"in-place\" using the <code>map()</code> function:</p> <pre><code>var arr = [1, 2, 3, 4]\n\nvar arr2 = arr.map(function(x){\n  return x * 100\n})\n\narr2 //&gt; [100, 200, 300, 400]\n</code></pre> <p>NOTE: remember to use the <code>return</code> keyword when mapping.</p>"},{"location":"notes/javascript/datatypes/arrays/#filtering","title":"Filtering","text":"<p>Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter.</p> <p>Use the <code>filter()</code> function to select a subset of items from an array - only those items matching a given condition.</p> <pre><code>var arr = [1,2,4,8,16]\narr.filter(function(i){ return true })\narr.filter(function(i){ return i == 2})\narr.filter(function(i){ return i != 2})\narr.filter(function(i){ return i &gt; 2})\narr.filter(function(i){ return i &lt;= 2})\narr.filter(function(i){ return i &gt; 102})\n</code></pre> <pre><code>var teams = [{city:\"New York\", name:\"Yankees\"}, {city:\"New York\", name:\"Mets\"}, {city:\"Boston\", name:\"Red Sox\"}]\nteams.filter(function(obj){ return obj[\"name\"] == \"Yankees\" })\nteams.filter(function(obj){ return obj[\"city\"] == \"New York\" })\nteams.filter(function(obj){ return obj[\"city\"] == \"New Haven\" })\nteams.filter(function(obj){ return obj[\"city\"].includes(\"New\") })\n</code></pre> <p>Note: the <code>filter()</code> function returns an Array, even if it is empty or only contains one item.</p>"},{"location":"notes/javascript/datatypes/arrays/#finding","title":"Finding","text":"<p>Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find.</p> <p>Use the <code>find()</code> function to select a single items from an array - only the first item matching a given condition.</p> <pre><code>var arr = [1,2,4,8,16]\narr.find(function(i){ return true })\narr.find(function(i){ return i == 2})\narr.find(function(i){ return i != 2})\narr.find(function(i){ return i &gt; 2})\narr.find(function(i){ return i &lt;= 2})\narr.find(function(i){ return i &gt; 102})\n</code></pre> <pre><code>var teams = [{city:\"New York\", name:\"Yankees\"}, {city:\"New York\", name:\"Mets\"}, {city:\"Boston\", name:\"Red Sox\"}]\nteams.find(function(obj){ return obj[\"name\"] == \"Yankees\" })\nteams.find(function(obj){ return obj[\"city\"] == \"New York\" })\nteams.find(function(obj){ return obj[\"city\"] == \"New Haven\" })\nteams.find(function(obj){ return obj[\"city\"].includes(\"New\") })\n</code></pre> <p>Note: the <code>find()</code> function returns a single value, or undefined.</p>"},{"location":"notes/javascript/datatypes/arrays/#sorting","title":"Sorting","text":"<p>Reference:   + Sorting Arrays - Mozilla   + D3 Array Sorting</p> <pre><code>var numbers = [7,2,4,9,1]\nnumbers.sort() // FYI: this is mutating (changes the item in place)\nnumbers //&gt; [1, 2, 4, 7, 9]\n\nvar letters = [\"j\",\"d\",\"p\",\"q\",\"x\"]\nletters.sort() // FYI: this is mutating (changes the item in place)\nletters //&gt; [\"d\", \"j\", \"p\", \"q\", \"x\"]\n</code></pre> <pre><code>var books = [{title:\"Book B\", year:1990}, {title:\"Book X\", year:1957}, {title:\"Book A\", year:2030}]\n\nbooks.sort((a,b) =&gt; a.year - b.year)\n\n// sorting by strings is a little more complicated. why not use d3?\nbooks.sort((a,b) =&gt; d3.ascending(a.title, b.title))\n</code></pre>"},{"location":"notes/javascript/datatypes/booleans/","title":"Booleans","text":"<p>Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean.</p> <p>In JavaScript, like other languages, <code>true</code> and <code>false</code> are reserved words which indicate boolean values.</p> <pre><code>true\nfalse\n</code></pre> <p>The most relevant boolean operator is the equality operator:</p> <pre><code>true == true //=&gt; true\ntrue == false //=&gt; true\nfalse == false //=&gt; false\n</code></pre> <p>\"Is this equal to that?\"</p> <p>Also relevant is the inequality operator:</p> <pre><code>true != true //=&gt; false\ntrue != false //=&gt; true\nfalse != false //=&gt; false\n</code></pre> <p>\"Is this not equal to that?\"</p> <p>Reference https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Comparison_operators for more information about comparison operators.</p> <p>In JavaScript, there are also \"strict\" versions of these operators (<code>===</code> and <code>!==</code>) that also take datatypes into consideration:</p> <pre><code>5 == \"5\" //&gt; true\n5 === \"5\" //&gt; false\n</code></pre>"},{"location":"notes/javascript/datatypes/numbers/","title":"Numbers","text":"<p>Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number.</p> <pre><code>100\n-100\n0.45\n</code></pre> <p>Numeric functions include many arithmetic operators:</p> <pre><code>100 + 5\n100 - 5\n100 * 5\n100 / 5\n</code></pre> <p>Indicate order of operations by using parentheses:</p> <pre><code>3 + 1 * 2 //=&gt; 5\n(3 + 1) * 2 //=&gt; 8\n</code></pre> <p>Numbers also support equality operators:</p> <pre><code>100 == 100 //=&gt; true\n100 == 100.0 //=&gt; true\n100 == 99 //&gt; false\n100 == (99 + 1) //=&gt; true\n</code></pre> <p>Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Arithmetic_operators for more information about arithmetic operators.</p>"},{"location":"notes/javascript/datatypes/numbers/#math-methods","title":"<code>Math</code> Methods","text":"<p>Also reference the functionality of the \"Math\" object: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.</p> <pre><code>Math.PI //=&gt; 3.141592653589793\n\nMath.random()\n\nMath.round(4.555) //=&gt; 5\nMath.ceil(4.555) //=&gt; 5\nMath.floor(4.555) //=&gt; 4\n\nMath.min(4,3,7,9) //=&gt; 3\nMath.max(4,3,7,9) //=&gt; 9\n</code></pre>"},{"location":"notes/javascript/datatypes/objects/","title":"Objects","text":"<p>Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object.</p> <p>Example objects:</p> <pre><code>{}\n\n{\"a\": 1, \"b\": 2, \"c\": 3}\n\n{\"a\": 1, \"b\": 2, \"c\": 3, \"fruits\": [\"apple\", \"banana\", \"pear\"]} // objects can contain lists, or even other nested objects\n\n{\"first_name\": \"Ophelia\", \"last_name\": \"Clark\", \"message\": \"Hello Again\"}\n</code></pre> <p>Each object is similar to a row in a CSV-formatted spreadsheet or a record in a database, where the object's \"keys\" represent the column names and its \"values\" represent the cell values.</p> city name league New York Yankees major New York Mets major Boston Red Sox major New Haven Ravens minor <pre><code>[\n    {\"city\": \"New York\", \"name\": \"Yankees\", \"league\":\"major\"},\n    {\"city\": \"New York\", \"name\": \"Mets\", \"league\":\"major\"},\n    {\"city\": \"Boston\", \"name\": \"Red Sox\", \"league\":\"major\"},\n    {\"city\": \"New Haven\", \"name\": \"Ravens\", \"league\":\"minor\"}\n]\n</code></pre>"},{"location":"notes/javascript/datatypes/objects/#operations","title":"Operations","text":"<p>Access individual object elements by their key:</p> <pre><code>var person = {first:\"Ophelia\", last:\"Clarke\", message:\"Hello world\", favoriteCities:[\"New York\", \"Denver\", \"San Francisco\"]}\n\nperson[\"first\"] //&gt; \"Ophelia\"\nperson[\"last\"] //&gt; \"Clarke\"\nperson[\"message\"] //&gt; \"Hello world\"\nperson[\"favoriteCities\"] //=&gt; [\"New York\", \"Denver\", \"San Francisco\"]\nperson[\"favoriteCities\"][0] //=&gt; \"Denver\" (an array is still an array, even if it exists inside a JSON object!)\n</code></pre> <p>Add or remove items from an object:</p> <pre><code>var person = {first:\"Ophelia\", last:\"Clarke\", message:\"Hello world\", favoriteCities:[\"New York\", \"Denver\", \"San Francisco\"]}\n\nperson[\"eyeColor\"] = \"Brown\"\n\ndelete person[\"favoriteCities\"];\n\nperson //=&gt; {first: \"Ophelia\", last: \"Clarke\", message: \"Hello world\", eyeColor: \"Brown\"}\n</code></pre>"},{"location":"notes/javascript/datatypes/objects/#object-methods","title":"<code>Object</code> Methods","text":"<p>Make use of built-in <code>Object</code> methods for easier data-processing:</p> <pre><code>var person = {first:\"Ophelia\", last:\"Clarke\", message:\"Hello world\", favoriteCities:[\"New York\", \"Denver\", \"San Francisco\"]}\n\nObject.keys(person) //&gt; [\"first\", \"last\", \"message\", \"favoriteCities\"]\n\nObject.values(person) //&gt; [\"Ophelia\", \"Clarke\", \"Hello world\", Array[3]]\n\nObject.entries(person) //&gt; [Array[2], Array[2], Array[2], Array[2]]\n</code></pre>"},{"location":"notes/javascript/datatypes/strings/","title":"Strings","text":"<p>Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String.</p> <pre><code>\"Hello World\"\n</code></pre> <p>Example string functions:</p> <pre><code>\"Hello\".toUpperCase() //=&gt; \"HELLO\"\n\"Hello\" + \"World\" //=&gt; \"Hello World\" (string concatenation)\n\"Hello World\".split(\" \") //=&gt; [\"Hello\", \"World\"]\n\"Hello World\".includes(\"Hel\") //=&gt; true\n\"Hello World\".includes(\"Gur\") //=&gt; false\n</code></pre> <p>Strings also support equality operators:</p> <pre><code>\"Hello\" == \"Hello\" //=&gt; true\n\"Hello\" == \"Hel\" //=&gt; false\n</code></pre>"},{"location":"notes/javascript/packages/d3/","title":"The D3 Package","text":"<p>D3.js is a JavaScript library for manipulating documents based on data. D3 helps you bring data to life using HTML, SVG, and CSS. D3\u2019s emphasis on web standards gives you the full capabilities of modern browsers without tying yourself to a proprietary framework, combining powerful visualization components and a data-driven approach to DOM manipulation. - D3 documentation</p> <p>D3 is useful for both its data-processing and data-visualization capabilities.</p>"},{"location":"notes/javascript/packages/d3/#references","title":"References","text":"<ul> <li>https://github.com/d3/d3</li> <li>https://github.com/d3/d3-array</li> <li>https://github.com/d3/d3/blob/master/API.md#arrays-d3-array</li> <li>https://github.com/d3/d3/blob/master/API.md#statistics</li> <li>https://github.com/d3/d3/blob/master/API.md#collections-d3-collection</li> </ul>"},{"location":"notes/javascript/packages/d3/#installation","title":"Installation","text":""},{"location":"notes/javascript/packages/d3/#usage","title":"Usage","text":"<p>Sorting arrays:</p> <pre><code>var arr = [109,823,5,77,32,50]\n\narr.sort(d3.descending)\narr //&gt; [823, 109, 77, 50, 32, 5] (MUTATING)\n\narr.sort(d3.ascending)\narr //&gt; [5, 32, 50, 77, 109, 823] (MUTATING)\n</code></pre> <p>Performing statistical computations on an array of numbers:</p> <pre><code>d3.sum(arr) //&gt; 1096\nd3.mean(arr) //&gt; 182.66666666666666\nd3.median(arr) //&gt; 63.5\nd3.min(arr) //&gt; 5\nd3.max(arr) //&gt; 823\n</code></pre> <pre><code>// FYI: quantile() needs the array to have been previously sorted ascending!\nd3.quantile(arr, 0) //&gt; 5 (MIN)\nd3.quantile(arr, 0.25) //&gt; 36.5 (FIRST QUARTILE)\nd3.quantile(arr, 0.5) //&gt; 63.5 (MEDIAN)\nd3.quantile(arr, 0.75) //&gt; 101 (THIRD QUARTILE)\nd3.quantile(arr, 1) //&gt; 823 (MAX)\n</code></pre> <p>Grouping an array of objects by a given key:</p> <pre><code>var teams = [\n  {city:\"New York\", name:\"Yankees\"},\n  {city:\"New York\", name:\"Mets\"},\n  {city:\"Boston\", name:\"Red Sox\"}\n]\n\nvar teamsGroupedByCity = d3.nest()\n  .key(function(d) { return d.city })\n  .entries(teams)\n\nteamsGroupedByCity //&gt; [Object, Object]\nteamsGroupedByCity[0] //&gt; {key: \"New York\", values: Array[2]}\nteamsGroupedByCity[0].key //&gt; \"New York\"\nteamsGroupedByCity[0].values //&gt; [Object, Object]\nteamsGroupedByCity[0].values[0] //&gt; {city: \"New York\", name: \"Yankees\"}\nteamsGroupedByCity[0].values[1] //&gt; {city: \"New York\", name: \"Mets\"}\nteamsGroupedByCity[1] //&gt; {key: \"Boston\", values: Array[1]}\nteamsGroupedByCity[1].key //&gt; \"Boston\"\nteamsGroupedByCity[1].values //&gt; [Object]\nteamsGroupedByCity[1].values[0] //&gt; {city: \"Boston\", name: \"Red Sox\"}\n</code></pre>"},{"location":"notes/javascript/packages/dotenv/","title":"The <code>dotenv</code> Package","text":"<p>The <code>dotenv</code> package allows a program to reference Environment Variables from a special file called \".env\" in the root directory of the given project, instead of passing them from the command-line.</p> <p>This file-based approach makes environment variables much easier to manage, especially for Windows users.</p> <p>Reference: https://github.com/motdotla/dotenv.</p>"},{"location":"notes/javascript/packages/dotenv/#installation","title":"Installation","text":"<p>Installing the package:</p> <pre><code>npm install dotenv\n</code></pre>"},{"location":"notes/javascript/packages/dotenv/#usage","title":"Usage","text":"<p>To setup this example, create a new directory on your Desktop named \"my-secure-project\". Then navigate there from the command-line:</p> <pre><code>cd Desktop/my-secure-project/\n</code></pre> <p>Run <code>npm init</code> to create a \"package.json\" file. Run <code>npm install dotenv --save</code> to install the dotenv package.</p> <p>Next, create two files in the \"my-secure-project\" directory named \".env\" and \"my_script.js\", respectively, and place inside the following contents:</p> <pre><code># my-secure-project/.env\n\n# these are environment variables:\nSECRET_MESSAGE=\"Hello World\"\nMY_API_KEY=\"abc123\"\n</code></pre> <pre><code>// my-secure-project/my_script.js\n\n// imports a locally-installed node module called \"dotenv\"\nconst dotenv = require(\"dotenv\")\n\n// reads environment variables from the \".env\" file and stores them in `process.env`\ndotenv.config()\n\n// accesses the named environment variables via process.env:\nconsole.log(\"SECRET MESSAGE:\", process.env.SECRET_MESSAGE)\nconsole.log(\"API KEY:\", process.env.MY_API_KEY)\n</code></pre> <p>And run the script to see the output:</p> <pre><code>node my_script.js\n</code></pre> <p>The lesson is that the <code>require(\"dotenv\").config()</code> snippet will load environment variables from the \".env\" file into the  script's environment so they can be accessed by name via the <code>process.env</code> object.</p>"},{"location":"notes/javascript/packages/dotenv/#ignoring-env-files-from-version-control","title":"Ignoring \".env\" Files from Version Control","text":"<p>SECURITY NOTE: Because these \".env\" files often contain sensitive information like secret passwords and API Keys, we should absolutely avoid checking them into version control! To do this, we'll use a special \".gitignore\" file.</p> <p>Finally, create another file in the \"my-secure-project\" directory named \".gitignore\", and place inside the following contents:</p> <pre><code># my-secure-project/.gitignore\n\n# ignore the \".env\" file:\n.env\n</code></pre> <p>Great! Now all subsequent commits will ignore the \".env\" file from your project's version history, so you can push your code to GitHub without divulging your secret credentials.</p> <p>NOTE: if your repository already contained a \".env\" file before you added the corresponding entry to the \".gitignore\" file, you'll need to commit the \".gitignore\" file then delete / move the \".env\" file and make another commit, and then afterwards you can feel free to restore your \".env\" file and it will be ignored</p>"},{"location":"notes/javascript/packages/express/","title":"The Express Package","text":"<p>Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. - Express website</p> <p>Express provides a framework for creating web applications in Node.js. Express allows us to specify response logic that should be performed by a web server when it receives requests at various URL endpoints.</p>"},{"location":"notes/javascript/packages/express/#references","title":"References","text":"<p>Source Code: https://github.com/expressjs/express.</p> <p>Documentation: https://expressjs.com/en/4x/api.html.</p> <p>Getting Started Guides:</p> <ul> <li>https://expressjs.com/en/starter/installing.html</li> <li>https://expressjs.com/en/starter/hello-world.html</li> <li>https://expressjs.com/en/starter/generator.html</li> <li>https://expressjs.com/en/starter/basic-routing.html</li> <li>https://expressjs.com/en/starter/static-files.html</li> </ul>"},{"location":"notes/javascript/packages/express/#installation","title":"Installation","text":"<p>If installing into a local NPM project:</p> <pre><code>npm install express --save\n</code></pre>"},{"location":"notes/javascript/packages/express/#express-generator","title":"Express Generator","text":"<p>Instead of creating and configuring our own Express applications from scratch, we will use the Express Generator NPM package to generate a new express application for us.</p> <p>Install the Express Generator globally:</p> <pre><code>npm install express-generator -g\n</code></pre> <p>NOTE: passing the <code>-g</code> flag denotes a global installation. Global installations generally allow the module to be invoked from the command line, even outside of a NPM project directory.</p>"},{"location":"notes/javascript/packages/express/#usage","title":"Usage","text":"<p>Generating a new Express app:</p> <pre><code>express my_app --view=ejs\n</code></pre> <p>See the \"Express App\" Exercise for more info.</p>"},{"location":"notes/javascript/packages/firebase-admin/","title":"The <code>firebase-admin</code> Package","text":"<p>The <code>firebase-admin</code> package helps us fetch data from a a NoSQL key-value storage option called Firestore from Google. Firestore is available within the Firebase suite of products.</p> <p>References:</p> <ul> <li>NPM Page</li> <li>Source Code</li> <li>Docs</li> </ul>"},{"location":"notes/javascript/packages/firebase-admin/#database-setup","title":"Database Setup","text":"<p>Follow the Firestore Database Setup Guide to create an example database and credentials to access it. Download the resulting service account credentials JSON file into the root directory of your project's repo, specifically naming it \"google-credentials.json\".</p>"},{"location":"notes/javascript/packages/firebase-admin/#installation","title":"Installation","text":"<pre><code>npm install firebase firebase-admin --save\n</code></pre>"},{"location":"notes/javascript/packages/firebase-admin/#usage","title":"Usage","text":"<p>Finally, after setting up the database and configuring the local credentials file, you should be able to use code like this to fetch the products from the database:</p> <pre><code>// this is a file like \"my_script.js\" file...\n\nconst { initializeApp, cert } = require('firebase-admin/app');\nconst { getFirestore } = require('firebase-admin/firestore');\n\n// references the location where you downloaded the credentials file\nconst serviceAccountCreds = require('./google-credentials.json');\n\ninitializeApp({credential: cert(serviceAccountCreds)});\n\nconst db = getFirestore();\n\nasync function fetchProducts() {\n    console.log(\"FETCHING PRODUCTS...\")\n\n    // see: https://googleapis.dev/nodejs/firestore/latest/CollectionReference.html#get\n    const docs = await db.collection(\"products\").get()\n    console.log(\"DOCS:\", docs.size)\n\n    // see: https://googleapis.dev/nodejs/firestore/latest/QuerySnapshot.html\n    // instead of returning the products as documents with separate ids and data\n    // let's create a single object with both the id and the data\n    // to make them easier to process and loop through later\n    var products = []\n    docs.forEach((doc) =&gt; {\n        //console.log(\"DOC ID:\", doc.id, \"DATA\", doc.data())\n        var product = doc.data() // create a new object with the product info\n        product[\"id\"] = doc.id // merge the id with the object\n        products.push(product)\n    })\n\n    //console.log(\"PRODUCTS:\", products.length)\n    return products\n}\n\n//fetchProducts()\n\n//module.exports = {db, fetchProducts}\n</code></pre>"},{"location":"notes/javascript/packages/highcharts/","title":"The <code>Highcharts</code> Library","text":"<p>Highcharts makes it easy for developers to set up interactive charts in their web pages. - Highcharts website</p> <p>Highcharts allows you to make basic charts (Highcharts), stock charts (HighStock), and maps (Highmaps). We will be focusing on basic charts.</p>"},{"location":"notes/javascript/packages/highcharts/#reference","title":"Reference","text":"<ul> <li>Source Code</li> <li>API Documentation</li> <li>Getting-started guide</li> <li>Demos and Examples</li> <li>Your First Chart</li> </ul>"},{"location":"notes/javascript/packages/highcharts/#usage","title":"Usage","text":"<p>Add a chart container <code>&lt;div&gt;</code> to your HTML page somewhere:</p> <pre><code>&lt;div id=\"my-chart-container\"&gt;&lt;/div&gt;\n</code></pre> <p>Then make sure you've loaded the third-party JavaScript library (Highcharts says to add this to the <code>&lt;head&gt;</code>):</p> <pre><code>&lt;script src=\"https://code.highcharts.com/highcharts.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Then add JavaScript to configure and display a chart in the container:</p> <pre><code>&lt;script&gt;\n  chartOptions = {\n    chart: {\n      type: 'bar'\n    },\n    title: {\n      text: 'Food Consumption'\n    },\n    xAxis: {\n      categories: ['Apples', 'Bananas', 'Cookies']\n    },\n    yAxis: {\n      title: {\n        text: 'Type of food eaten'\n      }\n    },\n    series: [\n      {name: 'Series A', data: [0, 0, 11]},\n      {name: 'Series B', data: [2, 3, 8]}\n    ]\n  }\n  Highcharts.chart('my-chart-container', chartOptions)\n&lt;/script&gt;\n</code></pre>"},{"location":"notes/javascript/packages/jquery/","title":"The jQuery Library","text":"<p>jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript. - jQuery Website</p> <p>Source Code: https://github.com/jquery/jquery.</p> <p>API Documentation: https://api.jquery.com/.</p>"},{"location":"notes/javascript/packages/leaflet/","title":"The Leaflet Library","text":"<p>Leaflet is the leading open-source JavaScript library for mobile-friendly interactive maps... Leaflet is designed with simplicity, performance and usability in mind. It works efficiently across all major desktop and mobile platforms, can be extended with lots of plugins, has a beautiful, easy to use and well-documented API and a simple, readable source code that is a joy to contribute to. - Leaflet website</p> <p>Leaflet allows you to make interactive maps.</p>"},{"location":"notes/javascript/packages/leaflet/#references","title":"References","text":"<p>Source Code: https://github.com/Leaflet/Leaflet.</p> <p>API Documentation: https://www.mapbox.com/mapbox-gl-js/api/.</p> <ul> <li><code>Map</code>: http://leafletjs.com/reference-1.0.3.html#map.</li> <li><code>TileLayer</code>: http://leafletjs.com/reference-1.0.3.html#tilelayer.</li> <li><code>Marker</code>: http://leafletjs.com/reference-1.0.3.html#marker.</li> </ul> <p>Examples: http://leafletjs.com/examples.html.</p>"},{"location":"notes/javascript/packages/leaflet/#usage","title":"Usage","text":"<pre><code>&lt;div id=\"my-map-container\"&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>//\n// CREATE A MAP\n//\n\nvar mapContainerId = 'my-map-container'\nvar latLonCoords = [41.29771887088102, -72.92673110961914]\nvar zoomLevel = 8\n\nvar map = L.map(mapContainerId)\n    .setView(latLonCoords, zoomLevel)\n\n//\n// ADD MAP TILES\n//\n\nvar tileUrlTemplate = 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' // just use this. don't worry about what it means\nvar tileLayerOptions = {\n  attribution: '&amp;copy; &lt;a href=\"http://osm.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}\n\nL.tileLayer(tileUrlTemplate, tileLayerOptions)\n    .addTo(map)\n</code></pre>"},{"location":"notes/javascript/packages/mongoose/","title":"Mongoose","text":""},{"location":"notes/javascript/packages/mongoose/#the-mongoose-library","title":"The Mongoose Library","text":"<p>Mongoose provides a JavaScript interface into creating, managing, and querying MongoDB databases.</p> <p>Mongoose provides a straight-forward, schema-based solution to model your application data. It includes built-in type casting, validation, query building, business logic hooks and more, out of the box. - Mongoose website</p>"},{"location":"notes/javascript/packages/mongoose/#references","title":"References","text":"<p>Source Code: https://github.com/Automattic/mongoose.</p> <p>Documentation: http://mongoosejs.com/docs/index.html.</p> <p>Guides: http://mongoosejs.com/docs/guide.html.</p>"},{"location":"notes/javascript/packages/mongoose/#installation","title":"Installation","text":"<p>Install Mongoose locally from within an NPM project directory:</p> <pre><code>npm install mongoose --save\n</code></pre>"},{"location":"notes/javascript/packages/node-fetch/","title":"The <code>node-fetch</code> Package","text":"<p>Node requires this package to be installed to make the <code>fetch()</code> function work.</p> <p>References:</p> <ul> <li>NPM Page</li> </ul>"},{"location":"notes/javascript/packages/node-fetch/#installation","title":"Installation","text":"<p>Install into a local Node.js project:</p> <pre><code>npm install node-fetch@2 --save\n</code></pre>"},{"location":"notes/javascript/packages/node-fetch/#usage","title":"Usage","text":"<p>Use the <code>fetch()</code> function like normal within your JavaScript programs (see notes about Asynchronous JavaScript).</p>"},{"location":"notes/javascript/packages/plotly/","title":"The <code>Plotly</code> Library","text":""},{"location":"notes/javascript/packages/plotly/#references","title":"References","text":"<ul> <li>Source Code</li> <li>Documentation</li> <li>Cheat Sheet</li> <li>Responsive / Fluid Layout</li> <li>Line Charts</li> <li>Bar Charts</li> <li>Pie Charts</li> </ul>"},{"location":"notes/javascript/packages/plotly/#usage","title":"Usage","text":"<p>Add a chart container <code>&lt;div&gt;</code> to your HTML page somewhere:</p> <pre><code>&lt;div id=\"my-chart-container\"&gt;&lt;/div&gt;\n</code></pre> <p>Then make sure you've loaded the third-party JavaScript library:</p> <pre><code>&lt;script src=\"https://cdn.plot.ly/plotly-latest.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Then add JavaScript to configure and display a chart in the container:</p> <pre><code>&lt;script&gt;\n  var series1 = {\n    x: [1, 2, 3, 4],\n    y: [10, 15, 13, 17],\n    mode: \"markers\"\n  }\n\n  var series2 = {\n    x: [2, 3, 4, 5],\n    y: [16, 5, 11, 9],\n    mode: \"lines\"\n  }\n\n  var series3 = {\n    x: [1, 2, 3, 4],\n    y: [12, 9, 15, 12],\n    mode: \"lines+markers\"\n  }\n\n  var data = [ series1, series2, series3 ]\n\n  var layout = {\n    title: \"Line and Scatter Plot\"\n  }\n\n  Plotly.newPlot(\"my-chart-container\", data, layout, {responsive: true})\n\n&lt;script&gt;\n</code></pre> <p>The hardest part of displaying any dataviz is getting the raw data into a structure the chart wants. For this reason, the professor recommends always making example charts with static \"dummy\" data (like the example above) first, so you can learn what data format the chart wants. Then as a second step, transform your raw data as necessary to conform to the desired structure.</p>"},{"location":"notes/javascript/packages/react/","title":"React.js Framework Overview","text":""},{"location":"notes/javascript/packages/react/#react-resources","title":"React Resources","text":"<p>Here is a Getting Started Guide, and a perhaps more helpful guide about Main Concepts. It is important to read about Components and Props, how State is managed, and about the Component Event Lifecycle.</p> <p>There are lots of great Youtube Videos about React by \"WebDevSimplified\", including Learn React in 30 minutes.</p>"},{"location":"notes/javascript/packages/react/#creating-react-apps","title":"Creating React Apps","text":""},{"location":"notes/javascript/packages/react/#from-scratch","title":"From Scratch","text":"<p>If you want to generate a new React app from scratch, the <code>create-react-app</code> tool is a great choice.</p>"},{"location":"notes/javascript/packages/react/#from-a-template","title":"From a Template","text":"<p>You can also feel free to leverage the professor's React Starter App with Firebase Auth as a template, and extend from there.</p>"},{"location":"projects/crud-application/peer-evaluation/","title":"CRUD Application Peer Evaluation","text":"<p>Fill out this CRUD App Peer Evaluation Form when instructed to do so by the professor.</p> <p>This peer evaluation is worth 5% of your final grade. Thank you for taking the time to review and evaluate your peers' projects. As you complete this evaluation, please maintain an objective state of mind, focusing on the merits of the projects you are evaluating, not any personal relationships you may have with your peers. Remember, your evaluations are anonymous, and your peers will not know who evaluated their projects.</p> <p>At the appropriate time, you will receive an email containing a list of five peer projects for you to evaluate. For each of these five peer projects:</p> <ol> <li> <p>Paste the project link into the appropriate section of the form to indicate which project you are evaluating.</p> </li> <li> <p>Visit the project link in a browser, and take a few moments to navigate around that application to get a good feel for it. You should specifically focus on manually performing the following CRUD operations:</p> <ul> <li>View all robots (List/Index)</li> <li>Create a new robot (Create)</li> <li>View a given robot (Show)</li> <li>Edit a given robot (Update)</li> <li>Delete a given robot (Destroy)</li> </ul> </li> <li> <p>Think about what you like about the application, and/or what you think could be improved, then type your comments into the appropriate section in the form. Feel free to focus your comments by answering the following questions:</p> <ul> <li>Does the application perform all the necessary CRUD operations?</li> <li>Is the application navigable and usable? Does it provide descriptive messages to help you overcome potential user errors (e.g. attempting to submit invalid form data)?</li> <li>Did the student demonstrate an attention to detail?</li> <li>Did the student \"make this application his/her own\" by offering an application structure and style which significantly differ from the checkpoint instructions?</li> </ul> </li> <li> <p>Finally, assign the project a number score from 1 (poor) to 10 (awesome) in the appropriate section.</p> </li> </ol> <p>Repeat for each assigned peer project, then submit.</p>"},{"location":"projects/crud-application/project/","title":"CRUD Application","text":"<p>You are part of a development team that has been contracted to build a web application for a business that manufactures and sells robots. The business needs the application to keep track of their inventory of robots. They need to be able to add new robots to their inventory, view information about existing robots, edit information about existing robots, and remove existing robots from the inventory. They also need to be able to keep track of how many of each type of robot are available in their inventory at any given time. Ideally, they'd also like to be able to use the application to process orders and update their inventory accordingly.</p> <p></p> <p>As a senior member of your development team, the professor has already finished designing and developing a database to store all this information. The professor has also developed a RESTful JSON API to help you interface with the database. The professor has published the web service in production at https://example.com/ and has provided API documentation at https://github.com/prof-rossetti/robots-api-express/blob/master/DOCUMENTATION.md.</p> <p>Your job is to create a front-end web application to allow users within the company to interface with the back-end web service to perform all desired tasks. Don't worry about user authentication, which is outside the scope of this project.</p> <p></p> <p>Your application should be built using Node.js and the Express web application framework. It should be hosted in production on a Heroku application server.</p>"},{"location":"projects/crud-application/project/#instructions","title":"Instructions","text":"<p>The first three checkpoint exercises helped you prepare the application's style, structure and interactivity for future development:</p> <ul> <li>Checkpoint I - Structure</li> <li>Checkpoint II - Style</li> <li>Checkpoint III - Interactivity</li> </ul> <p>Now it's time to actually build the CRUD application. For detailed instructions, refer to the following checkpoint exercises:</p> <ul> <li>Checkpoint IV - Application Generation</li> <li>Checkpoint V - Application Deployment</li> <li>Checkpoint VI - Application Navigation and Routing)</li> <li>Checkpoint VII - Application CRUD (Reading Records)</li> <li>Checkpoint VIII - Application CRUD (Creating, Updating, and Destroying Records)</li> </ul> <p>If you have completed the first three checkpoint exercises, feel free to use your work to help you more quickly and easily complete the remaining checkpoint exercises. If you have not completed the first three checkpoint exercises, you are advised to only focus on the remaining checkpoint exercises, which might take a little longer to complete as a result.</p>"},{"location":"projects/crud-application/project/#submission-instructions","title":"Submission Instructions","text":"<p>When your application is ready for evaluation, add its identifying information, including your GitHub username, a link to your app's repository, and a link to your hosted application, to the submissions list. Use the following workflow to accomplish this:</p> <ol> <li>Fork this repository to your own account.</li> <li>Edit the submissions list in your forked repo via the online editor, or by downloading your forked repo, making local commits, and pushing them back up to GitHub.</li> <li>Submit a Pull Request for your changes to be merged into this repo.</li> </ol> <p>NOTE: If you would prefer for any reason to submit your work privately, you may alternatively send the professor your links via email or Slack DM. Your project will still be evaluated, and peer-evaluated, but its identifying information will not be publicly accessible as part of this course repository.</p> <p>Also be prepared to deliver a 5-10 minute presentation to demonstrate usage of your website and describe your planning and design process, as desired.</p>"},{"location":"projects/crud-application/project/#evaluation-criteria","title":"Evaluation Criteria","text":"<p>Your CRUD Application will be evaluated according to the following criteria:</p> criteria weight Implementation 75% Peer Evaluation 25% <p>Partial credit may be given to highlight areas of improvement.</p>"},{"location":"projects/crud-application/project/#implementation-evaluation","title":"Implementation Evaluation","text":"<p>Your CRUD Application implementation will be evaluated based on its demonstrated ability to meet all of the following criteria:</p> <ol> <li>Is hosted on the Internet and publicly accessible.</li> <li>Contains clear, concise, and engaging content free of typographical or grammatical mistakes.</li> <li>Usable design free of usability quirks or bugs.</li> <li>Is built using Node.js and Express.js.</li> <li>Incorporates (\"includes\") at least one EJS view template to minimize duplication of front-end HTML code.</li> <li>Enables navigation between at least all of the following routes:<ul> <li>Home Page (<code>/</code>)</li> <li>Robots Index Page (<code>/robots</code>)</li> <li>New Robot Page (<code>/robots/new</code>)</li> <li>Robot Show Page (<code>/robots/:id</code>)</li> <li>Edit Robot Page (<code>/robots/:id/edit</code>)</li> <li>New Order Page (<code>/orders/new</code>) -- optional extra credit</li> </ul> </li> <li>Interfaces with the provided web service (or your own) to allow users to perform the following CRUD operations:<ul> <li>View all robots (List/Index)</li> <li>Create a new robot (Create)</li> <li>View a given robot (Show)</li> <li>Edit a given robot (Update)</li> <li>Delete a given robot (Destroy)</li> </ul> </li> </ol>"},{"location":"projects/crud-application/project/#peer-evaluation","title":"Peer Evaluation","text":"<p>All members of the learning community, including the professor, will evaluate an assigned list of five submitted CRUD Applications, and will assign each peer project a score from 1 to 10. A weighted average of these individual scores will produce the overall Peer Evaluation Score.</p>"},{"location":"projects/crud-application/checkpoints/app-deployment/checkpoint/","title":"CRUD Application Checkpoint V: Application Deployment","text":"<p>Deploy your web application to a production environment where it is publicly accessible on the Internet. Also deploy it to a remote repository for the source code to be publicly viewable.</p> <p></p> <p>Adapted from source.</p>"},{"location":"projects/crud-application/checkpoints/app-deployment/checkpoint/#objectives","title":"Objectives","text":"<ol> <li>Create and manage a Heroku application server.</li> <li>Configure an Express web application to run on a Heroku application server.</li> <li>Deploy an application's source code to a production environment.</li> <li>Deploy an application's source code to a remote repository.</li> </ol>"},{"location":"projects/crud-application/checkpoints/app-deployment/checkpoint/#prerequisites","title":"Prerequisites","text":"<ol> <li>CRUD Application Checkpoint IV: Application Generation</li> <li>Git Overview</li> <li>Servers Overview</li> <li>Heroku Overview</li> </ol>"},{"location":"projects/crud-application/checkpoints/app-deployment/checkpoint/#instructions","title":"Instructions","text":"<p>Navigate to the root directory of your Express application (unless you're already there):</p> <pre><code>pwd\ncd my_app/\n</code></pre>"},{"location":"projects/crud-application/checkpoints/app-deployment/checkpoint/#push-code-to-remote-repository","title":"Push Code to Remote Repository","text":"<p>If you have not yet done so, initialize a Git repository in the root directory of your Express application, and commit your changes to the local repository:</p> <pre><code>git init . # one time only, to setup this repo\ngit status\ngit diff\ngit add .\ngit commit -m \"Prepare to deploy\"\n</code></pre> <p>If you have not yet done so, push your local changes to the remote repository:</p> <pre><code>git pull origin master # you might have to run this with --allow-unrelated-histories (see the Git overview for more information)\ngit push origin master\n</code></pre>"},{"location":"projects/crud-application/checkpoints/app-deployment/checkpoint/#push-source-code-to-remote-server","title":"Push Source Code to Remote Server","text":"<p>Create a new Heroku application inside the root directory of your Express application:</p> <pre><code>heroku create # initialize a new Heroku application in this directory\n</code></pre> <p>Observe this creates a new Git remote repository called \"heroku\" and you should now see two remote repositories (\"origin\" representing the source code on GitHub, and \"heroku\" representing the source code on the production Heroku server):</p> <pre><code>git remote\ngit remote -v\n</code></pre> <p>Further exploration: If you tried to deploy your application to production now (<code>git push heroku master</code>) and visited the production application in a browser (<code>heroku open</code>), you'd end up seeing an error message. When you'd check the server logs (<code>heroku logs</code>), you'd see the server complaining about an inability to run <code>nodemon</code>. We were using <code>nodemon</code> to run our development web server, but in production we should use <code>node</code> to run the web server.</p> <p></p> <p>So we have to be more specific about how the server should run our application.</p> <p>Configure the Express application to run on a Heroku server by adding a new <code>Procfile</code> file to the root project directory which contains the following contents:</p> <pre><code>web: node ./bin/www\n</code></pre> <p>Commit your changes, push them to a remote repository, then deploy the application source code to a Heroku application server:</p> <pre><code>git commit -am \"Configuring app to run on Heroku\"\ngit push origin master\ngit push heroku master\nheroku open # finally, visit the production application in a browser\n</code></pre> <p>Congratulations, you have just \"pushed to production\" and you gained some serious coder cred.</p>"},{"location":"projects/crud-application/checkpoints/app-generation/checkpoint/","title":"CRUD Application Checkpoint IV: Application Generation","text":"<p>Generate a new Express application, configure it, and use a local web server to preview it in a browser.</p> <p>Adapted from source.</p>"},{"location":"projects/crud-application/checkpoints/app-generation/checkpoint/#objectives","title":"Objectives","text":"<ol> <li>Practice installing and using third-party Node.js packages.</li> <li>Gain exposure to using a third-party package to initialize a new Express application.</li> <li>Gain familiarity with the directory structure and file contents of an Express application.</li> <li>Practice running Node.js scripts from within an NPM project.</li> </ol>"},{"location":"projects/crud-application/checkpoints/app-generation/checkpoint/#prerequisites","title":"Prerequisites","text":"<ol> <li>Server-side JavaScript Exercise</li> <li>Express Overview</li> </ol>"},{"location":"projects/crud-application/checkpoints/app-generation/checkpoint/#instructions","title":"Instructions","text":""},{"location":"projects/crud-application/checkpoints/app-generation/checkpoint/#install-express","title":"Install Express","text":"<p>Use NPM to install a module called the Express Generator. This package includes the Express package, as well as a command-line utility called the Express Generator for generating new Express applications.</p> <p>Install Express Generator globally:</p> <pre><code>npm install express-generator -g\n</code></pre> <p>Reminder: passing the <code>-g</code> flag denotes a global installation. Global installations generally allow the module to be invoked from the command line, even outside of a NPM project directory.</p>"},{"location":"projects/crud-application/checkpoints/app-generation/checkpoint/#generate-an-express-application","title":"Generate an Express Application","text":"<p>Use the Express Generator to generate a skeleton directory structure for a new Express application, and name it something like \"my_app\":</p> <pre><code>express my_app --view=ejs\n</code></pre> <p>Note: the <code>--view=ejs</code> option specifies our choice to use EJS as a view template engine instead of the default template engine, Jade. If you don't know what this means, don't worry about it!</p> <p>This command should create a directory named <code>my_app/</code> which contains the following files:</p> <pre><code>bin/www\npublic/javascripts\npublic/images\npublic/stylesheets\npublic/stylesheets/style.css\nroutes/index.js\nroutes/users.js\nviews/index.ejs\nviews/error.ejs\napp.js\npackage.json\n</code></pre> <p>Don't worry if you're unfamiliar with the location and purpose of each of these files. We will examine each at the appropriate time.</p> <p>Do take a moment to observe presence of the <code>package.json</code> file, which indicates this project is an NPM project. The project's root directory doesn't contain an \"index.js\" file, but which file do you think is the main entry-point into this NPM project?</p>"},{"location":"projects/crud-application/checkpoints/app-generation/checkpoint/#install-package-dependencies","title":"Install Package Dependencies","text":"<p>Install package dependencies:</p> <pre><code>cd my_app\nnpm install\n</code></pre> <p>If you are using version control, remember to add a <code>node_modules/</code> line to your <code>.gitignore</code> file.</p>"},{"location":"projects/crud-application/checkpoints/app-generation/checkpoint/#run-a-local-web-server","title":"Run a Local Web Server","text":"<p>Run the default development web server:</p> <pre><code># Mac Terminal:\nDEBUG=my_app:* npm start\n\n# Windows Command Prompt:\nset DEBUG=myapp:* &amp; npm start\n</code></pre> <p>You should now be able to visit the application's home page in your browser at <code>localhost:3000</code>. Go check it out:</p> <p></p> <p>After demonstrating the ability to view the application locally in a browser, stop the web server by typing <code>ctrl-c</code>.</p> <p>Nice job. We would otherwise be done with this checkpoint, but before we go any further, let's install a different web server.</p>"},{"location":"projects/crud-application/checkpoints/app-generation/checkpoint/#upgrade-local-web-server","title":"Upgrade Local Web Server","text":"<p>One shortcoming of the default web server is that it requires us to restart the server each time we make a change to one of our application's files. During development, this happens a lot, so we'll want to upgrade our development web server. We can use a module called Nodemon, which will automatically detect file changes and obviate our need to take manual action.</p> <p>Install Nodemon globally:</p> <pre><code>npm install nodemon -g\n</code></pre> <p>Modify the web server start script in <code>package.json</code> to invoke <code>nodemon</code> instead of <code>node</code> when running the server:</p> <pre><code>// package.json\n...\n  \"scripts\": {\n    \"start\": \"nodemon ./bin/www\", // was: \"start\": \"node ./bin/www\",\n  },\n...\n</code></pre> <p>Take this opportunity to take a quick look at the <code>bin/www</code> file. The code in this file defines the web server which runs on port 3000 the application logic defined in \"app.js\".</p> <p>Restart the web server:</p> <pre><code># Mac Terminal:\nDEBUG=my_app:* npm start\n\n# Windows Command Prompt:\nset DEBUG=myapp:* &amp; npm start\n</code></pre> <p></p> <p>Congratulations. You've just created a new web application and viewed it locally in a browser. Commit your changes to version control. The next step will be to setup the application's navigational structure.</p>"},{"location":"projects/crud-application/checkpoints/app-navigation/checkpoint/","title":"CRUD Application Checkpoint V: Application Navigation and Routing","text":"<p>Establish the routing and navigational structure of your application.</p>"},{"location":"projects/crud-application/checkpoints/app-navigation/checkpoint/#objectives","title":"Objectives","text":"<ol> <li>Gain familiarity with Express application navigation, including routers and views.</li> </ol>"},{"location":"projects/crud-application/checkpoints/app-navigation/checkpoint/#prerequisites","title":"Prerequisites","text":"<ol> <li>CRUD Application Checkpoint IV: Application Generation</li> </ol>"},{"location":"projects/crud-application/checkpoints/app-navigation/checkpoint/#instructions","title":"Instructions","text":""},{"location":"projects/crud-application/checkpoints/app-navigation/checkpoint/#routing","title":"Routing","text":"<p>Notice in the \"app.js\" file the inclusion of two local modules:</p> <pre><code>var index = require('./routes/index');\nvar users = require('./routes/users');\n</code></pre> <p>These modules define the application's routing logic. Examine the \"routes/index.js\" file:</p> <pre><code>var express = require('express');\nvar router = express.Router();\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express' });\n});\n\nmodule.exports = router;\n</code></pre> <p>There's a lot going on in so few lines of code, so let me provide some commentary:</p> <pre><code>var express = require('express'); // loads the \"express\" module from the node_modules directory\nvar router = express.Router(); // initializes a new router object (see https://expressjs.com/en/api.html#router for documentation)\n\n/* GET home page. */\n// this .get() function enables the application's web server to handle a GET request\n// ... to the url path indicated by the first parameter, in this case '/'.\n// ... The second parameter is a function to be invoked when a GET request is made at the specified url path.\n// ... The callback function's first two parameters represent a request object and a response object.\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express' }); // calls the .render() function on the response object ...\n  // ... instructing the response to render a \"view\" file indicated by the first parameter ...\n  // ... and pass into it some custom data specified in the second parameter, which is an object.\n});\n\nmodule.exports = router; // enables other modules to load this one, and specifies the variable to load when this module is required\n</code></pre> <p>You don't have to internalize all of this at the moment. But what you can do is tweak the value of the <code>title</code> string, changing it from <code>'Express'</code> to something like 'My CRUD App'. Refresh the browser and see what happens:</p> <p></p>"},{"location":"projects/crud-application/checkpoints/app-navigation/checkpoint/#viewing","title":"Viewing","text":"<p>Congratulations, you have just passed some custom data from the \"routes/index.js\" file into the view file defined at \"views/index.ejs\". Examine the \"views.ejs\" file to see how that data is getting used.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\n    &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;\n    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>It comes as no surprise that this view file is making use of the <code>title</code> variable that was passed to it. In the same way we can pass static data from our routers to our views, we can pass resources to fulfill the promise of our CRUD application.</p> <p>Before we move on, take a moment to notice this \"view\" file. It looks a lot like HTML. It is HTML. Well, most of it. All of the code except for a few blocks which are encapsulated inside these special tags: <code>&lt;%= ... %&gt;</code>. This syntax is part of the magic of the EJS view engine that we configured when we first initialized our application. It executes any JavaScript code inside these tags and outputs the resulting HTML. Super cool, right? It's clear to see why EJS stands for \"Embedded JavaScript.\"</p>"},{"location":"projects/crud-application/checkpoints/app-navigation/checkpoint/#more-on-routing","title":"More on Routing","text":"<p>Navigate to http://localhost:3000/users in your browser. Notice there is also content on that page that is getting passed from the router defined in \"routes/users.js\". But this time, there is no corresponding view file - the router is passing data directly to the browser via the <code>send()</code> function.</p> <p></p> <p>Good to know. Instead of a message string, try passing a JSON object to the <code>res.send()</code> function, like <code>res.send({a:1, b:2, c:3})</code>. Then refresh the page to see what happens.</p> <p>Finally, add a link from the index page to the users page. Hint: it is as simple as editing the HTML code in the \"views/index.ejs\" file.</p> <p>Commit your project to version control. You are now ready to modify the routing logic of this application.</p>"},{"location":"projects/crud-application/checkpoints/app-receiving-data/checkpoint/","title":"CRUD Application Checkpoint VII - Reading Records","text":""},{"location":"projects/crud-application/checkpoints/app-receiving-data/checkpoint/#objectives","title":"Objectives","text":"<ol> <li>Gain exposure to modifying the routing logic of an Express web application.</li> <li>Practice passing data from an Express router and using it in a view.</li> <li>Practice agile, iterative software development techniques.</li> <li>Practice issuing GET requests.</li> </ol>"},{"location":"projects/crud-application/checkpoints/app-receiving-data/checkpoint/#prerequisites","title":"Prerequisites","text":"<ol> <li>CRUD Application Checkpoint VI: Navigation and Routing</li> </ol>"},{"location":"projects/crud-application/checkpoints/app-receiving-data/checkpoint/#instructions","title":"Instructions","text":"<p>Your mission is now to adapt and expand this application's routers and views to include a robots index page and a robot show page. First start by passing static hard-coded data from the router to the view. After you configure the routers and views to display static data, commit your code, then attempt to issue GET requests to fetch data from the provided API and pass that dynamic data to the view. If you are able to configure your routers to request data from the API and display the results on the page, you have succeeded in your mission!</p>"},{"location":"projects/crud-application/checkpoints/app-receiving-data/checkpoint/#adding-and-removing-views","title":"Adding and Removing Views","text":"<p>Feel free to delete the \"routes/users.js\" file because we don't need it. If you do, also remove, or comment-out the lines <code>var users = require('./routes/users');</code> and <code>app.use('/users', users);</code> from the \"app.js\" file. Then restart the web server and notice a 404 error that results from trying to navigate back to the users page. That's to be expected, as we removed that routing logic from our application.</p> <p>You can add new routers and views in the opposite manner that you just deleted the last one. First, make sure to add a line like <code>var users = require('./routes/users');</code> near the top of the \"app.js\" file. This loads the router logic and makes it available for further use by the application. Next, make sure to add a line like <code>app.use('/', users);</code> in the appropriate part of \"app.js\" file. This associates the router logic with a given URL path (I'd recommend always anchoring your routers to the root url \"/\"). Finally, create a new router file and optionally a new view file at the specified file paths, and configure them to match the prior examples.</p>"},{"location":"projects/crud-application/checkpoints/app-receiving-data/checkpoint/#displaying-static-data","title":"Displaying Static Data","text":"<p>Setup your routers to pass example data to their corresponding views.</p>"},{"location":"projects/crud-application/checkpoints/app-receiving-data/checkpoint/#routers","title":"Routers","text":"<p>Create a new \"robots\" router named \"routes/robots.js\" and paste in contents like the following:</p> <pre><code>var express = require('express');\nvar router = express.Router();\n\nvar myRobots = [\n  {\"_id\":\"123abc\", \"name\":\"r2d2\", \"description\":\"holds a secret message\", \"in_stock\":100},\n  {\"_id\":\"456def\", \"name\":\"bb8\", \"description\":\"rolls around\", \"in_stock\":75},\n  {\"_id\":\"789xyz\", \"name\":\"c3po\", \"description\":\"specializes in language translation\", \"in_stock\":50}\n] // static hard-coded data (for example)\n\n/* List Robots */\n\nrouter.get('/robots', function(req, res, next) {\n  console.log(\"LISTING ROBOTS\", myRobots)\n  res.render('robots/index', {robots: myRobots, title: \"All Robots\"});\n});\n\n/* Show Robot */\n\nrouter.get('/robots/:id', function(req, res, next) {\n  var robotId = req.params.id;\n  var robot = myRobots.find(function(robot){ return robot._id == robotId })\n\n  if (robot) {\n    console.log(\"SHOWING ROBOT\", robot)\n    res.render('robots/show', {robot: robot, title: `Robot ${robotId}`});\n  } else {\n    var errorMessage = `OOPS - COULDN'T FIND ROBOT ${robotId}`\n    console.log(errorMessage)\n    res.send(errorMessage)\n  }\n});\n\nmodule.exports = router;\n</code></pre> <p>Also configure your \"app.js\" file to use this robots router, anchoring its URLs relative to the root url (\"/\") by adding the two lines of code mentioned in the \"New Views\" section of this checkpoint exercise.</p> <p>Visit http://localhost:3000/robots to encounter an error complaining about a missing view. Don't worry, we will add the views now.</p>"},{"location":"projects/crud-application/checkpoints/app-receiving-data/checkpoint/#views","title":"Views","text":"<p>Add two new view files at \"views/robots/index.ejs\" and \"views/robots/show.ejs\", respectively.</p> <p>In the index view, paste in contents like the following:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\n    &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;\n\n    &lt;ul&gt;\n      &lt;% robots.forEach(function(robot){ %&gt;\n        &lt;li&gt;&lt;%= robot._id %&gt; - &lt;%= robot.name %&gt; - &lt;%= robot.description %&gt;&lt;/li&gt;\n      &lt;% }); %&gt;\n    &lt;/ul&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Nothing new here, except we are looping through each robot passed to the view, and adding a corresponding list item to the list.</p> <p>EJS Note: Notice the difference in EJS tags (<code>&lt;%= ... %&gt;</code> vs <code>&lt;% ... %&gt;</code>), where the former version, the one with the equals sign, \"outputs the value into the template\", and the latter, the \"scriptlet\" tag without an equals sign, is used for control flow. For more information see EJS Docs.</p> <p>In the show view, paste in contents like the following:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\n    &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;\n\n    &lt;p&gt;&lt;%= robot.name %&gt; - &lt;%= robot.description %&gt;&lt;/p&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This is a simple view which makes use of the robot object passed to it.</p> <p>Visit http://localhost:3000/robots again to see a list of robots on that page. Copy and paste one of the robot's identifiers into the browser to visit that robot's show page. Verify you see the robot's information on its corresponding show page.</p> <p>You may need to restart your web server to recognize the new files.</p> <p>Awesome job. Commit your changes to version control because you have reached a significant milestone in this checkpoint exercise.</p>"},{"location":"projects/crud-application/checkpoints/app-receiving-data/checkpoint/#displaying-dynamic-data","title":"Displaying Dynamic Data","text":"<p>It's time to replace our placeholder robots data with real data returned from the provided web service.</p> <p>Pick your favorite way of making client-side GET requests, and use that same library to make GET requests on the server-side. First install the respective third-party NPM module:</p> <pre><code># If you prefer fetch():\nnpm install node-fetch --save # https://www.npmjs.com/package/node-fetch\n\n# If you prefer d3:\nnpm install d3 --save # https://www.npmjs.com/package/d3\n\n# If you prefer jQuery:\nnpm install jquery --save # https://www.npmjs.com/package/jquery\n</code></pre> <p>Update the robots router to utilize the chosen method of issuing GET requests. If you chose <code>fetch()</code>, your router might look like this:</p> <pre><code>var express = require('express');\nvar router = express.Router();\nvar fetch = require('node-fetch');\n\n/* List Robots */\n\nrouter.get('/robots', function(req, res, next) {\n  var url = \"https://example.com/api/robots\"\n\n  fetch(url)\n    .then(function(response) {\n      response.json()\n        .then(function(json){\n          console.log(\"LISTING ROBOTS\", json)\n          res.render('robots/index', {robots: json, title: \"All Robots\"});\n        })\n    })\n    .catch(function(err){\n      console.log(\"GOT AN ERROR:\", err)\n      res.send({error: `OOPS - SERVER ERROR ${err}`});\n    })\n});\n\n/* Show Robot */\n\nrouter.get('/robots/:id', function(req, res, next) {\n  var robotId = req.params.id;\n  var errorMessage = `OOPS - COULDN'T FIND ROBOT ${robotId}`\n  var url = `https://example.com/api/robots/${robotId}`\n\n  fetch(url)\n    .then(function(response) {\n      response.json()\n        .then(function(json){\n          console.log(\"SHOWING ROBOT\", json)\n          res.render('robots/show', {robot: json, title: `Robot ${robotId}`});\n        })\n        .catch(function(err){\n          console.log(\"JSON PARSE ERROR\", err)\n          res.send(errorMessage)\n        })\n    })\n    .catch(function(err){\n      console.log(errorMessage)\n      res.send(errorMessage)\n    })\n});\n\nmodule.exports = router;\n</code></pre> <p>Notice we are invoking <code>res.send()</code> or <code>res.render()</code> from within the local scope of the request functions.</p> <p>When you are finished, you should be able to view the index page and show page in the browser. And when you do, there you should see real data from the API.</p> <p>Nice job. You are more than half-way finished with developing this application. Commit your changes to version control.</p>"},{"location":"projects/crud-application/checkpoints/app-receiving-data/checkpoint/#further-exploration","title":"Further Exploration","text":"<p>As you continue to create and develop additional views, you will most likely end up using shared HTML code such as navigation and footer links. If your application contains duplicate code across at least two of its views, DRY-up that shared code by abstracting-away any shared HTML content into a separate file called a \"view partial\" or a \"template\", and include it via an EJS snippet like <code>&lt;% include path/to/template %&gt;</code>. See https://github.com/tj/ejs#includes for documentation.</p> <p>Congrats, you are making life easier on yourself and preventing future effort and error by DRY-ing up much of that shared HTML code.</p>"},{"location":"projects/crud-application/checkpoints/app-sending-data/checkpoint/","title":"CRUD Application Checkpoint VIII - Creating, Updating, and Destroying Records","text":""},{"location":"projects/crud-application/checkpoints/app-sending-data/checkpoint/#objectives","title":"Objectives","text":"<ol> <li>Practice modifying the routing logic of an Express web application.</li> <li>Practice passing data from an Express router and using it in a view.</li> <li>Practice agile, iterative software development techniques.</li> <li>Practice issuing POST, PUT, and DELETE requests.</li> </ol>"},{"location":"projects/crud-application/checkpoints/app-sending-data/checkpoint/#prerequisites","title":"Prerequisites","text":"<ol> <li>CRUD Application Checkpoint VII - Reading Records</li> <li>POST Requests Overview</li> <li>AJAX POST Requests</li> </ol>"},{"location":"projects/crud-application/checkpoints/app-sending-data/checkpoint/#instructions","title":"Instructions","text":"<p>Follow these request-specific guides in order:</p> <ul> <li>Creating Records</li> <li>Destroying Records</li> <li>Updating Records</li> </ul>"},{"location":"projects/crud-application/checkpoints/app-sending-data/creating-records/","title":"CRUD Operations - Creating Records","text":""},{"location":"projects/crud-application/checkpoints/app-sending-data/creating-records/#instructions","title":"Instructions","text":"<p>Modify the application's user interface to include a button that links to a page that has a form on it. Configure the form such that when submitted, it makes a POST request to the proper API endpoint to create a new robot resource.</p>"},{"location":"projects/crud-application/checkpoints/app-sending-data/creating-records/#view","title":"View","text":"<p>Add a \"New\" button somewhere on the robots index page (\"views/robots/index.ejs\"):</p> <pre><code>&lt;a href=\"/robots/new\"&gt;\n  &lt;button&gt;+ New Robot&lt;/button&gt;\n&lt;/a&gt;\n</code></pre> <p>It should link to the New Robot page (<code>/robots/new</code>).</p> <p>Visit the index page in a browser, then click the \"New\" button, and notice a 404 (Not Found) error:</p> <p></p> <p>It's because we haven't yet configured a router to handle requests to this URL path. Let's do that now.</p>"},{"location":"projects/crud-application/checkpoints/app-sending-data/creating-records/#router","title":"Router","text":"<p>Update the robots router (\"/routes/robots.js\") to include the following logic:</p> <pre><code>// ...\n\n/* NEW */\n\nrouter.get('/robots/new', function(req, res, next) { // handle GET requests to the robots/new URL path\n  res.render('robots/new', { // render the robots/new.ejs view\n    title: \"New Robot\"\n  })\n})\n\n// ...\n</code></pre> <p>Navigate back to the index page, then click the \"New\" button again. You should see an error like this:</p> <p></p> <p>It's because we are telling the router to render a view that doesn't exist. Let's create it now.</p>"},{"location":"projects/crud-application/checkpoints/app-sending-data/creating-records/#new-robot-page","title":"New Robot Page","text":"<p>Create a new view called \"/views/robots/new.ejs\" and add an HTML form:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\n    &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;\n\n    &lt;a href=\"/robots\"&gt;&lt;%= \"&lt;&lt; back\" %&gt;&lt;/a&gt;\n\n    &lt;form id=\"new-robot-form\" action=\"https://example.com/api/robots\" method=\"POST\"&gt;\n      &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n      &lt;input id=\"name\" name=\"name\" type=\"text\" placeholder=\"My Robot\"&gt;\n      &lt;br&gt;\n\n      &lt;label for=\"description\"&gt;Description&lt;/label&gt;\n      &lt;textarea id=\"description\" name=\"description\" rows=\"10\" placeholder=\"Does all the things...\"&gt;&lt;/textarea&gt;\n      &lt;br&gt;\n\n      &lt;label for=\"in-stock\"&gt;Units in-stock&lt;/label&gt;\n      &lt;input id=\"in-stock\" name=\"in_stock\" type=\"number\" placeholder=\"0\"&gt;\n      &lt;br&gt;\n\n      &lt;button id=\"submit\" type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n\n    &lt;script src=\"https://code.jquery.com/jquery-3.2.1.min.js\"&gt;&lt;/script&gt;&lt;!-- ONLY NECESSARY IF YOU'RE SENDING REQUESTS VIA jQUERY --&gt;\n    &lt;script src=\"https://d3js.org/d3.v4.min.js\"&gt;&lt;/script&gt;&lt;!-- ONLY NECESSARY IF YOU'RE SENDING REQUESTS VIA D3 --&gt;\n    &lt;script type=\"text/javascript\"&gt;\n\n      // TODO: ADD JAVASCRIPT HERE TO SEND DATA TO THE WEB SERVICE WHEN THE FORM SUBMIT BUTTON IS PRESSED\n\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Refresh the page. You should now see a form:</p> <p></p> <p>Congratulations.</p> <p>If you were to fill out the form and click the \"Submit\" button, you'd submit a successful request to the web service, but you'd be redirected to the URL of a JSON response returned by the web service:</p> <p></p> <p>Not the best user experience. Let's fix it by overwriting the default behavior of this form submit button. We will make an AJAX request and redirect the user to the robots index page after the request has been fulfilled. Inside the <code>&lt;script&gt;</code> at the bottom of the page, use the following code:</p> <pre><code>var inputName = document.getElementById(\"name\")\nvar inputDescription = document.getElementById(\"description\")\nvar inputQuantityInStock = document.getElementById(\"in-stock\")\nvar submitButton = document.getElementById(\"submit\")\n\nsubmitButton.addEventListener(\"click\", submitForm, false)\n\nfunction submitForm(event) {\n  event.preventDefault() // important to leave this here because it prevents duplicate form submission!\n\n  var requestUrl = \"https://example.com/api/robots\"\n\n  var formData = {name: inputName.value, description: inputDescription.value, in_stock: inputQuantityInStock.value} // read input values\n  console.log(\"POSTING\", formData, \"TO\", requestUrl)\n\n  //\n  // Using fetch\n  //\n\n  //var requestOptions = {\n  //  method: \"POST\",\n  //  headers: {'Accept':'application/json', 'Content-Type':'application/json'},\n  //  body: JSON.stringify(formData)\n  //}\n\n  //fetch(requestUrl, requestOptions).then(function(response) {\n  //  if (response.ok) {\n  //    response.json().then(function(json){\n  //      window.location = '/robots' // REDIRECT USER TO ROBOTS INDEX PAGE\n  //    })\n  //  } else {\n  //    alert(\"OOPS THERE WAS AN ERROR\") // FURTHER EXPLORATION: send a more specific error message\n  //  }\n  //})\n\n  //\n  // Using jQuery\n  //\n\n  //$.post(requestUrl, formData)\n  //  .done(function(data, textStatus, xhr) {\n  //    window.location = '/robots' // REDIRECT USER TO ROBOTS INDEX PAGE\n  //  })\n  //  .fail(function(xhr, textStatus, errorThrown){\n  //    alert(\"OOPS THERE WAS AN ERROR\") // FURTHER EXPLORATION: send a more specific error message\n  //  })\n\n  //\n  // Using D3\n  //\n\n  //d3.request(requestUrl)\n  //  .header(\"Accept\", \"application/json\")\n  //  .header(\"Content-Type\", \"application/json\")\n  //  .on(\"error\", function(error) {\n  //    alert(\"OOPS THERE WAS AN ERROR\") // FURTHER EXPLORATION: send a more specific error message\n  //  })\n  //  .on(\"load\", function(xhr) {\n  //    window.location = '/robots' // REDIRECT USER TO ROBOTS INDEX PAGE\n  //  })\n  //  .send(\"POST\", JSON.stringify(formData))\n\n}\n</code></pre> <p>Refresh the page, fill out the form, and click the \"Submit\" button. You should now be redirected to the robots index page, where you see the new robot you created in the list. Nice job. This is a better user experience.</p> <p>Feel satisfied that your application is now sending POST requests to the web service and handling the resulting responses. This is perhaps one of the hardest parts of the CRUD Application project. And you've mastered it.</p>"},{"location":"projects/crud-application/checkpoints/app-sending-data/creating-records/#further-exploration","title":"Further Exploration","text":"<p>Try to submit the form without filling in all required fields, and you will see an error has occurred. Drop a <code>debugger</code> statement inside the error-handling part of your AJAX request function and you'll be able to inspect the error response sent by the web service. Parse the error response to find a more specific message, then pass that information along in an alert message to the user to provide a better user experience.</p>"},{"location":"projects/crud-application/checkpoints/app-sending-data/destroying-records/","title":"CRUD Operations - Destroying Records","text":""},{"location":"projects/crud-application/checkpoints/app-sending-data/destroying-records/#instructions","title":"Instructions","text":""},{"location":"projects/crud-application/checkpoints/app-sending-data/destroying-records/#view","title":"View","text":"<p>Add a \"Delete\" button to the robot show page.</p> <p>Add an event listener to the \"Delete\" button such that when clicked, it sends a <code>DELETE</code> request to the proper API endpoint. When the client receives a return response from the API, it should redirect the user to the robots index page.</p>"},{"location":"projects/crud-application/checkpoints/app-sending-data/updating-records/","title":"CRUD Operations - Updating Records","text":""},{"location":"projects/crud-application/checkpoints/app-sending-data/updating-records/#instructions","title":"Instructions","text":""},{"location":"projects/crud-application/checkpoints/app-sending-data/updating-records/#routing-to-the-edit-page","title":"Routing to the Edit Page","text":"<p>Add an \"Edit\" button (or link) to the robot show page. When the \"Edit\" button is clicked it should bring the user to a different destination URL, for example to <code>/robots/:id/edit</code>, where <code>:id</code> is the robot's unique identifier.</p> <p>Click the button to find an error complaining about a routing issue. Create a router function to handle requests to this URL path and respond by rendering a view, for example \"views/robots/edit.ejs\", a.k.a the \"edit page\".</p> <p>Refresh the page and click the \"Edit\" button again to find an error complaining about the edit page not existing. Create it now. The page should contain a robots form. The robots form should be very similar to the one you used during the Creating Records exercise, except you will need to pre-populate form input values using the actual <code>robot</code> values you pass from the router to the form.</p>"},{"location":"projects/crud-application/checkpoints/app-sending-data/updating-records/#pre-populating-form-input-values","title":"Pre-populating Form Input Values","text":"<p>Refresh the edit page to find an error complaining about the <code>robot</code> variable being undefined. Edit the router function now to make a <code>GET</code> request to the proper API endpoint to get the robot's information and pass it to the edit page.</p> <p>Refresh the edit page to find the form pre-populated with the robot's information.</p> <p>Confirm your ability to modify form input values. Next we will prepare to submit the form.</p>"},{"location":"projects/crud-application/checkpoints/app-sending-data/updating-records/#submitting-the-form","title":"Submitting the Form","text":"<p>Ensure that when the form \"Submit\" button is clicked, it issues a <code>PUT</code> request to the proper API endpoint, passing the appropriate data in the request body. When the client receives a return response from the API, it should either redirect to the robot show page, or it should display error message(s) to the user.</p> <p>You should be able to leverage the Creating Records exercise to find an example of how to make a request like this and redirect the user appropriately.</p>"},{"location":"projects/crud-application/checkpoints/interactivity/checkpoint/","title":"CRUD Application Checkpoint III: Interactivity","text":"<p>Use a front-end development framework to add placeholder alerts and other interactive features to your CRUD Application.</p>"},{"location":"projects/crud-application/checkpoints/interactivity/checkpoint/#objectives","title":"Objectives","text":"<ol> <li>Practice using jQuery and Twitter Bootstrap JavaScript plugins to add interactive features to a web page.</li> <li>Learn how to use JavaScript to listen for and respond to click events.</li> </ol>"},{"location":"projects/crud-application/checkpoints/interactivity/checkpoint/#prerequisites","title":"Prerequisites","text":"<ol> <li>CRUD Application Checkpoint II: Style</li> <li>Personal Website Checkpoint III: Interactivity</li> </ol>"},{"location":"projects/crud-application/checkpoints/interactivity/checkpoint/#instructions","title":"Instructions","text":"<p>Continue development of your CRUD Application by adding interactive features. Namely, the only features you need to implement are logging and alerts. Reference the alert functionality of https://react-robots.herokuapp.com/.</p> <p></p>"},{"location":"projects/crud-application/checkpoints/interactivity/checkpoint/#logging","title":"Logging","text":"<p>For each non-link button you see (e.g. \"Recycle\", \"Edit\", and \"Delete\"), when that button is clicked, log a descriptive message to the console to indicate which button has been clicked. Don't worry if these buttons aren't really doing anything at the moment. By listening for button clicks, we are preparing to implement their true functionality later in the semester.</p>"},{"location":"projects/crud-application/checkpoints/interactivity/checkpoint/#alerts","title":"Alerts","text":"<p>For each non-link button you see (e.g. \"Recycle\", \"Edit\", and \"Delete\"), when that button is clicked, display a \"flash-message\" alert at the top of the page. Use placeholder text for now like \"RECYCLED ALL THE ROBOTS\", \"EDITED ROBOT #XXXX\" and \"DELETED ROBOT #XXXXX\". Ensure each alert contains an \"X\" button that when clicked makes the alert disappear. Again, don't worry that the buttons aren't doing what the alert is saying.</p>"},{"location":"projects/crud-application/checkpoints/structure/checkpoint/","title":"CRUD Application Checkpoint I: Structure","text":"<p>Establish the preliminary structure of your CRUD web application.</p>"},{"location":"projects/crud-application/checkpoints/structure/checkpoint/#objectives","title":"Objectives","text":"<ul> <li>Practice HTML.</li> <li>Practice software version control.</li> <li>Practice website hosting.</li> </ul>"},{"location":"projects/crud-application/checkpoints/structure/checkpoint/#prerequisites","title":"Prerequisites","text":"<ol> <li>Personal Website Checkpoint I: Structure</li> </ol>"},{"location":"projects/crud-application/checkpoints/structure/checkpoint/#instructions","title":"Instructions","text":"<p>Create a new website that mimics the structure of https://prof-rossetti.github.io/crud-app-beginnings/robots. Don't worry about the home page of that site. Just focus on the <code>/robots</code> pages.</p> <p>Also ignore that application's style and interactive features. See detailed instructions, below, to get a better sense of exercise scope. You've met the expectations of this checkpoint if your app looks something like this:</p> <p></p>"},{"location":"projects/crud-application/checkpoints/structure/checkpoint/#configure-remote-repository","title":"Configure Remote Repository","text":"<p>Create a new public repository on GitHub. Name it \"robots-app\" and describe as \"create, read, update, and destroy robots!\" Initialize it with a README, and choose the MIT license. Finally, click \"Create repository\".</p> <p></p> <p>Use your Git client to copy the repository down to your computer for local development.</p> <p>You may need to reference its remote address. Find the remote address on the repository's home page.</p> <p></p> <p>If you are using the git CLI:</p> <pre><code>git clone REMOTE_ADDRESS\n</code></pre>"},{"location":"projects/crud-application/checkpoints/structure/checkpoint/#develop-locally","title":"Develop Locally","text":""},{"location":"projects/crud-application/checkpoints/structure/checkpoint/#edit-html","title":"Edit HTML","text":"<p>After copying the repository to your local machine, create the following files in your repository's root directory:</p> <ul> <li>\"index.html\"</li> <li>\"bb8.html\"</li> <li>\"c3po.html\"</li> <li>\"r2d2.html\"</li> <li>\"new.html\"</li> </ul> <p>Populate each page with basic HTML file structure, including a consistent header and footer. Ensure the header of each page contains a link back to the \"index.html\". Ensure the footer of each page contains a link to your source code (GitHub repository).</p>"},{"location":"projects/crud-application/checkpoints/structure/checkpoint/#list","title":"List","text":"<p>In the \"index.html\" file, insert a <code>table</code> with a header row and one row per robot.</p> <p>Each row should contain the following columns:</p> <ul> <li>Id</li> <li>Name</li> <li>Description</li> <li>Created At</li> <li>Updated At</li> </ul> <p>The contents of each row should describe that row's robot. The name of each robot should link to its dedicated \"show page\" (i.e. the row labeled \"c3po\" should contain a link to \"c3po.html\").</p> <p>Commit your changes.</p>"},{"location":"projects/crud-application/checkpoints/structure/checkpoint/#show","title":"Show","text":"<p>For each robot's individual \"show page\", create either a table or list or simple paragraph text displaying the robot's information:</p> <ul> <li>Id</li> <li>Name</li> <li>Description</li> <li>Created At</li> <li>Updated At</li> </ul> <p>Commit your changes.</p>"},{"location":"projects/crud-application/checkpoints/structure/checkpoint/#new","title":"New","text":"<p>Somewhere on the \"index.html\" page, insert a link to the \"new.html\" file.</p> <p>Inside the \"new.html\" file, insert a <code>form</code> element. The form should contain the following elements:</p> <ul> <li>text <code>input</code> accompanied by a <code>label</code> called \"Name\"</li> <li><code>textarea</code> input accompanied by a <code>label</code> called \"Description\"</li> <li><code>button</code> called \"Submit\"</li> </ul> <p>If you're interested, also add to the form:</p> <ul> <li>a <code>select</code> element with multiple nested <code>option</code> elements</li> <li>a group of \"radio\" type <code>input</code> elements inside their own <code>div</code></li> <li>a \"checkbox\" type <code>input</code> element</li> </ul> <p>Don't worry about styling the form or trying to make it work. We will take care of these tasks during later checkpoints.</p> <p>Commit your changes and push them to your remote repository.</p> <p>Nice job!</p>"},{"location":"projects/crud-application/checkpoints/style/checkpoint/","title":"CRUD Application Checkpoint II: Style","text":"<p>Use a front-end development framework to establish the preliminary structure and style for your CRUD Application.</p>"},{"location":"projects/crud-application/checkpoints/style/checkpoint/#objectives","title":"Objectives","text":"<ol> <li>Practice using a front-end web development framework.</li> <li>Practice responsive web site design.</li> <li>Practice HTML and CSS.</li> <li>Use version control to revert to previous repository versions.</li> </ol>"},{"location":"projects/crud-application/checkpoints/style/checkpoint/#prerequisites","title":"Prerequisites","text":"<ol> <li>CRUD Application Checkpoint I: Structure</li> <li>Personal Website Checkpoint II: Style</li> </ol>"},{"location":"projects/crud-application/checkpoints/style/checkpoint/#accompanying-materials","title":"Accompanying Materials","text":"<ul> <li>Project Repository</li> <li>Commit History</li> <li>Live Demo</li> <li>Screencast of Development Process</li> </ul>"},{"location":"projects/crud-application/checkpoints/style/checkpoint/#instructions","title":"Instructions","text":"<p>Create from scratch a web site that mimics the structure and style of https://react-robots.herokuapp.com/. Don't worry about that application's interactive functionality.</p> <p></p>"},{"location":"projects/crud-application/checkpoints/style/checkpoint/#review","title":"Review","text":"<p>For step-by-step guidance, see that project's commit history. For each commit, click its link to view file changes and browser screenshots.</p> Sequence Commit Message Commit Identifier 1 Create a new web page 0676136 2 Install twitter bootstrap 5815818 3 Add a table 6947a23 4 Style the table edb342a 5 Stop using placeholder content fd2d2da 6 Use placeholder links de7b654 7 Initial commit a91b5c8 8 Configure remote repository e635eb1 9 Merge branch 'master' of github.com:prof-rossetti/crud-app-beginnings 3aa9ffe 10 Add links to remote repository 80ab2d2 11 Add self-referential homepage link 995d526 12 Add links to robot show pages ceec412 13 Move robots table to robots index, replace home page content ef65f94 14 Convert absolute links to relative links to try to work around GitHub Pages routing errors d1a7709 15 Add links to live site 1800aa2 16 Apply consistent design and navigation to bb8 show page fbc3c99 17 Apply consistent design and navigation to remaining show pages 93f8e8e 18 Specify robot identifier in a heading 615cad1 19 Use links that look like buttons to navigate to the new page from all other pages 66b53e5 20 Add form to new page 455e997"},{"location":"projects/crud-application/checkpoints/style/checkpoint/#replay","title":"Replay","text":"<p>For a truly immersive experience, step through each of the commits to review the source code and preview the results in a browser.</p>"},{"location":"projects/crud-application/checkpoints/style/checkpoint/#setup","title":"Setup","text":"<p>First clone the repository to your local machine and navigate to it.</p> <pre><code>git clone git@github.com:prof-rossetti/crud-app-beginnings.git\ncd crud-app-beginnings/\n</code></pre> <p>In a new terminal window or tab, start a local web server:</p> <pre><code># Mac Terminal:\npython -m SimpleHTTPServer 8888\n\n# Windows Command Prompt:\npython \u2013m http.server 8888\n</code></pre> <p>Visit the site at http://localhost:8888/robots/.</p>"},{"location":"projects/crud-application/checkpoints/style/checkpoint/#step-by-step","title":"Step-by-step","text":"<p>Start your step-by-step review by reverting to the first commit.</p> <pre><code>git checkout 0676136 # both the long version of the commit's identifier (e.g. 067613652e924e984561c0b07ffb98bb7ac26c7c) and the short version (e.g. 0676136) can be used to reference the first commit. Reference the commit list and show pages on GitHub, or your local `git log` results to find the commit identifiers.\n</code></pre> <p>Don't worry if you see a warning about being on a 'detached HEAD' state.</p> <p>Refresh the browser to see what the site looked like back at that version. Study the source code at that version by viewing the files in your text editor.</p> <p>Repeat this process for each commit until you reach the last one.</p> <p>When you are finished, revert back to the most recent version (i.e. that of the current \"master\" branch) and your repository will no longer be in a 'detached HEAD' state:</p> <pre><code>git checkout master\n</code></pre> <p>Congratulations, you are starting to utilize the full power of version control!</p>"},{"location":"projects/data-visualization/peer-evaluation/","title":"Data Visualization Peer Evaluation","text":"<p>Fill out this Data Visualization Peer Evaluation Form when instructed to do so by the professor.</p> <p>This peer evaluation is worth 5% of your final grade. Thank you for taking the time to review and evaluate your peers' websites. As you complete this evaluation, please maintain an objective state of mind, focusing on the merits of the projects you are evaluating, not any personal relationships you may have with your peers. Remember, your evaluations are anonymous, and your peers will not know who evaluated their projects.</p> <p>At the appropriate time, you will receive an email containing a list of five peer projects for you to evaluate. For each of these five peer projects:</p> <p>1) Paste the project link into the appropriate section of the form to indicate which project you are evaluating.   2) Visit the project link in a browser, and take a few moments to navigate around that site to get a good feel for it.   3) Think about what you like about the site, and/or what you think could be improved, then type your comments into the appropriate section in the form.   4) Assign the project a number score from 1 (poor) to 10 (awesome) in the appropriate section.</p> <p>Repeat for each assigned peer project, then submit.</p>"},{"location":"projects/data-visualization/project/","title":"Data Visualization Project","text":"<p>Plan, design, and develop a one-page website which visualizes an open dataset. Your data visualization can take the form of a chart, graph, map, or other related representation. It should tell a story about the data in a manner which allows the viewer to draw a conclusion or learn something.</p> <p></p> <p></p> <p></p>"},{"location":"projects/data-visualization/project/#instructions","title":"Instructions","text":""},{"location":"projects/data-visualization/project/#plan","title":"Plan","text":""},{"location":"projects/data-visualization/project/#choose-an-open-dataset","title":"Choose an Open Dataset","text":"<p>Your data visualization must exist for the purpose of representing information. First, search the Internet to find a dataset which resonates with you. Try looking in open data portals such as:</p> <ul> <li>http://databank.worldbank.org/data/home.aspx</li> <li>http://data.un.org/</li> <li>https://www.data.gov/</li> <li>https://www.census.gov/</li> <li>https://www.healthdata.gov/search/type/dataset</li> <li>http://permitdata.org/#samples</li> <li>https://data.ct.gov/</li> <li>https://data.hartford.gov/</li> <li>http://ctdata.org/</li> <li>http://www.ctdatahaven.org/data-resources</li> </ul> <p>Alternatively, you may choose to use data that comes from an API or other web service. If you use data from an API, you are responsible for figuring out how to authenticate to that service, but feel free to ask the professor for authentication help. Relevant example APIs include but are in no way limited to:</p> <ul> <li>https://developer.yahoo.com/weather/</li> <li>https://darksky.net/dev/docs/forecast</li> <li>https://api.citybik.es/v2/</li> <li>https://developer.nytimes.com/</li> </ul> <p>Regardless of the source, your chosen dataset will likely exist in JSON, CSV, or XML format. If you choose to include a copy of the dataset in your repository, put the file(s) in a directory called <code>/data</code>. For example: <code>data/heart-surgeries.json</code>.</p> <p>Note: You should avoid manually manipulating the dataset except in trivial ways. If your dataset requires significant transformation, that process should be done with a script or other automated repeatable process.</p> <p>After you have selected a dataset and observed its structure and content, create a document in your project repository called \"DATA.md\" to objectively describe the dataset contents in English and provide a link to the dataset's source. Make sure to include definitions of any words or terms that are not self-explanatory (i.e. a \"data dictionary\").</p>"},{"location":"projects/data-visualization/project/#design","title":"Design","text":"<p>After familiarizing yourself with your chosen dataset, design a data visualization by producing drawings or other illustrative representations. You may choose to use pencil and paper, whiteboard, digital design tools, etc. If your design documents don't start in digital format, take a picture or otherwise scan them into digital format. Include all design documents in your project repository in a directory called <code>/design</code>.</p>"},{"location":"projects/data-visualization/project/#implement","title":"Implement","text":"<p>Once you are satisfied with your initial design, begin developing your data visualization.</p> <p>Continue developing your data visualization until you are satisfied with its representation of your original design and its ability to meet its objectives (i.e. to tell a story).</p> <p>Ensure the data visualization is hosted and available for public consumption on the Internet.</p>"},{"location":"projects/data-visualization/project/#submission-instructions","title":"Submission Instructions","text":"<p>When your data visualization is ready for evaluation, add its identifying information, including your GitHub username, a link to your site's repository, and a link to your hosted site, to the submissions list. Use the following workflow to accomplish this:</p> <ol> <li>Fork this repository to your own account.</li> <li>Edit the submissions list in your forked repo via the online editor, or by downloading your forked repo, making local commits, and pushing them back up to GitHub.</li> <li>Submit a Pull Request for your changes to be merged into this repo.</li> </ol> <p>NOTE: If you would prefer for any reason to submit your work privately, you may alternatively send the professor your links via email or Slack DM. Your project will still be evaluated, and peer-evaluated, but its identifying information will not be publicly accessible as part of this course repository.</p> <p>Also be prepared to deliver a 5-10 minute presentation to demonstrate usage of your website and describe your planning and design process, as desired.</p>"},{"location":"projects/data-visualization/project/#evaluation-criteria","title":"Evaluation Criteria","text":"<p>Your data visualization will be evaluated according to the following criteria:</p> criteria weight Planning and Design 25% Implementation 50% Peer Evaluation 25% <p>Partial credit may be given to highlight areas of improvement.</p>"},{"location":"projects/data-visualization/project/#planning-and-design-evaluation","title":"Planning and Design Evaluation","text":"<p>Your data visualization planning and design documents will be evaluated for presence, clarity, and thoroughness. This includes checking for presence of a data source attribution link, and a short description of the dataset.</p>"},{"location":"projects/data-visualization/project/#implementation-evaluation","title":"Implementation Evaluation","text":"<p>Your data visualization implementation will be evaluated based on its demonstrated ability to meet all of the following criteria:</p> <ol> <li>Is hosted on the Internet and publicly accessible.</li> <li>Contains clear, concise, and engaging content free of typographical or grammatical mistakes.</li> <li>Creative and usable design free of usability quirks or bugs.</li> <li>Contains exactly one HTML page: \"index.html\"</li> <li>Contains minimal HTML markup within the \"index.html\" - at most three to five to maybe ten elements (not a hard rule, just know the purpose of this project is to use JavaScript to manipulate the DOM instead of hard-coding HTML elements).</li> <li>Contains at least one internal <code>&lt;script&gt;</code> or external JavaScript script.</li> <li>Demonstrates an ability to use JavaScript to manipulate the DOM.</li> <li>Contains at least one input element (e.g. <code>button</code>, <code>select</code>, etc.) which can be used to update the visual display without refreshing the page.</li> </ol>"},{"location":"projects/data-visualization/project/#peer-evaluation","title":"Peer Evaluation","text":"<p>All members of the learning community, including the professor, will evaluate an assigned list of five submitted data visualizations, and will assign each peer project a score from 1 to 10. A weighted average of these individual scores will produce the overall Peer Evaluation Score.</p>"},{"location":"projects/freestyle/project/","title":"Group \"Freestyle\" Project","text":"<p>In groups of two to four, students will propose, plan and implement their own custom web-based business technology products of interest.</p>"},{"location":"projects/freestyle/project/#objectives","title":"Objectives","text":"<ol> <li>Engage in a deliberate lifecycle of software planning, design, and implementation.</li> <li>Produce a web-based technology product for business purposes.</li> <li>Leverage technology as an outlet for creativity.</li> <li>Have fun!</li> </ol>"},{"location":"projects/freestyle/project/#requirements","title":"Requirements","text":"<p>Students have a large degree of flexibility in choosing what kind of product to deliver, however it should meet at least the following criteria:</p> <ol> <li>Serves some practical business purpose, and</li> <li>Either:<ul> <li>A) Leverages Internet technologies introduced in this course (e.g. HTML, CSS, JavaScript), or</li> <li>B) Leverages data shared programmatically over the Internet (for example from a third-party API or website)</li> </ul> </li> </ol> <p>Acceptable products include, but are not limited to:</p> <ul> <li>Website (beginner)</li> <li>Web Application (intermediate)</li> <li>API Client that gets its data by issuing HTTP requests to a third-party API (intermediate)</li> <li>Web Scraper that gets its data by issuing HTTP requests to a third-party website (intermediate)</li> <li>Mobile Application (advanced, choose at your own risk!)</li> </ul>"},{"location":"projects/freestyle/project/#instructions-and-deliverables","title":"Instructions and Deliverables","text":""},{"location":"projects/freestyle/project/#group-selection","title":"Group Selection","text":"<p>Optionally confer with some of your colleagues about forming a team. Each student should fill out this Group Selection Form by the designated due date. The form asks whether you already have a group you'd like to work with, or whether you'd like the professor to match you with a group. Even if you have a pre-selected team, all team members should fill out the form separately. The form also asks you to share any preliminary project ideas you may have.</p>"},{"location":"projects/freestyle/project/#planning-and-design-document","title":"Planning and Design Document","text":"<p>After your group compositions are approved or assigned by the professor, gather with your teammates to ideate a potential web-based product that can serve one or more practical business purposes. This can be a website or web application, or it can be a program that makes use of data from another third-party website or API. If you get stuck, think of an Internet-based platform or service that you use (e.g. Twitter), and see if that service provides an API, and then think of interesting ways to use the provided data.</p> <p>Create a planning document in PDF format which details the business objective(s) of your product. There are no hard requirements in terms of the document's length font size, or line spacing, however reasonable length including embedded images could be around seven pages. See the sub-sections below for additional prompts about what kind of content to include in this document.</p> <p>By the designated due date, upload your Planning and Design Document to Canvas (one per group).</p>"},{"location":"projects/freestyle/project/#problem-statement-user-needs","title":"Problem Statement / User Needs","text":"<p>What problem does your product solve? Or what opportunity does it address? For example, does it save someone time? Or does it enable someone to perform certain tasks they wouldn't otherwise be able to perform?</p> <p>The planning document should describe who your users are, how they'll use the product, and why. Who will your product help, and how? Convey the user needs in terms of \"[who] needs [what] so they can [why]\".</p>"},{"location":"projects/freestyle/project/#proposed-solution-desired-functionality","title":"Proposed Solution / Desired Functionality","text":"<p>What does your product do, and how does it address the stated problem? What is its desired functionality?</p>"},{"location":"projects/freestyle/project/#information-inputs-and-outputs","title":"Information Inputs and Outputs","text":"<p>What information inputs (e.g. API data, user inputs, etc.) does your product need in order to perform its desired functionality?</p> <p>What information outputs (e.g. compiled reports, data aggregations, notification messages, etc.) will your product need to produce, display, or send in order to perform its desired functionality?</p>"},{"location":"projects/freestyle/project/#technical-feasibility-analysis","title":"Technical Feasibility Analysis","text":"<p>Investigate the degree to which your product is implementable from a technical perspective. What technologies, tools, or services (e.g. third-party APIs) will your proposed product depend on? Have you researched the documentation, tutorials, and examples for those technologies? Have you demonstrated your ability to use them? How's it going? What do you \"know you know\" vs \"know you don't know\"? Are there any steps remaining to complete your investigation?</p>"},{"location":"projects/freestyle/project/#system-components-and-feature-prioritization","title":"System Components and Feature Prioritization","text":"<p>Are you able to break-up your system's components into smaller, more manageable pieces (i.e. \"features\") such that someone could work on one logically-related feature at a time? Which feature(s) are the most important to implement, and which are the \"nice to haves\"? Which features will you implement first, and why? As applicable, how do you propose to split up the work between all group members?</p>"},{"location":"projects/freestyle/project/#product-design","title":"Product Design","text":"<p>As applicable, design the look and feel of your product by creating drawings or other illustrative representations. You may choose to use pencil and paper, whiteboard, or digital design tools. If your design documents don't start in digital format, take a picture or otherwise scan them into digital format. Then embed them into your Planning and Design Document as applicable.</p>"},{"location":"projects/freestyle/project/#implementation","title":"Implementation","text":"<p>Once you are satisfied with the planned objectives of the product and its ability to meet those objectives as designed, begin developing your product.</p> <p>If you're developing a website or web application, you may use a front-end web development framework  like Twitter Bootstrap  to reduce development efforts and conform to familiar web standards. Regardless of what kind of product you're making, you may also leverage any starter code provided by the professor as the basis of your own product, as long as you provide proper attribution. If you're not sure where to start, feel free to ask the professor for support, including for some example code to help you get started!</p> <p>Continue developing your product until you are satisfied with its ability to meet its stated objectives. If the stated objectives are large in scope, it's OK to implement a small sub-component of the overall functionality.</p> <p>If your project is a website or web app, it should ideally be hosted and available for public consumption over the Internet. Websites should be hosted via GitHub Pages, while web applications should be hosted on a Heroku server. If you need help deploying an application to Heroku, ask the professor for support.</p> <p>Your final project code should reside in a repository on GitHub. By the designated due date, submit the Project Submission Form (one per group) and specify the URL of your project repository.</p>"},{"location":"projects/freestyle/project/#presentation","title":"Presentation","text":"<p>During the designated class period, deliver a seven minute presentation to describe your product and demonstrate its implementation. The implementation need not be entirely complete by this time, but ideally you'll have at least some functionality to show.</p> <p>Before you deliver your presentation, upload your presentation document in PDF format to Canvas (one per group).</p>"},{"location":"projects/freestyle/project/#peer-review","title":"Peer Review","text":"<p>Attend class on the designated presentation day, and fill out a Peer Review Form to evaluate each other group presentation.</p>"},{"location":"projects/freestyle/project/#evaluation","title":"Evaluation","text":"<p>The Group Selection and Peer Review forms will be evaluated on the basis of whether or not they have been submitted on-time.</p> <p>The Planning and Design Document will be evaluated on the basis of its ability to address the prompt, as represented by the following rubric:</p> Category Weight Problem Statement / User Needs 20% Info Inputs and Outputs 20% Proposed Solution / Desired Functionality 20% Proposed Design 20% Thoroughness and clarity of analysis 20% <p>The Presentation will be evaluated on the basis of content and delivery. Strive to deliver presentations with clarity and confidence. Impressive and memorable demonstrations are a great way to earn top grades. NOTE: Peer evaluations will be factored into the final presentation grade.</p> <p>The Implementation will be evaluated on its ability to function as desired, as represented by the following rubric:</p> Category Requirement Weight Satisfies Proposed Objectives Addresses a business problem discussed in the accompanying planning document, in a manner generally consistent with the plan discussed in that document 20% Technology Requirements Uses web-based technologies, issues HTTP requests, or otherwise leverages the Internet 20% Uniqueness and Individuality Exhibits creativity, and a unique set of functionality 20% User Experience Provides a simple, pleasant, and intuitive experience for the user, with clear usage instructions, free of idiosyncrasies or errors 20% Dev Process and Documentation Submitted via GitHub repository which includes a README file with installation and usage instructions (e.g. commands for how to view the website or run the program) 20% <p>NOTE: these rubrics are tentative, and may be subject to adjustments during the grading process</p>"},{"location":"projects/personal-website/project/","title":"Website Project","text":""},{"location":"projects/personal-website/project/#objectives","title":"Objectives","text":"<ol> <li>Engage in a deliberate lifecycle of website planning, design, and implementation.</li> <li>Produce a basic website from conception to delivery.</li> <li>Leverage technology as an outlet for creativity.</li> </ol>"},{"location":"projects/personal-website/project/#instructions","title":"Instructions","text":"<p>Plan, design, and develop a website for personal or professional purposes. The website can feature a person, place, event, business, or serve some other practical purpose. The website's content can be real or fictitious.</p> <p>You are encouraged to leverage a front-end web development framework like Twitter Bootstrap to reduce development efforts.</p>"},{"location":"projects/personal-website/project/#requirements","title":"Requirements","text":"<p>The website should include at least three different pages, and maintain consistent style and navigation across pages.</p> <p>The website should contain each of the following HTML elements:</p> <ul> <li>Headings (i.e. <code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, etc.)</li> <li>Dividers (i.e. <code>&lt;div&gt;</code>)</li> <li>Paragraphs (i.e. <code>&lt;p&gt;</code>)</li> <li>Hyperlinks (i.e. <code>&lt;a&gt;</code>)</li> <li>Lists (i.e. <code>&lt;ul&gt;</code> or <code>&lt;ol&gt;</code>, in conjunction with multiple <code>&lt;li&gt;</code> elements)</li> <li>Images (i.e. <code>&lt;img&gt;</code>)</li> <li>HTML5 Semantic Elements (i.e. <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;nav&gt;</code>, etc.)</li> </ul> <p>The website should use at least one CSS stylesheet, either internal or external.</p> <p>The website should ideally be \"responsive\" when the window is resized, for example to mobile device width.</p>"},{"location":"projects/personal-website/project/#phase-1-planning","title":"Phase 1: Planning","text":"<p>First create a planning document which details the objective(s) of the website. What information should it convey? To whom? And why? </p> <p>Optionally include a copy of the planning document in your project repository, for example in a subdirectory called \"planning\".</p>"},{"location":"projects/personal-website/project/#phase-2-designing","title":"Phase 2: Designing","text":"<p>Then design the look and feel of the website by producing drawings or other illustrative representations. You may choose to use pencil and paper, whiteboard, digital design tools, etc. If your design documents don't start in digital format, take a picture or otherwise scan them into digital format. </p> <p>Optionally include all design documents in your project repository, for example in a subdirectory called \"design\".</p>"},{"location":"projects/personal-website/project/#phase-3-implementation","title":"Phase 3: Implementation","text":"<p>Once you are satisfied with the website's plan and design, begin developing it.</p> <p>Continue developing the website until you are satisfied. Incrementally save new versions of your website code via the GitHub Desktop software, and push them up to GitHub.</p> <p>Ensure the website is hosted and available for public consumption on the Internet, for example via GitHub Pages.</p>"},{"location":"projects/personal-website/project/#evaluation","title":"Evaluation","text":"<p>Websites will be evaluated according to the requirements set forth above, as summarized by the rubric below:</p> Category Requirement Weight Website Hosting Website is publicly accessible on the Internet (i.e. hosted via GitHub Pages). 20% Website Structure Website has at least three navigable pages, with consistent navigation across all pages. 15% Website Structure HTML documents are reasonably well organized and include the required elements. 15% Website Style Website is reasonably well styled. 10% Website Style Website is \"responsive\" when window is resized to a mobile device width. 10% Website Content Website content is creative and unique. 10% Dev Process Submitted via remote Git repository which reflects an incremental revision history. 20% <p>This rubric is tentative, and may be subject to slight adjustments during the grading process.</p> <p>If experiencing navigation or functionality error(s) while evaluating the website, evaluators are advised to reduce the grade by between 4% and 25%, depending on the circumstances and severity of the error(s).</p> <p>In recognition of deliverables which exhibit functionality above and beyond the basic requirements, evaluators are encouraged to award between 4% and 15% \"engagement points\" to be applied as extra credit.</p>"},{"location":"projects/rest-api/project/","title":"REST API","text":"<p>NOTE: This project is optional. Don't attempt it unless you are comfortable with your implementation of the CRUD Application project. If you do manage to complete this REST API project, you are free to configure your CRUD Application to use it instead of the provided API.</p> <p>Implement and document a REST API which responds to a specific set of HTTP requests and processes those requests appropriately. The API should respond with data in the JSON format (not XML or other formats). It should be implemented as an Express application hosted on a Heroku application server.</p>"},{"location":"projects/rest-api/project/#instructions","title":"Instructions","text":"<p>For detailed instructions, follow these checkpoint exercises in order:</p> <ol> <li>Checkpoint I: Serving Static Responses to GET Requests</li> <li>Checkpoint II: Seeding the Database</li> <li>Checkpoint III: Serving Dynamic Responses to GET Requests</li> <li>Checkpoint IV: Processing Other Requests</li> </ol> <p>Also feel free to refer to the working implementation of this API, and/or that application's source code for additional information.</p>"},{"location":"projects/rest-api/project/#implementation","title":"Implementation","text":""},{"location":"projects/rest-api/project/#api-endpoints","title":"API Endpoints","text":"<p>Your API should respond to the following requests:</p> action name request method URL endpoint appropriate server action response contents Index GET /api/robots Query the database to retrieve all records in the robots table. An array of JSON objects, each of which represents a robot. Show GET /api/robots/<code>:robotId</code> Query the database to retrieve the record in the robots table which matches the provided identifier. A JSON object representing the given robot. Create POST /api/robots Create a new record in the robots table based on the data passed by the client. A simple \"OK\" message, or optionally a JSON object representing the recently-created robot. Update PUT /api/robots/<code>:robotId</code> Update the record in the robots table which matches the provided identifier, using the data passed by the client. A simple \"OK\" message, or optionally a JSON object representing the recently-updated robot. Destroy DELETE /api/robots/<code>:robotId</code> Remove from the robots table the record which matches the provided identifier. A simple \"OK\" message, or optionally a JSON object representing the recently-deleted robot."},{"location":"projects/rest-api/project/#hosting","title":"Hosting","text":"<p>Push your Express application's source code to a Heroku application server.</p>"},{"location":"projects/rest-api/project/#documentation","title":"Documentation","text":"<p>In the root directory of your project's repository, whether in the README.md file or another file called \"DOCUMENTATION.md\", provide instructions for how clients should expect to interface with your API. Specifically list all of your API's URL endpoints, and for each describe what is supposed to happen when a client makes a request to that endpoint. Make sure to include the type of request they are supposed to make, and an example response they might expect to receive in return. For example:</p> <pre><code># API Documentation\n\n## Endpoints\n\n### List Robots\n\nIssue a GET request to **/api/robots** to retrieve a list of all robot records currently in the database.\n\nExample response:\n\n    [\n      {id:1, name: \"my bot\", description:\"does stuff\"}, // etc.\n      {id:2, name: \"other bot\", description:\"does other stuff\"}, // etc.\n      // etc.\n    ]\n\n### Show Robot\n\netc.\n</code></pre>"},{"location":"projects/rest-api/project/#submission-instructions","title":"Submission Instructions","text":"<p>When your project is ready for evaluation, add its identifying information, including your GitHub username, a link to your site's repository, and a link to your hosted site, to the submissions list. Use the following workflow to accomplish this:</p> <ol> <li>Fork this repository to your own account.</li> <li>Edit the submissions list in your forked repo via the online editor, or by downloading your forked repo, making local commits, and pushing them back up to GitHub.</li> <li>Submit a Pull Request for your changes to be merged into this repo.</li> </ol> <p>NOTE: If you would prefer for any reason to submit your work privately, you may alternatively send the professor your links via email or Slack DM. Your project will still be evaluated, and peer-evaluated, but its identifying information will not be publicly accessible as part of this course repository.</p> <p>Also be prepared to deliver a 5-10 minute presentation to demonstrate usage of your website and describe your planning and design process, as desired.</p>"},{"location":"projects/rest-api/project/#evaluation-criteria","title":"Evaluation Criteria","text":"<p>Your REST API will be evaluated according to the following criteria:</p> criteria weight Documentation 25% Implementation 75% <p>Partial credit may be given to highlight areas of improvement.</p>"},{"location":"projects/rest-api/project/#documentation-evaluation","title":"Documentation Evaluation","text":"<p>Your REST API documentation will be evaluated for presence, clarity, and comprehensiveness. It should include instructions on how to use all API endpoints.</p>"},{"location":"projects/rest-api/project/#implementation-evaluation","title":"Implementation Evaluation","text":"<p>Your REST API implementation will be evaluated based on its demonstrated ability to meet all of the following criteria:</p> <ol> <li>Is hosted on the Internet and publicly accessible.</li> <li>Appropriately processes and provides a response for each HTTP request specified in the project instructions.</li> </ol>"},{"location":"projects/rest-api/checkpoints/database-seeding/checkpoint/","title":"REST API Checkpoint II: Seeding the Database","text":"<p>Configure your MongoDB development database and populate it with example data.</p>"},{"location":"projects/rest-api/checkpoints/database-seeding/checkpoint/#objectives","title":"Objectives","text":"<ul> <li>Create, populate, and query a MongoDB development database</li> <li>Practice running NPM commands and registering NPM scripts</li> </ul>"},{"location":"projects/rest-api/checkpoints/database-seeding/checkpoint/#prerequisites","title":"Prerequisites","text":"<ul> <li>REST API Checkpoint I: Serving Static Responses</li> <li>MongoDB Overview</li> <li>Mongoose Overview</li> </ul> <p>Verify MongoDB is installed and working:</p> <pre><code>which mongo\nmongo --version\nmongo\n&gt; show dbs\n&gt; exit\n</code></pre>"},{"location":"projects/rest-api/checkpoints/database-seeding/checkpoint/#instructions","title":"Instructions","text":""},{"location":"projects/rest-api/checkpoints/database-seeding/checkpoint/#setup-the-development-database","title":"Setup the Development Database","text":"<p>Prerequisite: make sure you have MongoDB installed in your development environment. Then install locally the <code>mongoose</code> NPM package, which provides a JavaScript interface into MongoDB:</p> <pre><code>npm install mongoose --save\n</code></pre> <p>To configure a new MongoDB connection, add a new file called \"db.js\" (for example) and paste in the following contents:</p> <pre><code>var mongoose = require('mongoose');\n\nvar mongoConnectionString = process.env.MONGODB_URI || 'mongodb://localhost/robots-api';\n\nmongoose.connect(mongoConnectionString); // establishes a database connection which may in some cases need to be manually closed via disconnect();\n\nmodule.exports = mongoose;\n</code></pre> <p>To define a MongoDB database schema, add a file called \"models/robot.js\" (for example) and paste in the following code:</p> <pre><code>var mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nvar RobotSchema = new Schema(\n  {\n    name : {\n      type: String,\n      required: true\n    },\n    description : {\n      type: String,\n      required: true\n    }\n  },\n  {\n    timestamps: { // include timestamp attributes in the schema and automatically assign values on create and update, respectively\n      createdAt: 'created_at', // rename from createdAt\n      updatedAt: 'updated_at' // rename from updatedAt\n    }\n  }\n);\n\nmodule.exports = mongoose.model('Robot', RobotSchema);\n</code></pre>"},{"location":"projects/rest-api/checkpoints/database-seeding/checkpoint/#populate-seed-the-development-database","title":"Populate (Seed) the Development Database","text":"<p>Add a new file called \"db/seeds.js\" (for example) and paste in the following contents:</p> <pre><code>var db = require(\"../db\"); // starts a mongoose connection\nvar Robot = require(\"../models/robot\"); // loads the Robot schema and its helpful ORM functions like .find(), .remove(), and .create()\n\nvar exampleRobots = [\n  {name:\"c3po\", description:\"specializes in language translation\"},\n  {name:\"r2d2\", description:\"holds a secret message\"},\n  {name:\"bb8\",  description:\"rolls around\"}\n];\n\n// Find all the robots.\n\nRobot.find(function (err, robots) {\n  if (err) return console.error(err);\n  console.log(\"FOUND\", robots.length, \"ROBOTS TO BE DELETED\")\n\n  // Delete all the robots.\n\n  Robot.remove(robots, function (err) {\n    if (err) return console.error(err);\n    console.log(\"DELETED\")\n\n    // Create all the robots.\n\n    Robot.create(exampleRobots, function (err, newBots) {\n      console.log(newBots)\n      db.disconnect(); // closes the mongoose connection, else it will keep running, which is appropriate for when the web server runs, but not for a script like this.\n    });\n  });\n});\n</code></pre> <p>Run this script to populate the database with those three example records:</p> <pre><code>node db/seeds.js\n</code></pre> <p></p>"},{"location":"projects/rest-api/checkpoints/database-seeding/checkpoint/#query-the-development-database","title":"Query the Development Database","text":"<p>At this point, you should be able to login to MongoDB to confirm existence of a database called <code>robots-api</code>, a database collection called robots, and three example robot records.</p> <pre><code>mongo\n&gt; show dbs\n&gt; use robots-api\n&gt; show collections\n&gt; db.robots.find().pretty()\n&gt; exit\n</code></pre> <p>Congratulations, you are querying the development database like a PRO!</p>"},{"location":"projects/rest-api/checkpoints/dynamic-responses/checkpoint/","title":"Dynamic Response Checkpoint","text":""},{"location":"projects/rest-api/checkpoints/dynamic-responses/checkpoint/#rest-api-checkpoint-iii-serving-dynamic-responses-to-get-requests","title":"REST API Checkpoint III: Serving Dynamic Responses to GET Requests","text":"<p>Connect the web server to the database, and serve dynamic responses at all of the application's GET request endpoints.</p>"},{"location":"projects/rest-api/checkpoints/dynamic-responses/checkpoint/#objectives","title":"Objectives","text":"<ul> <li>Gain exposure to making database calls from within the context of an Express application, and passing database data to the application's views.</li> <li>Practice using an Express web application to handle processing of GET requests.</li> </ul>"},{"location":"projects/rest-api/checkpoints/dynamic-responses/checkpoint/#prerequisites","title":"Prerequisites","text":"<ul> <li>REST API Checkpoint II: Seeding the Database</li> <li>\"Verify\" your Heroku account by adding credit card information at https://heroku.com/verify. Don't worry, you shouldn't be charged for the resource usage levels recommended by this guide.</li> </ul>"},{"location":"projects/rest-api/checkpoints/dynamic-responses/checkpoint/#development-environment-instructions","title":"Development Environment Instructions","text":"<p>These instructions describe the process of configuring the development web server to connect to, and query the development database.</p>"},{"location":"projects/rest-api/checkpoints/dynamic-responses/checkpoint/#connect-to-the-development-database","title":"Connect to the Development Database","text":"<p>To configure the web server to start a database connection on start-up, add the following code near the top of the \"app.js\" file, above the lines where you are requiring your routers:</p> <pre><code>// ...\nvar db = require(\"./db\") // this line is new\nvar index = require('./routes/index'); // this was here before\nvar robotsApi = require('./routes/api/robots'); // this was here before\n// ...\n</code></pre>"},{"location":"projects/rest-api/checkpoints/dynamic-responses/checkpoint/#query-the-development-database","title":"Query the Development Database","text":"<p>Edit the \"routes/api/robots.js\" file to resemble the following:</p> <pre><code>var express = require('express');\nvar router = express.Router();\nvar Robot = require(\"../../models/robot\");\n\n/* List Robots (GET) */\n\nrouter.get('/api/robots', function(req, res, next) {\n  Robot.find( function (err, robots) {\n    if (err) {\n      console.log(err)\n      res.send(\"OOPS. SERVER ERROR.\");\n    } else {\n      console.log(\"LIST\", robots.length, \"ROBOTS:\", robots);\n      res.send(robots.reverse());\n    }\n  });\n});\n\n/* Show Robot (GET) */\n\nrouter.get('/api/robots/:id', function(req, res, next) {\n  console.log(req.params)\n  const robotId = req.params.id;\n\n  Robot.findById(robotId, function(err, robot) {\n    if (err){\n      errorMessage = `OOPS. SERVER ERROR. Couldn't Show robot ${robotId}. ${err} Please double-check you are requesting a robot with a valid identifier. Try listing all robots to see some examples.`\n      console.log(errorMessage)\n      res.send(errorMessage);\n    } else {\n      console.log(\"SHOW ROBOT\", robot);\n      res.send(robot);\n    };\n  });\n});\n\nmodule.exports = router;\n</code></pre> <p>Note the routers are querying the database and passing the results back via response. Also there's some error-handing, but nothing to crazy. The trick here is reading the mongoose documentation for the <code>find()</code> and <code>findById()</code> methods.</p> <p>Visit the endpoints again in your browser to verify the database data is getting passed through in the response.</p> <p>Index Page:</p> <p></p> <p>List Robots API Endpoint:</p> <p></p> <p>Show Robot API Endpoint:</p> <p></p>"},{"location":"projects/rest-api/checkpoints/dynamic-responses/checkpoint/#production-environment-instructions","title":"Production Environment Instructions","text":""},{"location":"projects/rest-api/checkpoints/dynamic-responses/checkpoint/#configure-production-database","title":"Configure Production Database","text":"<p>You've configured your development application to connect to a development database on your local machine, but when you push your application to Heroku, you'll notice you also need to configure a production database. Fortunately, Heroku makes it easy to create a MongoDB \"addon\".</p> <pre><code>heroku addons:create mongolab:sandbox\n</code></pre> <p>If you get an error complaining about verifying your account, you need to enter your credit card with your Heroku account. Don't worry, the <code>mongolab:sandbox</code> addon is free. Sorry you have to enter your credit card info. But again, you shouldn't be charged at this low level of resource usage.</p> <p>When you create the <code>mongolab:sandbox</code> addon, it creates a remote production database server and associates its address with an environment variable called <code>MONGODB_URI</code> on the application server.</p> <p>This will work for us because we have already configured the MongoDB connection string in our \"db.js\" file to search for an environment variable on the server called <code>MONGODB_URI</code>.</p>"},{"location":"projects/rest-api/checkpoints/dynamic-responses/checkpoint/#deploy-to-production","title":"Deploy to Production","text":"<p>Commit your changes to version control if you have not yet done so, then push them to the remote repository, then to the Heroku production application server:</p> <pre><code>git push heroku master\nheroku open\n</code></pre> <p>Test out your GET request endpoints in production. The API is serving appropriate responses for all GET request endpoints! Be proud because this is a major accomplishment.</p>"},{"location":"projects/rest-api/checkpoints/receiving-data/checkpoint/","title":"Receiving Data Checkpoint","text":""},{"location":"projects/rest-api/checkpoints/receiving-data/checkpoint/#rest-api-checkpoint-vi-creating-updating-and-destroying-records","title":"REST API Checkpoint VI - Creating, Updating, and Destroying Records","text":""},{"location":"projects/rest-api/checkpoints/receiving-data/checkpoint/#objectives","title":"Objectives","text":"<ol> <li>Gain exposure to using Express to handle cross-origin requests.</li> <li>Gain exposure to using Express to process POST, PUT, and DELETE requests.</li> <li>Practice responding to requests using the proper response status.</li> </ol>"},{"location":"projects/rest-api/checkpoints/receiving-data/checkpoint/#prerequisites","title":"Prerequisites","text":"<ol> <li>REST API Checkpoint III - Serving Dynamic Responses  Records</li> </ol>"},{"location":"projects/rest-api/checkpoints/receiving-data/checkpoint/#instructions","title":"Instructions","text":"<p>Follow these request-specific guides in order:</p> <ul> <li>Creating Records</li> <li>Destroying Records</li> <li>Updating Records</li> </ul>"},{"location":"projects/rest-api/checkpoints/receiving-data/creating-records/","title":"Creating records","text":"<p>TBA - Handle POST requests to create a new record. Reference code changes from this Pull Request.</p>"},{"location":"projects/rest-api/checkpoints/receiving-data/destroying-records/","title":"Destroying records","text":"<p>TBA - Handle DELETE requests to destroy an existing record.</p>"},{"location":"projects/rest-api/checkpoints/receiving-data/updating-records/","title":"Updating records","text":"<p>TBA - Handle PUT requests to update an existing record.</p>"},{"location":"projects/rest-api/checkpoints/static-responses/checkpoint/","title":"REST API Checkpoint I: Serving Static Responses","text":"<p>Generate a new Express application, deploy it to Heroku, then configure its routing to serve static responses at all of its GET request endpoints.</p>"},{"location":"projects/rest-api/checkpoints/static-responses/checkpoint/#objectives","title":"Objectives","text":"<ul> <li>Practice generating an Express web application.</li> <li>Practice configuring the routing and navigation of an Express web application.</li> <li>Practice deploying an Express web application to a production environment hosted by Heroku.</li> <li>Practice using an Express web application to handle processing of GET requests.</li> </ul>"},{"location":"projects/rest-api/checkpoints/static-responses/checkpoint/#prerequisites","title":"Prerequisites","text":"<ul> <li>CRUD Application Project</li> </ul>"},{"location":"projects/rest-api/checkpoints/static-responses/checkpoint/#instructions","title":"Instructions","text":""},{"location":"projects/rest-api/checkpoints/static-responses/checkpoint/#application-generation","title":"Application Generation","text":"<pre><code>express robots-api --view=ejs\ngit init .\ngit add .\ngit commit -m \"Generate new express application\"\nheroku create southernct-443-robots-api\natom .\n</code></pre> <pre><code>npm install\n</code></pre>"},{"location":"projects/rest-api/checkpoints/static-responses/checkpoint/#application-configuration","title":"Application Configuration","text":"<p>Add a .gitignore file:</p> <pre><code>node_modules/\n</code></pre> <p>Add a <code>Procfile</code> file:</p> <pre><code>web: node ./bin/www\n</code></pre> <p>To use the nodemon development web server: in the <code>package.json</code> file, change <code>\"start\": \"node ./bin/www\"</code> to <code>\"start\": \"nodemon ./bin/www\"</code> (assuming you have already run <code>npm install nodemon -g</code> to install it globally on your development machine).</p> <p>Start a local web server:</p> <pre><code>DEBUG=my_app:* npm start\n</code></pre>"},{"location":"projects/rest-api/checkpoints/static-responses/checkpoint/#application-deployment","title":"Application Deployment","text":"<p>Check it out in a browser at localhost:3000. It says \"Welcome to Express.\" Good enough to deploy. Configure a remote repository, then deploy.</p> <pre><code>git remote add origin git@github.com:prof-rossetti/robots-api-express.git\ngit push origin master\ngit push heroku master\nheroku open\n</code></pre> <p>It says \"Welcome to Express.\" Success. Application Generation, Configuration, and Deployment. Not too hard.</p>"},{"location":"projects/rest-api/checkpoints/static-responses/checkpoint/#application-routing","title":"Application Routing","text":"<p>Time to configure routing to each of the API endpoints.</p> <p>Add new \"DOCUMENTATION.md\" file and describe GET request endpoints.</p> <p>Covert users router to a robots API router. Add links to the various endpoints from the index page for easy navigation. Serve static data at the GET request endpoints.</p> <p>Index Page:</p> <p></p> <p>List Robots API Endpoint:</p> <p></p> <p>Show Robot API Endpoint:</p> <p></p>"},{"location":"projects/web-app/demo/","title":"Web App Project Presentation","text":"<p>See: The Web App Project</p>"},{"location":"projects/web-app/demo/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Show-off your hard work to the rest of the class.</li> <li>Practice communicating technology concepts at a high-level for an audience of potentially-non-technical individuals.</li> <li>Learn more about the other student projects, share knowledge with each other, and celebrate in each other's successes.</li> </ul>"},{"location":"projects/web-app/demo/#instructions","title":"Instructions","text":"<p>Prepare a five minute presentation to share your project with the rest of the class. It should be in Google Slides or MS PowerPoint format, and should generally include the following slides / components (see \"Sections\" below for more details):</p> <ol> <li>Introduction</li> <li>Problem Statement / User Needs</li> <li>Proposed Solution / Info Requirements</li> <li>Live Demo</li> <li>Reflections (optional)</li> </ol> <p>Record your presentation using a tool like Zoom, then submit your presentation slideshow and video file(s) as instructed.</p>"},{"location":"projects/web-app/demo/#sections","title":"Sections","text":""},{"location":"projects/web-app/demo/#introduction","title":"Introduction","text":"<p>Introduce yourself and your project's name and subject matter.</p>"},{"location":"projects/web-app/demo/#problem-statement-user-needs","title":"Problem Statement / User Needs","text":"<p>Describe the problem addressed by your project. Who are the affected users and what are their needs?</p>"},{"location":"projects/web-app/demo/#proposed-solution-info-requirements","title":"Proposed Solution / Info Requirements","text":"<p>Describe your proposed solution to the problem. What does it do? At a high-level, describe how it works, how users interact with it, and any other services or platforms it interfaces with.</p>"},{"location":"projects/web-app/demo/#live-demo","title":"Live Demo","text":"<p>Transition into a live demonstration of your project in action. If for some reason you have not yet completed your project, choose a small component to demo, or demo the results of your investigation efforts into the system's technical feasibility.</p>"},{"location":"projects/web-app/demo/#reflections","title":"Reflections","text":"<p>Remark on your reactions to the process. For example, you might address the following questions:</p> <ul> <li>What was the hardest part of the planning and/or implementation processes? Did you run into any unforeseen issues?</li> <li>How did you prioritize features? For groups, how did you split up the work?</li> <li>What did you learn while working on this project? How did you learn what you needed to learn? Did you find any helpful resources?</li> <li>What went well, and/or what would you do differently next time?</li> <li>What are your next steps, if any?</li> </ul>"},{"location":"projects/web-app/demo/#submission-instructions","title":"Submission Instructions","text":"<p>The professor will assign your group to present on a designated \"Demo Day\" and time. The professor will designate whether presentations will be given in-person, or remotely via Zoom. The professor will also designate whether presentations will be pre-recorded, or delivered synchronously. See instructions below according to the guidance you're given.</p> <p>Before 11:59pm on the day before your designated demo day, upload a PDF version of your presentation document (and a copy of your prerecorded Zoom video .mp4 file) as instructed.</p>"},{"location":"projects/web-app/demo/#synchronous-delivery-guidance","title":"Synchronous Delivery Guidance","text":"<p>If presenting in-person:</p> <ol> <li>During the first few minutes of class on your designated demo day, practice connecting your computer to the projector using either of the provided VGA or HDMI cables.</li> <li>After the group scheduled to present before you starts to take questions, begin setting up your computer by connecting it to the projector and preparing to demo.</li> <li>During your designated demo time, deliver your presentation in front of the class. When you are finished, step to the side to answer questions while the next group sets up.</li> </ol> <p>Otherwise if presenting remotely via Zoom:</p> <ol> <li>Before your designated demo day, invite a friend to your own Zoom meeting and practice your ability to connect and screen share.</li> <li>After the group scheduled to present before you starts to take questions, mentally prepare to start your demo. Make sure your screen is suitable to start sharing.</li> <li>During your designated demo time, deliver your presentation in front of the class. When you are finished, prepare to answer questions as moderated by the professor.</li> </ol> <p>NOTE: students in different time zones who are not able to present during the designated Demo Day should pre-record their presentation via Zoom and share the recording file(s) with the professor at least one day in advance of the designated Demo Day (see \"Asynchronous Delivery\" section).</p>"},{"location":"projects/web-app/demo/#asynchronous-delivery","title":"Asynchronous Delivery","text":"<p>If recording your presentation asynchronously:</p> <ol> <li>Before your designated demo day, record your presentation via Zoom.</li> <li>Before your designated demo day, upload the video file(s) or share them with the professor as instructed.</li> <li>Sit back during demo day as the professor plays your prerecorded demo. Note the professor may play the video on a faster speed if the video is longer than desired.</li> </ol>"},{"location":"projects/web-app/demo/#evaluation","title":"Evaluation","text":"<p>Presentations will be evaluated on the basis of content and delivery. Students should strive to deliver presentations with clarity and confidence. Impressive and memorable demonstrations are a great way to earn top grades. The professor may ask other students in the audience to evaluate the presentations, in which case these peer evaluations may likely be factored into the final presentation grade.</p>"},{"location":"projects/web-app/implementation/","title":"Web App Project Implementation","text":"<p>See: The Web App Project</p>"},{"location":"projects/web-app/implementation/#instructions","title":"Instructions","text":"<p>Iteratively develop your project using version control practices. Save new versions of your source code as you reach key milestones.</p> <p>If working in a group, each group member should ideally make significant contributions to the application's source code, but \"pair programming\" is OK too.</p> <p>Include written instructions in the repo's README file to tell someone else how to download your code, setup the app, run the app locally, and deploy it. If connecting to third-party APIs or back-end databases, include instructions for how to set up the database, obtain credentials, etc.</p> <p>If using secret credentials like API keys or a Google credentials file, they should NOT be hard-coded in the source code or exposed anywhere in the GitHub repository. Instead, specify secret values as environment variables (for example using a \".env\" file approach), and use a \".gitignore\" file to ignore files with sensitive values (like the \".env\" and \"google-credentials.json\" files) from version control, thus preventing them from being uploaded to GitHub.</p>"},{"location":"projects/web-app/implementation/#submission-instructions","title":"Submission Instructions","text":"<p>Submit the designated Google Form before the designated date, providing the URLs to your GitHub repository and hosted site.</p>"},{"location":"projects/web-app/implementation/#evaluation","title":"Evaluation","text":"<p>Web applications will be evaluated according to the project requirements and instructions set forth above, as summarized by the rubric below:</p> Category Requirement Weight Hosting App is publicly accessible over the Internet (i.e. hosted using a platform like Render). 10% Structure App has at least three navigable pages, with consistent navigation across all pages, and no broken links. 10% Style App is reasonably well styled, and \"responsive\" when window is resized to a mobile device width. 10% Interactivity App includes interactive features, like responding to button click events or web form submission. 10% Data Processing App fetches data from a third-party API or back-end database. Ideally also sends data to a back-end database. 10% Content App content is creative and unique. 15% Documentation Repo contains a comprehensive README file with written setup instructions and usage commands. 10% Security Excludes sensitive information and credentials from version control; uses server-side requests to protect secret credentials and/or user data as necessary. 10% Dev Process Submitted via remote Git repository which reflects an incremental revision history, and contributions from ideally all team members. 15% <p>This rubric is tentative, and may be subject to slight adjustments during the grading process.</p> <p>If experiencing navigation or functionality error(s) while evaluating the app, evaluators are advised to reduce the grade by between 4% and 25%, depending on the circumstances and severity of the error(s).</p> <p>In recognition of deliverables which exhibit functionality above and beyond the basic requirements, evaluators are encouraged to award between 4% and 15% \"engagement points\" to be applied as extra credit.</p>"},{"location":"projects/web-app/project/","title":"Web Application Group Project","text":""},{"location":"projects/web-app/project/#objectives","title":"Objectives","text":"<ol> <li>Create a dynamic and interactive web-based application for business purposes.</li> <li>Leverage technology as an outlet for creativity.</li> <li>Have fun!</li> </ol>"},{"location":"projects/web-app/project/#requirements","title":"Requirements","text":"<p>Create an interactive website or web application for some practical business purpose. The web app's content can be real or fictitious.</p> <p>The application should feature at least three pages with consistent style and navigation.</p> <p>The application should feature some set of interactive functionality, whether it be responding to button click events, submitting web forms, producing interactive data visualizations, etc.</p> <p>The application should fetch data from a back-end database or API, and may ideally also send data to a back-end database or API.</p>"},{"location":"projects/web-app/project/#groups","title":"Groups","text":"<p>Students have the option of working in groups of up to four total members.</p> <p>To fairly evaluate groups of different sizes, projects may be ranked against others of the same group size.</p> <p>To incentivize individual effort within groups, each group member may be asked to submit a form describing and rating the roles and relative contributions of all other group members.</p>"},{"location":"projects/web-app/project/#deliverables","title":"Deliverables","text":"<p>For more information about requirements and evaluation criteria, see the individual deliverable descriptions:</p> <ol> <li>Implementation</li> <li>Presentation</li> </ol>"}]}